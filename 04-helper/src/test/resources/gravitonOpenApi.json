{
    "openapi": "3.1.0",
    "info": {
        "title": "Endpoint for Graviton entries.",
        "version": "1.0.0"
    },
    "paths": {
        "/account/account-migration/": {
            "get": {
                "summary": "Returns AccountMigration entries.",
                "operationId": "getAllAccountMigration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountMigration"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single AccountMigration entry.",
                "operationId": "postAccountMigration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountMigration"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/account/account-migration/{id}": {
            "get": {
                "summary": "Returns a single AccountMigration entry.",
                "operationId": "getOneAccountMigration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountMigration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single AccountMigration element.",
                "operationId": "putOneAccountMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountMigration"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single AccountMigration element.",
                "operationId": "patchOneAccountMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single AccountMigration element.",
                "operationId": "deleteOneAccountMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/account/": {
            "get": {
                "summary": "Returns Account entries.",
                "operationId": "getAllAccount",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Account"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Account entry.",
                "operationId": "postAccount",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/account/account/turnover/": {
            "get": {
                "summary": "Returns AccountTurnover entries.",
                "operationId": "getAllAccountTurnover",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountTurnover"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/account/turnover/{id}": {
            "get": {
                "summary": "Returns a single AccountTurnover entry.",
                "operationId": "getOneAccountTurnover",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountTurnover"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/account/{id}": {
            "get": {
                "summary": "Returns a single Account entry.",
                "operationId": "getOneAccount",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Account element.",
                "operationId": "putOneAccount",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Account element.",
                "operationId": "patchOneAccount",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Account element.",
                "operationId": "deleteOneAccount",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/dispatchrule/": {
            "get": {
                "summary": "Returns DispatchRule entries.",
                "operationId": "getAllDispatchRule",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DispatchRule"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/dispatchrule/{id}": {
            "get": {
                "summary": "Returns a single DispatchRule entry.",
                "operationId": "getOneDispatchRule",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DispatchRule"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/group-check/": {
            "get": {
                "summary": "Returns AccountGroupCheck entries.",
                "operationId": "getAllAccountGroupCheck",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountGroupCheck"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single AccountGroupCheck entry.",
                "operationId": "postAccountGroupCheck",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountGroupCheck"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/account/group-check/{id}": {
            "get": {
                "summary": "Returns a single AccountGroupCheck entry.",
                "operationId": "getOneAccountGroupCheck",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountGroupCheck"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single AccountGroupCheck element.",
                "operationId": "putOneAccountGroupCheck",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountGroupCheck"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single AccountGroupCheck element.",
                "operationId": "patchOneAccountGroupCheck",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single AccountGroupCheck element.",
                "operationId": "deleteOneAccountGroupCheck",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/group/": {
            "get": {
                "summary": "Returns Accountgroup entries.",
                "operationId": "getAllAccountgroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Accountgroup"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/group/{id}": {
            "get": {
                "summary": "Returns a single Accountgroup entry.",
                "operationId": "getOneAccountgroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Accountgroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/instruction/": {
            "get": {
                "summary": "Returns AccountInstruction entries.",
                "operationId": "getAllAccountInstruction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountInstruction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single AccountInstruction entry.",
                "operationId": "postAccountInstruction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountInstruction"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/account/instruction/{id}": {
            "get": {
                "summary": "Returns a single AccountInstruction entry.",
                "operationId": "getOneAccountInstruction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountInstruction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single AccountInstruction element.",
                "operationId": "putOneAccountInstruction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountInstruction"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single AccountInstruction element.",
                "operationId": "patchOneAccountInstruction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single AccountInstruction element.",
                "operationId": "deleteOneAccountInstruction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/payment/": {
            "get": {
                "summary": "Returns Payment entries.",
                "operationId": "getAllPayment",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Payment"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/payment/{id}": {
            "get": {
                "summary": "Returns a single Payment entry.",
                "operationId": "getOnePayment",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/position/": {
            "get": {
                "summary": "Returns AccountPosition entries.",
                "operationId": "getAllAccountPosition",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountPosition"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/position/transaction/": {
            "get": {
                "summary": "Returns AccountPositionTransaction entries.",
                "operationId": "getAllAccountPositionTransaction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountPositionTransaction"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/position/transaction/{id}": {
            "get": {
                "summary": "Returns a single AccountPositionTransaction entry.",
                "operationId": "getOneAccountPositionTransaction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountPositionTransaction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/position/{id}": {
            "get": {
                "summary": "Returns a single AccountPosition entry.",
                "operationId": "getOneAccountPosition",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountPosition"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/statement/": {
            "get": {
                "summary": "Returns AccountStatement entries.",
                "operationId": "getAllAccountStatement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountStatement"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/statement/{id}": {
            "get": {
                "summary": "Returns a single AccountStatement entry.",
                "operationId": "getOneAccountStatement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountStatement"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/transaction/": {
            "get": {
                "summary": "Returns AccountTransaction entries.",
                "operationId": "getAllAccountTransaction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountTransaction"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/account/transaction/{id}": {
            "get": {
                "summary": "Returns a single AccountTransaction entry.",
                "operationId": "getOneAccountTransaction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountTransaction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/account/withdrawal/": {
            "get": {
                "summary": "Returns AccountWithdrawal entries.",
                "operationId": "getAllAccountWithdrawal",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountWithdrawal"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single AccountWithdrawal entry.",
                "operationId": "postAccountWithdrawal",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountWithdrawal"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/account/withdrawal/{id}": {
            "get": {
                "summary": "Returns a single AccountWithdrawal entry.",
                "operationId": "getOneAccountWithdrawal",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountWithdrawal"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single AccountWithdrawal element.",
                "operationId": "putOneAccountWithdrawal",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountWithdrawal"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single AccountWithdrawal element.",
                "operationId": "patchOneAccountWithdrawal",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single AccountWithdrawal element.",
                "operationId": "deleteOneAccountWithdrawal",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/agenda/config/": {
            "get": {
                "summary": "Returns AgendaConfig entries.",
                "operationId": "getAllAgendaConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AgendaConfig"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single AgendaConfig entry.",
                "operationId": "postAgendaConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgendaConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/agenda/config/{id}": {
            "get": {
                "summary": "Returns a single AgendaConfig entry.",
                "operationId": "getOneAgendaConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgendaConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single AgendaConfig element.",
                "operationId": "putOneAgendaConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgendaConfig"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single AgendaConfig element.",
                "operationId": "patchOneAgendaConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single AgendaConfig element.",
                "operationId": "deleteOneAgendaConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/analytics/auditing-entris-bank-user-summary": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetAuditing-entris-bank-user-summary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalAuditing-entris-bank-user-summary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "webDomain",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/auditing-requests": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetAuditing-requests",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalAuditing-requests"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "requestId",
                        "schema": {
                            "type": "mongoid"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "username",
                        "schema": {
                            "type": "array"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "method",
                        "schema": {
                            "type": "array"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fromDate",
                        "schema": {
                            "type": "date"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "toDate",
                        "schema": {
                            "type": "date"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": "100"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "requestUri",
                        "schema": {
                            "type": "regexstring"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "responseCode",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "showRequestBody",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "showResponseBody",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/auditing-sessions-active": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetAuditing-sessions-active",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalAuditing-sessions-active"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                }
            }
        },
        "/analytics/auditing-users-daily-summary": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetAuditing-users-daily-summary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalAuditing-users-daily-summary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "schema": {
                            "type": "array"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fromDate",
                        "schema": {
                            "type": "date"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "toDate",
                        "schema": {
                            "type": "date"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": "100"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/auditing-users-historical": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetAuditing-users-historical",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalAuditing-users-historical"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "schema": {
                            "type": "array"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fromDate",
                        "schema": {
                            "type": "date"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "toDate",
                        "schema": {
                            "type": "date"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": "100"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/bank-info": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetBank-info",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalBank-info"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                }
            }
        },
        "/analytics/codeGroup": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetCodegroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalCodegroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                }
            }
        },
        "/analytics/consultant-lead-summary": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetConsultant-lead-summary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalConsultant-lead-summary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "staffMemberId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/consultant-workbench-summary": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetConsultant-workbench-summary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalConsultant-workbench-summary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "assigneeId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/consultantsearch": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetConsultantsearch",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalConsultantsearch"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "iban",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/contractnote": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetContractnote",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalContractnote"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "attorneyDonor",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "attorneyReceiver",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "contractTypeExclude",
                        "schema": {
                            "type": "array"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "powerOfAttorney",
                        "schema": {
                            "type": "boolean"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/customer-profile-completion": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetCustomer-profile-completion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalCustomer-profile-completion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "customerId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/customerbirthdays": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetCustomerbirthdays",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalCustomerbirthdays"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "consultantId",
                        "schema": {
                            "type": "array"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "clientStatus",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "daysForward",
                        "schema": {
                            "type": "integer",
                            "default": "30"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "daysBack",
                        "schema": {
                            "type": "integer",
                            "default": "0"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/customerbook": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetCustomerbook",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalCustomerbook"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "consultantId",
                        "schema": {
                            "type": "array"
                        },
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/customerbook-lead-count": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetCustomerbook-lead-count",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalCustomerbook-lead-count"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "consultantUsername",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/customergroup": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetCustomergroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalCustomergroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "consultantId",
                        "schema": {
                            "type": "array"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/customersegment": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetCustomersegment",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalCustomersegment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "consultantId",
                        "schema": {
                            "type": "array"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/financing-estimation-explicit": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetFinancing-estimation-explicit",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalFinancing-estimation-explicit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "propertyType",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "useType",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "objectName",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "street",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "city",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "createdBy",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "createdAfter",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "createdUntil",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/financing-estimation-iazi": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetFinancing-estimation-iazi",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalFinancing-estimation-iazi"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "objectType",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "useType",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "objectId",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "street",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "city",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "createdBy",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "createdAfter",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "createdUntil",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "required": false
                    }
                ]
            }
        },
        "/analytics/financingexpress": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetFinancingexpress",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalFinancingexpress"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "customerId",
                        "schema": {
                            "type": "array"
                        },
                        "required": true
                    }
                ]
            }
        },
        "/analytics/translation-namespaces": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetTranslation-namespaces",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalTranslation-namespaces"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                }
            }
        },
        "/analytics/workguide-netted-accounts": {
            "get": {
                "summary": "Gets the analytical data.",
                "operationId": "analyticalGetWorkguide-netted-accounts",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnalyticalWorkguide-netted-accounts"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameter supplied."
                    }
                }
            }
        },
        "/archive/kendox/": {
            "get": {
                "summary": "Returns Kendox entries.",
                "operationId": "getAllKendox",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Kendox"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Kendox entry.",
                "operationId": "postKendox",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Kendox"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/archive/kendox/{id}": {
            "get": {
                "summary": "Returns a single Kendox entry.",
                "operationId": "getOneKendox",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Kendox"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Kendox element.",
                "operationId": "putOneKendox",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Kendox"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Kendox element.",
                "operationId": "patchOneKendox",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Kendox element.",
                "operationId": "deleteOneKendox",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/balance/category/": {
            "get": {
                "summary": "Returns BalanceCategory entries.",
                "operationId": "getAllBalanceCategory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BalanceCategory"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BalanceCategory entry.",
                "operationId": "postBalanceCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BalanceCategory"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/balance/category/{id}": {
            "get": {
                "summary": "Returns a single BalanceCategory entry.",
                "operationId": "getOneBalanceCategory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BalanceCategory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BalanceCategory element.",
                "operationId": "putOneBalanceCategory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BalanceCategory"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BalanceCategory element.",
                "operationId": "patchOneBalanceCategory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BalanceCategory element.",
                "operationId": "deleteOneBalanceCategory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/balance/categorymapping/": {
            "get": {
                "summary": "Returns BalanceCategoryMapping entries.",
                "operationId": "getAllBalanceCategoryMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BalanceCategoryMapping"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BalanceCategoryMapping entry.",
                "operationId": "postBalanceCategoryMapping",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BalanceCategoryMapping"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/balance/categorymapping/{id}": {
            "get": {
                "summary": "Returns a single BalanceCategoryMapping entry.",
                "operationId": "getOneBalanceCategoryMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BalanceCategoryMapping"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BalanceCategoryMapping element.",
                "operationId": "putOneBalanceCategoryMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BalanceCategoryMapping"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BalanceCategoryMapping element.",
                "operationId": "patchOneBalanceCategoryMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BalanceCategoryMapping element.",
                "operationId": "deleteOneBalanceCategoryMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/balance/productaddition/": {
            "get": {
                "summary": "Returns ProductAddition entries.",
                "operationId": "getAllProductAddition",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductAddition"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProductAddition entry.",
                "operationId": "postProductAddition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductAddition"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/balance/productaddition/{id}": {
            "get": {
                "summary": "Returns a single ProductAddition entry.",
                "operationId": "getOneProductAddition",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductAddition"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProductAddition element.",
                "operationId": "putOneProductAddition",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductAddition"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProductAddition element.",
                "operationId": "patchOneProductAddition",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProductAddition element.",
                "operationId": "deleteOneProductAddition",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/exchangerate/": {
            "get": {
                "summary": "Returns BasicExchangeRate entries.",
                "operationId": "getAllBasicExchangeRate",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasicExchangeRate"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/exchangerate/{id}": {
            "get": {
                "summary": "Returns a single BasicExchangeRate entry.",
                "operationId": "getOneBasicExchangeRate",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicExchangeRate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/intermediateview/": {
            "get": {
                "summary": "Returns BasicIntermediateView entries.",
                "operationId": "getAllBasicIntermediateView",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasicIntermediateView"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BasicIntermediateView entry.",
                "operationId": "postBasicIntermediateView",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicIntermediateView"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/intermediateview/{id}": {
            "get": {
                "summary": "Returns a single BasicIntermediateView entry.",
                "operationId": "getOneBasicIntermediateView",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicIntermediateView"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BasicIntermediateView element.",
                "operationId": "putOneBasicIntermediateView",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicIntermediateView"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BasicIntermediateView element.",
                "operationId": "patchOneBasicIntermediateView",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BasicIntermediateView element.",
                "operationId": "deleteOneBasicIntermediateView",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/irsinterestscalev2/": {
            "get": {
                "summary": "Returns IrsInterestScaleV2 entries.",
                "operationId": "getAllIrsInterestScaleV2",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IrsInterestScaleV2"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/irsinterestscalev2/{id}": {
            "get": {
                "summary": "Returns a single IrsInterestScaleV2 entry.",
                "operationId": "getOneIrsInterestScaleV2",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IrsInterestScaleV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/product/": {
            "get": {
                "summary": "Returns BasicProduct entries.",
                "operationId": "getAllBasicProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasicProduct"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BasicProduct entry.",
                "operationId": "postBasicProduct",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/product/{id}": {
            "get": {
                "summary": "Returns a single BasicProduct entry.",
                "operationId": "getOneBasicProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicProduct"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BasicProduct element.",
                "operationId": "putOneBasicProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProduct"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BasicProduct element.",
                "operationId": "patchOneBasicProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BasicProduct element.",
                "operationId": "deleteOneBasicProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productaddition/": {
            "get": {
                "summary": "Returns BasicProductAddition entries.",
                "operationId": "getAllBasicProductAddition",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasicProductAddition"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BasicProductAddition entry.",
                "operationId": "postBasicProductAddition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProductAddition"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/productaddition/{id}": {
            "get": {
                "summary": "Returns a single BasicProductAddition entry.",
                "operationId": "getOneBasicProductAddition",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicProductAddition"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BasicProductAddition element.",
                "operationId": "putOneBasicProductAddition",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProductAddition"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BasicProductAddition element.",
                "operationId": "patchOneBasicProductAddition",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BasicProductAddition element.",
                "operationId": "deleteOneBasicProductAddition",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productbundle/bundle/": {
            "get": {
                "summary": "Returns ProductBundleBundle entries.",
                "operationId": "getAllProductBundleBundle",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductBundleBundle"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProductBundleBundle entry.",
                "operationId": "postProductBundleBundle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductBundleBundle"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/productbundle/bundle/{id}": {
            "get": {
                "summary": "Returns a single ProductBundleBundle entry.",
                "operationId": "getOneProductBundleBundle",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductBundleBundle"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProductBundleBundle element.",
                "operationId": "putOneProductBundleBundle",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductBundleBundle"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProductBundleBundle element.",
                "operationId": "patchOneProductBundleBundle",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProductBundleBundle element.",
                "operationId": "deleteOneProductBundleBundle",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productbundle/pricing/": {
            "get": {
                "summary": "Returns ProductBundlePricing entries.",
                "operationId": "getAllProductBundlePricing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductBundlePricing"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProductBundlePricing entry.",
                "operationId": "postProductBundlePricing",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductBundlePricing"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/productbundle/pricing/{id}": {
            "get": {
                "summary": "Returns a single ProductBundlePricing entry.",
                "operationId": "getOneProductBundlePricing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductBundlePricing"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProductBundlePricing element.",
                "operationId": "putOneProductBundlePricing",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductBundlePricing"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProductBundlePricing element.",
                "operationId": "patchOneProductBundlePricing",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProductBundlePricing element.",
                "operationId": "deleteOneProductBundlePricing",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productbundle/product/": {
            "get": {
                "summary": "Returns ProductBundleProduct entries.",
                "operationId": "getAllProductBundleProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductBundleProduct"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProductBundleProduct entry.",
                "operationId": "postProductBundleProduct",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductBundleProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/productbundle/product/{id}": {
            "get": {
                "summary": "Returns a single ProductBundleProduct entry.",
                "operationId": "getOneProductBundleProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductBundleProduct"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProductBundleProduct element.",
                "operationId": "putOneProductBundleProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductBundleProduct"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProductBundleProduct element.",
                "operationId": "patchOneProductBundleProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProductBundleProduct element.",
                "operationId": "deleteOneProductBundleProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productbundle/usage/": {
            "get": {
                "summary": "Returns ProductBundleUsage entries.",
                "operationId": "getAllProductBundleUsage",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductBundleUsage"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/productbundle/usage/{id}": {
            "get": {
                "summary": "Returns a single ProductBundleUsage entry.",
                "operationId": "getOneProductBundleUsage",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductBundleUsage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productcategory/": {
            "get": {
                "summary": "Returns BasicProductCategory entries.",
                "operationId": "getAllBasicProductCategory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasicProductCategory"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BasicProductCategory entry.",
                "operationId": "postBasicProductCategory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProductCategory"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/productcategory/{id}": {
            "get": {
                "summary": "Returns a single BasicProductCategory entry.",
                "operationId": "getOneBasicProductCategory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicProductCategory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BasicProductCategory element.",
                "operationId": "putOneBasicProductCategory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProductCategory"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BasicProductCategory element.",
                "operationId": "patchOneBasicProductCategory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BasicProductCategory element.",
                "operationId": "deleteOneBasicProductCategory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productdocument/": {
            "get": {
                "summary": "Returns BasicProductDocument entries.",
                "operationId": "getAllBasicProductDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasicProductDocument"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BasicProductDocument entry.",
                "operationId": "postBasicProductDocument",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProductDocument"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/productdocument/{id}": {
            "get": {
                "summary": "Returns a single BasicProductDocument entry.",
                "operationId": "getOneBasicProductDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicProductDocument"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BasicProductDocument element.",
                "operationId": "putOneBasicProductDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasicProductDocument"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BasicProductDocument element.",
                "operationId": "patchOneBasicProductDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BasicProductDocument element.",
                "operationId": "deleteOneBasicProductDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/productgroup/": {
            "get": {
                "summary": "Returns ProductGroup entries.",
                "operationId": "getAllProductGroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductGroup"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProductGroup entry.",
                "operationId": "postProductGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/basic/productgroup/{id}": {
            "get": {
                "summary": "Returns a single ProductGroup entry.",
                "operationId": "getOneProductGroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProductGroup element.",
                "operationId": "putOneProductGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductGroup"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProductGroup element.",
                "operationId": "patchOneProductGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProductGroup element.",
                "operationId": "deleteOneProductGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/rate/": {
            "get": {
                "summary": "Returns RateBase entries.",
                "operationId": "getAllRateBase",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RateBase"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/rate/{id}": {
            "get": {
                "summary": "Returns a single RateBase entry.",
                "operationId": "getOneRateBase",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateBase"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/safe/catalog/": {
            "get": {
                "summary": "Returns SafeCatalog entries.",
                "operationId": "getAllSafeCatalog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SafeCatalog"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/safe/catalog/{id}": {
            "get": {
                "summary": "Returns a single SafeCatalog entry.",
                "operationId": "getOneSafeCatalog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SafeCatalog"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/safe/report/": {
            "get": {
                "summary": "Returns SafeReport entries.",
                "operationId": "getAllSafeReport",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SafeReport"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/safe/report/{id}": {
            "get": {
                "summary": "Returns a single SafeReport entry.",
                "operationId": "getOneSafeReport",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SafeReport"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/safe/usage/": {
            "get": {
                "summary": "Returns SafeUsage entries.",
                "operationId": "getAllSafeUsage",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SafeUsage"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/safe/usage/{id}": {
            "get": {
                "summary": "Returns a single SafeUsage entry.",
                "operationId": "getOneSafeUsage",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SafeUsage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/swift-clearing/": {
            "get": {
                "summary": "Returns SwiftClearing entries.",
                "operationId": "getAllSwiftClearing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SwiftClearing"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/swift-clearing/{id}": {
            "get": {
                "summary": "Returns a single SwiftClearing entry.",
                "operationId": "getOneSwiftClearing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SwiftClearing"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/basic/tariff/": {
            "get": {
                "summary": "Returns BasicTariff entries.",
                "operationId": "getAllBasicTariff",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasicTariff"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/basic/tariff/{id}": {
            "get": {
                "summary": "Returns a single BasicTariff entry.",
                "operationId": "getOneBasicTariff",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicTariff"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/checklist/checkpoint/": {
            "get": {
                "summary": "Returns ChecklistCheckpoint entries.",
                "operationId": "getAllChecklistCheckpoint",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChecklistCheckpoint"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ChecklistCheckpoint entry.",
                "operationId": "postChecklistCheckpoint",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistCheckpoint"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/checklist/checkpoint/{id}": {
            "get": {
                "summary": "Returns a single ChecklistCheckpoint entry.",
                "operationId": "getOneChecklistCheckpoint",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChecklistCheckpoint"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ChecklistCheckpoint element.",
                "operationId": "putOneChecklistCheckpoint",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistCheckpoint"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ChecklistCheckpoint element.",
                "operationId": "patchOneChecklistCheckpoint",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ChecklistCheckpoint element.",
                "operationId": "deleteOneChecklistCheckpoint",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/checklist/config/checklist/": {
            "get": {
                "summary": "Returns ChecklistChecklist entries.",
                "operationId": "getAllChecklistChecklist",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChecklistChecklist"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ChecklistChecklist entry.",
                "operationId": "postChecklistChecklist",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistChecklist"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/checklist/config/checklist/{id}": {
            "get": {
                "summary": "Returns a single ChecklistChecklist entry.",
                "operationId": "getOneChecklistChecklist",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChecklistChecklist"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ChecklistChecklist element.",
                "operationId": "putOneChecklistChecklist",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistChecklist"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ChecklistChecklist element.",
                "operationId": "patchOneChecklistChecklist",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ChecklistChecklist element.",
                "operationId": "deleteOneChecklistChecklist",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/checklist/config/section/": {
            "get": {
                "summary": "Returns ChecklistConfigurationSection entries.",
                "operationId": "getAllChecklistConfigurationSection",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChecklistConfigurationSection"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ChecklistConfigurationSection entry.",
                "operationId": "postChecklistConfigurationSection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistConfigurationSection"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/checklist/config/section/{id}": {
            "get": {
                "summary": "Returns a single ChecklistConfigurationSection entry.",
                "operationId": "getOneChecklistConfigurationSection",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChecklistConfigurationSection"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ChecklistConfigurationSection element.",
                "operationId": "putOneChecklistConfigurationSection",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistConfigurationSection"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ChecklistConfigurationSection element.",
                "operationId": "patchOneChecklistConfigurationSection",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ChecklistConfigurationSection element.",
                "operationId": "deleteOneChecklistConfigurationSection",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/checklist/config/standard-set/": {
            "get": {
                "summary": "Returns ChecklistConfigurationItem entries.",
                "operationId": "getAllChecklistConfigurationItem",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChecklistConfigurationItem"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ChecklistConfigurationItem entry.",
                "operationId": "postChecklistConfigurationItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistConfigurationItem"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/checklist/config/standard-set/{id}": {
            "get": {
                "summary": "Returns a single ChecklistConfigurationItem entry.",
                "operationId": "getOneChecklistConfigurationItem",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChecklistConfigurationItem"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ChecklistConfigurationItem element.",
                "operationId": "putOneChecklistConfigurationItem",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistConfigurationItem"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ChecklistConfigurationItem element.",
                "operationId": "patchOneChecklistConfigurationItem",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ChecklistConfigurationItem element.",
                "operationId": "deleteOneChecklistConfigurationItem",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/checklist/config/usecase/": {
            "get": {
                "summary": "Returns ChecklistConfigurationUseCase entries.",
                "operationId": "getAllChecklistConfigurationUseCase",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChecklistConfigurationUseCase"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ChecklistConfigurationUseCase entry.",
                "operationId": "postChecklistConfigurationUseCase",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistConfigurationUseCase"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/checklist/config/usecase/{id}": {
            "get": {
                "summary": "Returns a single ChecklistConfigurationUseCase entry.",
                "operationId": "getOneChecklistConfigurationUseCase",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChecklistConfigurationUseCase"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ChecklistConfigurationUseCase element.",
                "operationId": "putOneChecklistConfigurationUseCase",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChecklistConfigurationUseCase"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ChecklistConfigurationUseCase element.",
                "operationId": "patchOneChecklistConfigurationUseCase",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ChecklistConfigurationUseCase element.",
                "operationId": "deleteOneChecklistConfigurationUseCase",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/checklist/configuration/": {
            "get": {
                "summary": "Returns ChecklistConfiguration entries.",
                "operationId": "getAllChecklistConfiguration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ChecklistConfiguration"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/checklist/configuration/{id}": {
            "get": {
                "summary": "Returns a single ChecklistConfiguration entry.",
                "operationId": "getOneChecklistConfiguration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChecklistConfiguration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/consultation/persistence/financing-object/": {
            "get": {
                "summary": "Returns ConsultationPersistenceFinancingObject entries.",
                "operationId": "getAllConsultationPersistenceFinancingObject",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConsultationPersistenceFinancingObject"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ConsultationPersistenceFinancingObject entry.",
                "operationId": "postConsultationPersistenceFinancingObject",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConsultationPersistenceFinancingObject"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/consultation/persistence/financing-object/{id}": {
            "get": {
                "summary": "Returns a single ConsultationPersistenceFinancingObject entry.",
                "operationId": "getOneConsultationPersistenceFinancingObject",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConsultationPersistenceFinancingObject"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ConsultationPersistenceFinancingObject element.",
                "operationId": "putOneConsultationPersistenceFinancingObject",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConsultationPersistenceFinancingObject"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ConsultationPersistenceFinancingObject element.",
                "operationId": "patchOneConsultationPersistenceFinancingObject",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ConsultationPersistenceFinancingObject element.",
                "operationId": "deleteOneConsultationPersistenceFinancingObject",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/app/": {
            "get": {
                "summary": "Returns App entries.",
                "operationId": "getAllApp",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/App"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single App entry.",
                "operationId": "postApp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/App"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/app/{id}": {
            "get": {
                "summary": "Returns a single App entry.",
                "operationId": "getOneApp",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/App"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single App element.",
                "operationId": "putOneApp",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/App"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single App element.",
                "operationId": "patchOneApp",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single App element.",
                "operationId": "deleteOneApp",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/clientsetting/": {
            "get": {
                "summary": "Returns ClientSetting entries.",
                "operationId": "getAllClientSetting",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ClientSetting"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ClientSetting entry.",
                "operationId": "postClientSetting",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientSetting"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/clientsetting/{id}": {
            "get": {
                "summary": "Returns a single ClientSetting entry.",
                "operationId": "getOneClientSetting",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ClientSetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ClientSetting element.",
                "operationId": "putOneClientSetting",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClientSetting"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ClientSetting element.",
                "operationId": "patchOneClientSetting",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ClientSetting element.",
                "operationId": "deleteOneClientSetting",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/config/": {
            "get": {
                "summary": "Returns Config entries.",
                "operationId": "getAllConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Config"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Config entry.",
                "operationId": "postConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Config"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/config/{id}": {
            "get": {
                "summary": "Returns a single Config entry.",
                "operationId": "getOneConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Config"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Config element.",
                "operationId": "putOneConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Config"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Config element.",
                "operationId": "patchOneConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Config element.",
                "operationId": "deleteOneConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/external-link/": {
            "get": {
                "summary": "Returns ExternalLinks entries.",
                "operationId": "getAllExternalLinks",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalLinks"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ExternalLinks entry.",
                "operationId": "postExternalLinks",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalLinks"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/external-link/{id}": {
            "get": {
                "summary": "Returns a single ExternalLinks entry.",
                "operationId": "getOneExternalLinks",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalLinks"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ExternalLinks element.",
                "operationId": "putOneExternalLinks",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExternalLinks"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ExternalLinks element.",
                "operationId": "patchOneExternalLinks",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ExternalLinks element.",
                "operationId": "deleteOneExternalLinks",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/featureflag/": {
            "get": {
                "summary": "Returns FeatureFlag entries.",
                "operationId": "getAllFeatureFlag",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FeatureFlag"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FeatureFlag entry.",
                "operationId": "postFeatureFlag",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureFlag"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/featureflag/{id}": {
            "get": {
                "summary": "Returns a single FeatureFlag entry.",
                "operationId": "getOneFeatureFlag",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FeatureFlag element.",
                "operationId": "putOneFeatureFlag",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeatureFlag"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FeatureFlag element.",
                "operationId": "patchOneFeatureFlag",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FeatureFlag element.",
                "operationId": "deleteOneFeatureFlag",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/job-processing/": {
            "get": {
                "summary": "Returns JobProcessing entries.",
                "operationId": "getAllJobProcessing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/JobProcessing"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single JobProcessing entry.",
                "operationId": "postJobProcessing",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobProcessing"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/job-processing/{id}": {
            "get": {
                "summary": "Returns a single JobProcessing entry.",
                "operationId": "getOneJobProcessing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobProcessing"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single JobProcessing element.",
                "operationId": "putOneJobProcessing",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobProcessing"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single JobProcessing element.",
                "operationId": "patchOneJobProcessing",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single JobProcessing element.",
                "operationId": "deleteOneJobProcessing",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/mapping/": {
            "get": {
                "summary": "Returns Mapping entries.",
                "operationId": "getAllMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Mapping"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Mapping entry.",
                "operationId": "postMapping",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mapping"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/mapping/{id}": {
            "get": {
                "summary": "Returns a single Mapping entry.",
                "operationId": "getOneMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mapping"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Mapping element.",
                "operationId": "putOneMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mapping"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Mapping element.",
                "operationId": "patchOneMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Mapping element.",
                "operationId": "deleteOneMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/module/": {
            "get": {
                "summary": "Returns Module entries.",
                "operationId": "getAllModule",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Module"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Module entry.",
                "operationId": "postModule",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Module"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/module/{id}": {
            "get": {
                "summary": "Returns a single Module entry.",
                "operationId": "getOneModule",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Module"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Module element.",
                "operationId": "putOneModule",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Module"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Module element.",
                "operationId": "patchOneModule",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Module element.",
                "operationId": "deleteOneModule",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/screen/": {
            "get": {
                "summary": "Returns Screen entries.",
                "operationId": "getAllScreen",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Screen"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Screen entry.",
                "operationId": "postScreen",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Screen"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/screen/{id}": {
            "get": {
                "summary": "Returns a single Screen entry.",
                "operationId": "getOneScreen",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Screen"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Screen element.",
                "operationId": "putOneScreen",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Screen"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Screen element.",
                "operationId": "patchOneScreen",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Screen element.",
                "operationId": "deleteOneScreen",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/setting/": {
            "get": {
                "summary": "Returns CoreSetting entries.",
                "operationId": "getAllCoreSetting",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CoreSetting"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CoreSetting entry.",
                "operationId": "postCoreSetting",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CoreSetting"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/setting/{id}": {
            "get": {
                "summary": "Returns a single CoreSetting entry.",
                "operationId": "getOneCoreSetting",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CoreSetting"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CoreSetting element.",
                "operationId": "putOneCoreSetting",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CoreSetting"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CoreSetting element.",
                "operationId": "patchOneCoreSetting",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CoreSetting element.",
                "operationId": "deleteOneCoreSetting",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/textblock/": {
            "get": {
                "summary": "Returns Textblock entries.",
                "operationId": "getAllTextblock",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Textblock"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Textblock entry.",
                "operationId": "postTextblock",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Textblock"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/core/textblock/{id}": {
            "get": {
                "summary": "Returns a single Textblock entry.",
                "operationId": "getOneTextblock",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Textblock"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Textblock element.",
                "operationId": "putOneTextblock",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Textblock"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Textblock element.",
                "operationId": "patchOneTextblock",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Textblock element.",
                "operationId": "deleteOneTextblock",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/core/version": {
            "get": {
                "summary": "Shows version information of this instance",
                "operationId": "coreVersionGet",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GravitonVersionInformation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customer/address/": {
            "get": {
                "summary": "Returns CustomerAddress entries.",
                "operationId": "getAllCustomerAddress",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerAddress"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customer/address/{id}": {
            "get": {
                "summary": "Returns a single CustomerAddress entry.",
                "operationId": "getOneCustomerAddress",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerAddress"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/basicproduct/": {
            "get": {
                "summary": "Returns CustomerBasicProduct entries.",
                "operationId": "getAllCustomerBasicProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerBasicProduct"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerBasicProduct entry.",
                "operationId": "postCustomerBasicProduct",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBasicProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/basicproduct/{id}": {
            "get": {
                "summary": "Returns a single CustomerBasicProduct entry.",
                "operationId": "getOneCustomerBasicProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerBasicProduct"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerBasicProduct element.",
                "operationId": "putOneCustomerBasicProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBasicProduct"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerBasicProduct element.",
                "operationId": "patchOneCustomerBasicProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerBasicProduct element.",
                "operationId": "deleteOneCustomerBasicProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/business-models/": {
            "get": {
                "summary": "Returns CustomerBusinessModels entries.",
                "operationId": "getAllCustomerBusinessModels",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerBusinessModels"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerBusinessModels entry.",
                "operationId": "postCustomerBusinessModels",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBusinessModels"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/business-models/{id}": {
            "get": {
                "summary": "Returns a single CustomerBusinessModels entry.",
                "operationId": "getOneCustomerBusinessModels",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerBusinessModels"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerBusinessModels element.",
                "operationId": "putOneCustomerBusinessModels",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBusinessModels"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerBusinessModels element.",
                "operationId": "patchOneCustomerBusinessModels",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerBusinessModels element.",
                "operationId": "deleteOneCustomerBusinessModels",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/consultation/": {
            "get": {
                "summary": "Returns CustomerConsultation entries.",
                "operationId": "getAllCustomerConsultation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerConsultation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerConsultation entry.",
                "operationId": "postCustomerConsultation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerConsultation"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/consultation/{id}": {
            "get": {
                "summary": "Returns a single CustomerConsultation entry.",
                "operationId": "getOneCustomerConsultation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerConsultation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerConsultation element.",
                "operationId": "putOneCustomerConsultation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerConsultation"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerConsultation element.",
                "operationId": "patchOneCustomerConsultation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerConsultation element.",
                "operationId": "deleteOneCustomerConsultation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/contact/": {
            "get": {
                "summary": "Returns CustomerContact entries.",
                "operationId": "getAllCustomerContact",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerContact"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerContact entry.",
                "operationId": "postCustomerContact",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerContact"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/contact/{id}": {
            "get": {
                "summary": "Returns a single CustomerContact entry.",
                "operationId": "getOneCustomerContact",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerContact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerContact element.",
                "operationId": "putOneCustomerContact",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerContact"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerContact element.",
                "operationId": "patchOneCustomerContact",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerContact element.",
                "operationId": "deleteOneCustomerContact",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/creditdata/": {
            "get": {
                "summary": "Returns CustomerCreditData entries.",
                "operationId": "getAllCustomerCreditData",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerCreditData"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerCreditData entry.",
                "operationId": "postCustomerCreditData",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerCreditData"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/creditdata/{id}": {
            "get": {
                "summary": "Returns a single CustomerCreditData entry.",
                "operationId": "getOneCustomerCreditData",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerCreditData"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerCreditData element.",
                "operationId": "putOneCustomerCreditData",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerCreditData"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerCreditData element.",
                "operationId": "patchOneCustomerCreditData",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerCreditData element.",
                "operationId": "deleteOneCustomerCreditData",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/crmdata/": {
            "get": {
                "summary": "Returns CustomerCrmData entries.",
                "operationId": "getAllCustomerCrmData",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerCrmData"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerCrmData entry.",
                "operationId": "postCustomerCrmData",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerCrmData"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/crmdata/{id}": {
            "get": {
                "summary": "Returns a single CustomerCrmData entry.",
                "operationId": "getOneCustomerCrmData",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerCrmData"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerCrmData element.",
                "operationId": "putOneCustomerCrmData",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerCrmData"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerCrmData element.",
                "operationId": "patchOneCustomerCrmData",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerCrmData element.",
                "operationId": "deleteOneCustomerCrmData",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/customerbook/": {
            "get": {
                "summary": "Returns CustomerBook entries.",
                "operationId": "getAllCustomerBook",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerBook"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerBook entry.",
                "operationId": "postCustomerBook",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBook"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/customerbook/{id}": {
            "get": {
                "summary": "Returns a single CustomerBook entry.",
                "operationId": "getOneCustomerBook",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerBook"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerBook element.",
                "operationId": "putOneCustomerBook",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBook"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerBook element.",
                "operationId": "patchOneCustomerBook",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerBook element.",
                "operationId": "deleteOneCustomerBook",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/detail/": {
            "get": {
                "summary": "Returns CustomerDetail entries.",
                "operationId": "getAllCustomerDetail",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerDetail"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerDetail entry.",
                "operationId": "postCustomerDetail",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerDetail"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/detail/{id}": {
            "get": {
                "summary": "Returns a single CustomerDetail entry.",
                "operationId": "getOneCustomerDetail",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerDetail"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerDetail element.",
                "operationId": "putOneCustomerDetail",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerDetail"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerDetail element.",
                "operationId": "patchOneCustomerDetail",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerDetail element.",
                "operationId": "deleteOneCustomerDetail",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/family/": {
            "get": {
                "summary": "Returns CustomerFamilySummary entries.",
                "operationId": "getAllCustomerFamilySummary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerFamilySummary"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customer/family/{id}": {
            "get": {
                "summary": "Returns a single CustomerFamilySummary entry.",
                "operationId": "getOneCustomerFamilySummary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerFamilySummary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/foreign-exchange/": {
            "get": {
                "summary": "Returns ForeignExchange entries.",
                "operationId": "getAllForeignExchange",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ForeignExchange"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ForeignExchange entry.",
                "operationId": "postForeignExchange",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForeignExchange"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/foreign-exchange/{id}": {
            "get": {
                "summary": "Returns a single ForeignExchange entry.",
                "operationId": "getOneForeignExchange",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForeignExchange"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ForeignExchange element.",
                "operationId": "putOneForeignExchange",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForeignExchange"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ForeignExchange element.",
                "operationId": "patchOneForeignExchange",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ForeignExchange element.",
                "operationId": "deleteOneForeignExchange",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/identification/": {
            "get": {
                "summary": "Returns CustomerIdentification entries.",
                "operationId": "getAllCustomerIdentification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerIdentification"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customer/identification/{id}": {
            "get": {
                "summary": "Returns a single CustomerIdentification entry.",
                "operationId": "getOneCustomerIdentification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerIdentification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/interest/": {
            "get": {
                "summary": "Returns CustomerInterest entries.",
                "operationId": "getAllCustomerInterest",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerInterest"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerInterest entry.",
                "operationId": "postCustomerInterest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerInterest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/interest/{id}": {
            "get": {
                "summary": "Returns a single CustomerInterest entry.",
                "operationId": "getOneCustomerInterest",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerInterest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerInterest element.",
                "operationId": "putOneCustomerInterest",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerInterest"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerInterest element.",
                "operationId": "patchOneCustomerInterest",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerInterest element.",
                "operationId": "deleteOneCustomerInterest",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/kpi/": {
            "get": {
                "summary": "Returns CustomerKpi entries.",
                "operationId": "getAllCustomerKpi",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerKpi"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customer/kpi/{id}": {
            "get": {
                "summary": "Returns a single CustomerKpi entry.",
                "operationId": "getOneCustomerKpi",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerKpi"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/kubiratio/": {
            "get": {
                "summary": "Returns KubiRatio entries.",
                "operationId": "getAllKubiRatio",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/KubiRatio"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customer/kubiratio/{id}": {
            "get": {
                "summary": "Returns a single KubiRatio entry.",
                "operationId": "getOneKubiRatio",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/KubiRatio"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/productsuggestion/": {
            "get": {
                "summary": "Returns CustomerProductSuggestion entries.",
                "operationId": "getAllCustomerProductSuggestion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerProductSuggestion"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerProductSuggestion entry.",
                "operationId": "postCustomerProductSuggestion",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerProductSuggestion"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/customer/productsuggestion/{id}": {
            "get": {
                "summary": "Returns a single CustomerProductSuggestion entry.",
                "operationId": "getOneCustomerProductSuggestion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerProductSuggestion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerProductSuggestion element.",
                "operationId": "putOneCustomerProductSuggestion",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerProductSuggestion"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerProductSuggestion element.",
                "operationId": "patchOneCustomerProductSuggestion",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerProductSuggestion element.",
                "operationId": "deleteOneCustomerProductSuggestion",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/customer/provision/plan/": {
            "get": {
                "summary": "Returns CustomerProvisionPlan entries.",
                "operationId": "getAllCustomerProvisionPlan",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerProvisionPlan"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customer/provision/plan/{id}": {
            "get": {
                "summary": "Returns a single CustomerProvisionPlan entry.",
                "operationId": "getOneCustomerProvisionPlan",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerProvisionPlan"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/deposit/performance/": {
            "get": {
                "summary": "Returns DepositPerformance entries.",
                "operationId": "getAllDepositPerformance",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DepositPerformance"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deposit/performance/{id}": {
            "get": {
                "summary": "Returns a single DepositPerformance entry.",
                "operationId": "getOneDepositPerformance",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepositPerformance"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/email/definitions/": {
            "get": {
                "summary": "Returns EmailDefinitions entries.",
                "operationId": "getAllEmailDefinitions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EmailDefinitions"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single EmailDefinitions entry.",
                "operationId": "postEmailDefinitions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailDefinitions"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/email/definitions/{id}": {
            "get": {
                "summary": "Returns a single EmailDefinitions entry.",
                "operationId": "getOneEmailDefinitions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailDefinitions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single EmailDefinitions element.",
                "operationId": "putOneEmailDefinitions",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailDefinitions"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single EmailDefinitions element.",
                "operationId": "patchOneEmailDefinitions",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single EmailDefinitions element.",
                "operationId": "deleteOneEmailDefinitions",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/email/subscriptions/": {
            "get": {
                "summary": "Returns Subscriptions entries.",
                "operationId": "getAllSubscriptions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Subscriptions"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Subscriptions entry.",
                "operationId": "postSubscriptions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscriptions"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/email/subscriptions/{id}": {
            "get": {
                "summary": "Returns a single Subscriptions entry.",
                "operationId": "getOneSubscriptions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscriptions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Subscriptions element.",
                "operationId": "putOneSubscriptions",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscriptions"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Subscriptions element.",
                "operationId": "patchOneSubscriptions",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Subscriptions element.",
                "operationId": "deleteOneSubscriptions",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/entity/code/": {
            "get": {
                "summary": "Returns Code entries.",
                "operationId": "getAllCode",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Code"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Code entry.",
                "operationId": "postCode",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Code"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/entity/code/{id}": {
            "get": {
                "summary": "Returns a single Code entry.",
                "operationId": "getOneCode",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Code"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Code element.",
                "operationId": "putOneCode",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Code"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Code element.",
                "operationId": "patchOneCode",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Code element.",
                "operationId": "deleteOneCode",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/entity/codemapping/": {
            "get": {
                "summary": "Returns CodeMapping entries.",
                "operationId": "getAllCodeMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CodeMapping"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CodeMapping entry.",
                "operationId": "postCodeMapping",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeMapping"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/entity/codemapping/relation/": {
            "get": {
                "summary": "Returns CodeMappingRelation entries.",
                "operationId": "getAllCodeMappingRelation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CodeMappingRelation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CodeMappingRelation entry.",
                "operationId": "postCodeMappingRelation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeMappingRelation"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/entity/codemapping/relation/{id}": {
            "get": {
                "summary": "Returns a single CodeMappingRelation entry.",
                "operationId": "getOneCodeMappingRelation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CodeMappingRelation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CodeMappingRelation element.",
                "operationId": "putOneCodeMappingRelation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeMappingRelation"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CodeMappingRelation element.",
                "operationId": "patchOneCodeMappingRelation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CodeMappingRelation element.",
                "operationId": "deleteOneCodeMappingRelation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/entity/codemapping/{id}": {
            "get": {
                "summary": "Returns a single CodeMapping entry.",
                "operationId": "getOneCodeMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CodeMapping"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CodeMapping element.",
                "operationId": "putOneCodeMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CodeMapping"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CodeMapping element.",
                "operationId": "patchOneCodeMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CodeMapping element.",
                "operationId": "deleteOneCodeMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/entity/contract-note/": {
            "get": {
                "summary": "Returns ContractNote entries.",
                "operationId": "getAllContractNote",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContractNote"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ContractNote entry.",
                "operationId": "postContractNote",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractNote"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/entity/contract-note/{id}": {
            "get": {
                "summary": "Returns a single ContractNote entry.",
                "operationId": "getOneContractNote",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ContractNote element.",
                "operationId": "putOneContractNote",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractNote"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ContractNote element.",
                "operationId": "patchOneContractNote",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ContractNote element.",
                "operationId": "deleteOneContractNote",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/entity/contract/": {
            "get": {
                "summary": "Returns Contract entries.",
                "operationId": "getAllContract",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Contract"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/entity/contract/ebanking/permission/": {
            "get": {
                "summary": "Returns EBankingPermission entries.",
                "operationId": "getAllEBankingPermission",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EBankingPermission"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/entity/contract/ebanking/permission/{id}": {
            "get": {
                "summary": "Returns a single EBankingPermission entry.",
                "operationId": "getOneEBankingPermission",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EBankingPermission"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/entity/contract/{id}": {
            "get": {
                "summary": "Returns a single Contract entry.",
                "operationId": "getOneContract",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contract"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/event/action/": {
            "get": {
                "summary": "Returns EventStatusAction entries.",
                "operationId": "getAllEventStatusAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EventStatusAction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single EventStatusAction entry.",
                "operationId": "postEventStatusAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventStatusAction"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/event/action/{id}": {
            "get": {
                "summary": "Returns a single EventStatusAction entry.",
                "operationId": "getOneEventStatusAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventStatusAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single EventStatusAction element.",
                "operationId": "putOneEventStatusAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventStatusAction"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single EventStatusAction element.",
                "operationId": "patchOneEventStatusAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single EventStatusAction element.",
                "operationId": "deleteOneEventStatusAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/event/status/": {
            "get": {
                "summary": "Returns EventStatus entries.",
                "operationId": "getAllEventStatus",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EventStatus"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single EventStatus entry.",
                "operationId": "postEventStatus",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/event/status/worker/job-processing/": {
            "get": {
                "summary": "Returns WorkerJobProcessingLog entries.",
                "operationId": "getAllWorkerJobProcessingLog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkerJobProcessingLog"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single WorkerJobProcessingLog entry.",
                "operationId": "postWorkerJobProcessingLog",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkerJobProcessingLog"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/event/status/worker/job-processing/{id}": {
            "get": {
                "summary": "Returns a single WorkerJobProcessingLog entry.",
                "operationId": "getOneWorkerJobProcessingLog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkerJobProcessingLog"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single WorkerJobProcessingLog element.",
                "operationId": "putOneWorkerJobProcessingLog",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkerJobProcessingLog"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single WorkerJobProcessingLog element.",
                "operationId": "patchOneWorkerJobProcessingLog",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single WorkerJobProcessingLog element.",
                "operationId": "deleteOneWorkerJobProcessingLog",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/event/status/{id}": {
            "get": {
                "summary": "Returns a single EventStatus entry.",
                "operationId": "getOneEventStatus",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventStatus"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single EventStatus element.",
                "operationId": "putOneEventStatus",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventStatus"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single EventStatus element.",
                "operationId": "patchOneEventStatus",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single EventStatus element.",
                "operationId": "deleteOneEventStatus",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/event/worker/": {
            "get": {
                "summary": "Returns EventWorker entries.",
                "operationId": "getAllEventWorker",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EventWorker"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single EventWorker entry.",
                "operationId": "postEventWorker",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventWorker"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/event/worker/{id}": {
            "get": {
                "summary": "Returns a single EventWorker entry.",
                "operationId": "getOneEventWorker",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventWorker"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single EventWorker element.",
                "operationId": "putOneEventWorker",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventWorker"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single EventWorker element.",
                "operationId": "patchOneEventWorker",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single EventWorker element.",
                "operationId": "deleteOneEventWorker",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/file/": {
            "get": {
                "summary": "Returns File entries.",
                "operationId": "getAllFile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/File"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Upload a File",
                "operationId": "postFile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonFileMultipartBody"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonFileMultipartBody"
                            }
                        },
                        "*/*": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/file/action/": {
            "get": {
                "summary": "Returns FileAction entries.",
                "operationId": "getAllFileAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FileAction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FileAction entry.",
                "operationId": "postFileAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileAction"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/file/action/{id}": {
            "get": {
                "summary": "Returns a single FileAction entry.",
                "operationId": "getOneFileAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FileAction element.",
                "operationId": "putOneFileAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileAction"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FileAction element.",
                "operationId": "patchOneFileAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FileAction element.",
                "operationId": "deleteOneFileAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/file/{id}": {
            "get": {
                "summary": "Returns a single File entry.",
                "operationId": "getOneFile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Upload a file",
                "operationId": "filePut",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonFileMultipartBody"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonFileMultipartBody"
                            }
                        },
                        "*/*": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single File element.",
                "operationId": "patchOneFile",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single File element.",
                "operationId": "deleteOneFile",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/additionalfields/": {
            "get": {
                "summary": "Returns FinancingAdditionalFields entries.",
                "operationId": "getAllFinancingAdditionalFields",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingAdditionalFields"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/additionalfields/{id}": {
            "get": {
                "summary": "Returns a single FinancingAdditionalFields entry.",
                "operationId": "getOneFinancingAdditionalFields",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingAdditionalFields"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/affordability/": {
            "get": {
                "summary": "Returns FinancingAffordability entries.",
                "operationId": "getAllFinancingAffordability",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingAffordability"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingAffordability entry.",
                "operationId": "postFinancingAffordability",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingAffordability"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/affordability/{id}": {
            "get": {
                "summary": "Returns a single FinancingAffordability entry.",
                "operationId": "getOneFinancingAffordability",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingAffordability"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingAffordability element.",
                "operationId": "putOneFinancingAffordability",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingAffordability"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingAffordability element.",
                "operationId": "patchOneFinancingAffordability",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingAffordability element.",
                "operationId": "deleteOneFinancingAffordability",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/amortization/": {
            "get": {
                "summary": "Returns FinancingAmortization entries.",
                "operationId": "getAllFinancingAmortization",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingAmortization"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/amortization/details/": {
            "get": {
                "summary": "Returns FinancingAmortizationDetails entries.",
                "operationId": "getAllFinancingAmortizationDetails",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingAmortizationDetails"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/amortization/details/{id}": {
            "get": {
                "summary": "Returns a single FinancingAmortizationDetails entry.",
                "operationId": "getOneFinancingAmortizationDetails",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingAmortizationDetails"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/amortization/{id}": {
            "get": {
                "summary": "Returns a single FinancingAmortization entry.",
                "operationId": "getOneFinancingAmortization",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingAmortization"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/blockmodule/": {
            "get": {
                "summary": "Returns FinancingBlockModule entries.",
                "operationId": "getAllFinancingBlockModule",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingBlockModule"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/blockmodule/{id}": {
            "get": {
                "summary": "Returns a single FinancingBlockModule entry.",
                "operationId": "getOneFinancingBlockModule",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingBlockModule"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/cashflowtype/": {
            "get": {
                "summary": "Returns FinancingCashFlowType entries.",
                "operationId": "getAllFinancingCashFlowType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingCashFlowType"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingCashFlowType entry.",
                "operationId": "postFinancingCashFlowType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingCashFlowType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/cashflowtype/{id}": {
            "get": {
                "summary": "Returns a single FinancingCashFlowType entry.",
                "operationId": "getOneFinancingCashFlowType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingCashFlowType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingCashFlowType element.",
                "operationId": "putOneFinancingCashFlowType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingCashFlowType"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingCashFlowType element.",
                "operationId": "patchOneFinancingCashFlowType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingCashFlowType element.",
                "operationId": "deleteOneFinancingCashFlowType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/collateral/": {
            "get": {
                "summary": "Returns FinancingCollateral entries.",
                "operationId": "getAllFinancingCollateral",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingCollateral"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/collateral/{id}": {
            "get": {
                "summary": "Returns a single FinancingCollateral entry.",
                "operationId": "getOneFinancingCollateral",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingCollateral"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/collateraltype/": {
            "get": {
                "summary": "Returns FinancingCollateralType entries.",
                "operationId": "getAllFinancingCollateralType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingCollateralType"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingCollateralType entry.",
                "operationId": "postFinancingCollateralType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingCollateralType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/collateraltype/{id}": {
            "get": {
                "summary": "Returns a single FinancingCollateralType entry.",
                "operationId": "getOneFinancingCollateralType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingCollateralType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingCollateralType element.",
                "operationId": "putOneFinancingCollateralType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingCollateralType"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingCollateralType element.",
                "operationId": "patchOneFinancingCollateralType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingCollateralType element.",
                "operationId": "deleteOneFinancingCollateralType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/credit/": {
            "get": {
                "summary": "Returns FinancingCredit entries.",
                "operationId": "getAllFinancingCredit",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingCredit"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/credit/{id}": {
            "get": {
                "summary": "Returns a single FinancingCredit entry.",
                "operationId": "getOneFinancingCredit",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingCredit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/duration/": {
            "get": {
                "summary": "Returns FinancingDuration entries.",
                "operationId": "getAllFinancingDuration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingDuration"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingDuration entry.",
                "operationId": "postFinancingDuration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingDuration"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/duration/{id}": {
            "get": {
                "summary": "Returns a single FinancingDuration entry.",
                "operationId": "getOneFinancingDuration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingDuration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingDuration element.",
                "operationId": "putOneFinancingDuration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingDuration"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingDuration element.",
                "operationId": "patchOneFinancingDuration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingDuration element.",
                "operationId": "deleteOneFinancingDuration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/equitytype/": {
            "get": {
                "summary": "Returns FinancingEquityType entries.",
                "operationId": "getAllFinancingEquityType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingEquityType"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingEquityType entry.",
                "operationId": "postFinancingEquityType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingEquityType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/equitytype/{id}": {
            "get": {
                "summary": "Returns a single FinancingEquityType entry.",
                "operationId": "getOneFinancingEquityType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingEquityType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingEquityType element.",
                "operationId": "putOneFinancingEquityType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingEquityType"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingEquityType element.",
                "operationId": "patchOneFinancingEquityType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingEquityType element.",
                "operationId": "deleteOneFinancingEquityType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/etp/": {
            "get": {
                "summary": "Returns FinancingETP entries.",
                "operationId": "getAllFinancingETP",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingETP"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingETP entry.",
                "operationId": "postFinancingETP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingETP"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/etp/{id}": {
            "get": {
                "summary": "Returns a single FinancingETP entry.",
                "operationId": "getOneFinancingETP",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingETP"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingETP element.",
                "operationId": "putOneFinancingETP",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingETP"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingETP element.",
                "operationId": "patchOneFinancingETP",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingETP element.",
                "operationId": "deleteOneFinancingETP",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/forward/": {
            "get": {
                "summary": "Returns FinancingForward entries.",
                "operationId": "getAllFinancingForward",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingForward"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingForward entry.",
                "operationId": "postFinancingForward",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingForward"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/forward/{id}": {
            "get": {
                "summary": "Returns a single FinancingForward entry.",
                "operationId": "getOneFinancingForward",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingForward"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingForward element.",
                "operationId": "putOneFinancingForward",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingForward"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingForward element.",
                "operationId": "patchOneFinancingForward",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingForward element.",
                "operationId": "deleteOneFinancingForward",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/holiday/": {
            "get": {
                "summary": "Returns FinancingHoliday entries.",
                "operationId": "getAllFinancingHoliday",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingHoliday"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingHoliday entry.",
                "operationId": "postFinancingHoliday",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingHoliday"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/holiday/{id}": {
            "get": {
                "summary": "Returns a single FinancingHoliday entry.",
                "operationId": "getOneFinancingHoliday",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingHoliday"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingHoliday element.",
                "operationId": "putOneFinancingHoliday",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingHoliday"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingHoliday element.",
                "operationId": "patchOneFinancingHoliday",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingHoliday element.",
                "operationId": "deleteOneFinancingHoliday",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/libor/": {
            "get": {
                "summary": "Returns FinancingLibor entries.",
                "operationId": "getAllFinancingLibor",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingLibor"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingLibor entry.",
                "operationId": "postFinancingLibor",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingLibor"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/libor/{id}": {
            "get": {
                "summary": "Returns a single FinancingLibor entry.",
                "operationId": "getOneFinancingLibor",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingLibor"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingLibor element.",
                "operationId": "putOneFinancingLibor",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingLibor"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingLibor element.",
                "operationId": "patchOneFinancingLibor",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingLibor element.",
                "operationId": "deleteOneFinancingLibor",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/loanproduct/": {
            "get": {
                "summary": "Returns FinancingLoanProduct entries.",
                "operationId": "getAllFinancingLoanProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingLoanProduct"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingLoanProduct entry.",
                "operationId": "postFinancingLoanProduct",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingLoanProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/loanproduct/{id}": {
            "get": {
                "summary": "Returns a single FinancingLoanProduct entry.",
                "operationId": "getOneFinancingLoanProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingLoanProduct"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingLoanProduct element.",
                "operationId": "putOneFinancingLoanProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingLoanProduct"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingLoanProduct element.",
                "operationId": "patchOneFinancingLoanProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingLoanProduct element.",
                "operationId": "deleteOneFinancingLoanProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/loanproductgroup/": {
            "get": {
                "summary": "Returns FinancingLoanProductGroup entries.",
                "operationId": "getAllFinancingLoanProductGroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingLoanProductGroup"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingLoanProductGroup entry.",
                "operationId": "postFinancingLoanProductGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingLoanProductGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/loanproductgroup/{id}": {
            "get": {
                "summary": "Returns a single FinancingLoanProductGroup entry.",
                "operationId": "getOneFinancingLoanProductGroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingLoanProductGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingLoanProductGroup element.",
                "operationId": "putOneFinancingLoanProductGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingLoanProductGroup"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingLoanProductGroup element.",
                "operationId": "patchOneFinancingLoanProductGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingLoanProductGroup element.",
                "operationId": "deleteOneFinancingLoanProductGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/object/": {
            "get": {
                "summary": "Returns FinancingObject entries.",
                "operationId": "getAllFinancingObject",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingObject"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/object/{id}": {
            "get": {
                "summary": "Returns a single FinancingObject entry.",
                "operationId": "getOneFinancingObject",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingObject"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/profiling/": {
            "get": {
                "summary": "Returns FinancingProfiling entries.",
                "operationId": "getAllFinancingProfiling",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingProfiling"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingProfiling entry.",
                "operationId": "postFinancingProfiling",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingProfiling"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/profiling/{id}": {
            "get": {
                "summary": "Returns a single FinancingProfiling entry.",
                "operationId": "getOneFinancingProfiling",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingProfiling"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingProfiling element.",
                "operationId": "putOneFinancingProfiling",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingProfiling"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingProfiling element.",
                "operationId": "patchOneFinancingProfiling",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingProfiling element.",
                "operationId": "deleteOneFinancingProfiling",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/rate/": {
            "get": {
                "summary": "Returns FinancingRates entries.",
                "operationId": "getAllFinancingRates",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingRates"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingRates entry.",
                "operationId": "postFinancingRates",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingRates"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/rate/{id}": {
            "get": {
                "summary": "Returns a single FinancingRates entry.",
                "operationId": "getOneFinancingRates",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingRates"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingRates element.",
                "operationId": "putOneFinancingRates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingRates"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingRates element.",
                "operationId": "patchOneFinancingRates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingRates element.",
                "operationId": "deleteOneFinancingRates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/realestatetype/": {
            "get": {
                "summary": "Returns FinancingRealEstateType entries.",
                "operationId": "getAllFinancingRealEstateType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingRealEstateType"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingRealEstateType entry.",
                "operationId": "postFinancingRealEstateType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingRealEstateType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/realestatetype/{id}": {
            "get": {
                "summary": "Returns a single FinancingRealEstateType entry.",
                "operationId": "getOneFinancingRealEstateType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingRealEstateType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingRealEstateType element.",
                "operationId": "putOneFinancingRealEstateType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingRealEstateType"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingRealEstateType element.",
                "operationId": "patchOneFinancingRealEstateType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingRealEstateType element.",
                "operationId": "deleteOneFinancingRealEstateType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/refi-interest-rate/": {
            "get": {
                "summary": "Returns RefundingInterestRates entries.",
                "operationId": "getAllRefundingInterestRates",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RefundingInterestRates"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single RefundingInterestRates entry.",
                "operationId": "postRefundingInterestRates",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefundingInterestRates"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/refi-interest-rate/{id}": {
            "get": {
                "summary": "Returns a single RefundingInterestRates entry.",
                "operationId": "getOneRefundingInterestRates",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RefundingInterestRates"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single RefundingInterestRates element.",
                "operationId": "putOneRefundingInterestRates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RefundingInterestRates"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single RefundingInterestRates element.",
                "operationId": "patchOneRefundingInterestRates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single RefundingInterestRates element.",
                "operationId": "deleteOneRefundingInterestRates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/surcharge-lendingrate/": {
            "get": {
                "summary": "Returns FinancingSurchargeLendingRate entries.",
                "operationId": "getAllFinancingSurchargeLendingRate",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingSurchargeLendingRate"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingSurchargeLendingRate entry.",
                "operationId": "postFinancingSurchargeLendingRate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingSurchargeLendingRate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/surcharge-lendingrate/{id}": {
            "get": {
                "summary": "Returns a single FinancingSurchargeLendingRate entry.",
                "operationId": "getOneFinancingSurchargeLendingRate",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingSurchargeLendingRate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingSurchargeLendingRate element.",
                "operationId": "putOneFinancingSurchargeLendingRate",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingSurchargeLendingRate"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingSurchargeLendingRate element.",
                "operationId": "patchOneFinancingSurchargeLendingRate",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingSurchargeLendingRate element.",
                "operationId": "deleteOneFinancingSurchargeLendingRate",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/surcharge-realestatetype/": {
            "get": {
                "summary": "Returns FinancingSurchargeRealestatetype entries.",
                "operationId": "getAllFinancingSurchargeRealestatetype",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingSurchargeRealestatetype"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingSurchargeRealestatetype entry.",
                "operationId": "postFinancingSurchargeRealestatetype",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingSurchargeRealestatetype"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/surcharge-realestatetype/{id}": {
            "get": {
                "summary": "Returns a single FinancingSurchargeRealestatetype entry.",
                "operationId": "getOneFinancingSurchargeRealestatetype",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingSurchargeRealestatetype"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingSurchargeRealestatetype element.",
                "operationId": "putOneFinancingSurchargeRealestatetype",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingSurchargeRealestatetype"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingSurchargeRealestatetype element.",
                "operationId": "patchOneFinancingSurchargeRealestatetype",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingSurchargeRealestatetype element.",
                "operationId": "deleteOneFinancingSurchargeRealestatetype",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/surcharge-usetype/": {
            "get": {
                "summary": "Returns FinancingSurchargeUseType entries.",
                "operationId": "getAllFinancingSurchargeUseType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingSurchargeUseType"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingSurchargeUseType entry.",
                "operationId": "postFinancingSurchargeUseType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingSurchargeUseType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/financing/surcharge-usetype/{id}": {
            "get": {
                "summary": "Returns a single FinancingSurchargeUseType entry.",
                "operationId": "getOneFinancingSurchargeUseType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingSurchargeUseType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingSurchargeUseType element.",
                "operationId": "putOneFinancingSurchargeUseType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingSurchargeUseType"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingSurchargeUseType element.",
                "operationId": "patchOneFinancingSurchargeUseType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingSurchargeUseType element.",
                "operationId": "deleteOneFinancingSurchargeUseType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/financing/tranche/": {
            "get": {
                "summary": "Returns FinancingTranche entries.",
                "operationId": "getAllFinancingTranche",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingTranche"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/financing/tranche/{id}": {
            "get": {
                "summary": "Returns a single FinancingTranche entry.",
                "operationId": "getOneFinancingTranche",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingTranche"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/achievement/": {
            "get": {
                "summary": "Returns GamificationAchievement entries.",
                "operationId": "getAllGamificationAchievement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationAchievement"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single GamificationAchievement entry.",
                "operationId": "postGamificationAchievement",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationAchievement"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/gamification/achievement/config/": {
            "get": {
                "summary": "Returns GamificationAchievementConfig entries.",
                "operationId": "getAllGamificationAchievementConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationAchievementConfig"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single GamificationAchievementConfig entry.",
                "operationId": "postGamificationAchievementConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationAchievementConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/gamification/achievement/config/{id}": {
            "get": {
                "summary": "Returns a single GamificationAchievementConfig entry.",
                "operationId": "getOneGamificationAchievementConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationAchievementConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single GamificationAchievementConfig element.",
                "operationId": "putOneGamificationAchievementConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationAchievementConfig"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single GamificationAchievementConfig element.",
                "operationId": "patchOneGamificationAchievementConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single GamificationAchievementConfig element.",
                "operationId": "deleteOneGamificationAchievementConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/achievement/{id}": {
            "get": {
                "summary": "Returns a single GamificationAchievement entry.",
                "operationId": "getOneGamificationAchievement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationAchievement"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single GamificationAchievement element.",
                "operationId": "putOneGamificationAchievement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationAchievement"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single GamificationAchievement element.",
                "operationId": "patchOneGamificationAchievement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single GamificationAchievement element.",
                "operationId": "deleteOneGamificationAchievement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/action/": {
            "get": {
                "summary": "Returns GamificationAction entries.",
                "operationId": "getAllGamificationAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationAction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single GamificationAction entry.",
                "operationId": "postGamificationAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationAction"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/gamification/action/config/": {
            "get": {
                "summary": "Returns GamificationActionConfig entries.",
                "operationId": "getAllGamificationActionConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationActionConfig"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single GamificationActionConfig entry.",
                "operationId": "postGamificationActionConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationActionConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/gamification/action/config/{id}": {
            "get": {
                "summary": "Returns a single GamificationActionConfig entry.",
                "operationId": "getOneGamificationActionConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationActionConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single GamificationActionConfig element.",
                "operationId": "putOneGamificationActionConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationActionConfig"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single GamificationActionConfig element.",
                "operationId": "patchOneGamificationActionConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single GamificationActionConfig element.",
                "operationId": "deleteOneGamificationActionConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/action/{id}": {
            "get": {
                "summary": "Returns a single GamificationAction entry.",
                "operationId": "getOneGamificationAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single GamificationAction element.",
                "operationId": "putOneGamificationAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationAction"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single GamificationAction element.",
                "operationId": "patchOneGamificationAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single GamificationAction element.",
                "operationId": "deleteOneGamificationAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/level/": {
            "get": {
                "summary": "Returns GamificationLevel entries.",
                "operationId": "getAllGamificationLevel",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationLevel"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single GamificationLevel entry.",
                "operationId": "postGamificationLevel",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationLevel"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/gamification/level/config/": {
            "get": {
                "summary": "Returns GamificationLevelConfig entries.",
                "operationId": "getAllGamificationLevelConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationLevelConfig"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single GamificationLevelConfig entry.",
                "operationId": "postGamificationLevelConfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationLevelConfig"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/gamification/level/config/{id}": {
            "get": {
                "summary": "Returns a single GamificationLevelConfig entry.",
                "operationId": "getOneGamificationLevelConfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationLevelConfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single GamificationLevelConfig element.",
                "operationId": "putOneGamificationLevelConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationLevelConfig"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single GamificationLevelConfig element.",
                "operationId": "patchOneGamificationLevelConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single GamificationLevelConfig element.",
                "operationId": "deleteOneGamificationLevelConfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/level/{id}": {
            "get": {
                "summary": "Returns a single GamificationLevel entry.",
                "operationId": "getOneGamificationLevel",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationLevel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single GamificationLevel element.",
                "operationId": "putOneGamificationLevel",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GamificationLevel"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single GamificationLevel element.",
                "operationId": "patchOneGamificationLevel",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single GamificationLevel element.",
                "operationId": "deleteOneGamificationLevel",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/ranking/branch/": {
            "get": {
                "summary": "Returns GamificationRankingBranch entries.",
                "operationId": "getAllGamificationRankingBranch",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationRankingBranch"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gamification/ranking/branch/{id}": {
            "get": {
                "summary": "Returns a single GamificationRankingBranch entry.",
                "operationId": "getOneGamificationRankingBranch",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationRankingBranch"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/ranking/region/": {
            "get": {
                "summary": "Returns GamificationRankingRegion entries.",
                "operationId": "getAllGamificationRankingRegion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationRankingRegion"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gamification/ranking/region/{id}": {
            "get": {
                "summary": "Returns a single GamificationRankingRegion entry.",
                "operationId": "getOneGamificationRankingRegion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationRankingRegion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/ranking/user/": {
            "get": {
                "summary": "Returns GamificationRankingUser entries.",
                "operationId": "getAllGamificationRankingUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationRankingUser"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gamification/ranking/user/{id}": {
            "get": {
                "summary": "Returns a single GamificationRankingUser entry.",
                "operationId": "getOneGamificationRankingUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationRankingUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/gamification/score-summary/": {
            "get": {
                "summary": "Returns GamificationScoreSummary entries.",
                "operationId": "getAllGamificationScoreSummary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamificationScoreSummary"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gamification/score-summary/{id}": {
            "get": {
                "summary": "Returns a single GamificationScoreSummary entry.",
                "operationId": "getOneGamificationScoreSummary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamificationScoreSummary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/assetallocation/": {
            "get": {
                "summary": "Returns InvestmentAssetAllocation entries.",
                "operationId": "getAllInvestmentAssetAllocation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentAssetAllocation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentAssetAllocation entry.",
                "operationId": "postInvestmentAssetAllocation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentAssetAllocation"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/assetallocation/{id}": {
            "get": {
                "summary": "Returns a single InvestmentAssetAllocation entry.",
                "operationId": "getOneInvestmentAssetAllocation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentAssetAllocation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentAssetAllocation element.",
                "operationId": "putOneInvestmentAssetAllocation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentAssetAllocation"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentAssetAllocation element.",
                "operationId": "patchOneInvestmentAssetAllocation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentAssetAllocation element.",
                "operationId": "deleteOneInvestmentAssetAllocation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/assetclass/": {
            "get": {
                "summary": "Returns InvestmentAssetClass entries.",
                "operationId": "getAllInvestmentAssetClass",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentAssetClass"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentAssetClass entry.",
                "operationId": "postInvestmentAssetClass",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentAssetClass"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/assetclass/{id}": {
            "get": {
                "summary": "Returns a single InvestmentAssetClass entry.",
                "operationId": "getOneInvestmentAssetClass",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentAssetClass"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentAssetClass element.",
                "operationId": "putOneInvestmentAssetClass",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentAssetClass"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentAssetClass element.",
                "operationId": "patchOneInvestmentAssetClass",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentAssetClass element.",
                "operationId": "deleteOneInvestmentAssetClass",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/customerquestionnaireallocation/": {
            "get": {
                "summary": "Returns InvestmentCustomerQuestionnaireAllocation entries.",
                "operationId": "getAllInvestmentCustomerQuestionnaireAllocation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentCustomerQuestionnaireAllocation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentCustomerQuestionnaireAllocation entry.",
                "operationId": "postInvestmentCustomerQuestionnaireAllocation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentCustomerQuestionnaireAllocation"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/customerquestionnaireallocation/{id}": {
            "get": {
                "summary": "Returns a single InvestmentCustomerQuestionnaireAllocation entry.",
                "operationId": "getOneInvestmentCustomerQuestionnaireAllocation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentCustomerQuestionnaireAllocation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentCustomerQuestionnaireAllocation element.",
                "operationId": "putOneInvestmentCustomerQuestionnaireAllocation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentCustomerQuestionnaireAllocation"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentCustomerQuestionnaireAllocation element.",
                "operationId": "patchOneInvestmentCustomerQuestionnaireAllocation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentCustomerQuestionnaireAllocation element.",
                "operationId": "deleteOneInvestmentCustomerQuestionnaireAllocation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/customerriskprofile/": {
            "get": {
                "summary": "Returns InvestmentCustomerRiskProfile entries.",
                "operationId": "getAllInvestmentCustomerRiskProfile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentCustomerRiskProfile"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/investment/customerriskprofile/{id}": {
            "get": {
                "summary": "Returns a single InvestmentCustomerRiskProfile entry.",
                "operationId": "getOneInvestmentCustomerRiskProfile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentCustomerRiskProfile"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/document/": {
            "get": {
                "summary": "Returns InvestmentDocument entries.",
                "operationId": "getAllInvestmentDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentDocument"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentDocument entry.",
                "operationId": "postInvestmentDocument",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentDocument"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/document/{id}": {
            "get": {
                "summary": "Returns a single InvestmentDocument entry.",
                "operationId": "getOneInvestmentDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentDocument"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentDocument element.",
                "operationId": "putOneInvestmentDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentDocument"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentDocument element.",
                "operationId": "patchOneInvestmentDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentDocument element.",
                "operationId": "deleteOneInvestmentDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/duration/": {
            "get": {
                "summary": "Returns InvestmentDuration entries.",
                "operationId": "getAllInvestmentDuration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentDuration"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentDuration entry.",
                "operationId": "postInvestmentDuration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentDuration"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/duration/{id}": {
            "get": {
                "summary": "Returns a single InvestmentDuration entry.",
                "operationId": "getOneInvestmentDuration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentDuration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentDuration element.",
                "operationId": "putOneInvestmentDuration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentDuration"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentDuration element.",
                "operationId": "patchOneInvestmentDuration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentDuration element.",
                "operationId": "deleteOneInvestmentDuration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/financing/": {
            "get": {
                "summary": "Returns InvestmentFinancing entries.",
                "operationId": "getAllInvestmentFinancing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentFinancing"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/investment/financing/{id}": {
            "get": {
                "summary": "Returns a single InvestmentFinancing entry.",
                "operationId": "getOneInvestmentFinancing",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentFinancing"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/fondsbreakdown/": {
            "get": {
                "summary": "Returns InvestmentFondsBreakdown entries.",
                "operationId": "getAllInvestmentFondsBreakdown",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentFondsBreakdown"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/investment/fondsbreakdown/{id}": {
            "get": {
                "summary": "Returns a single InvestmentFondsBreakdown entry.",
                "operationId": "getOneInvestmentFondsBreakdown",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentFondsBreakdown"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/fxrates/": {
            "get": {
                "summary": "Returns InvestmentFxrates entries.",
                "operationId": "getAllInvestmentFxrates",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentFxrates"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentFxrates entry.",
                "operationId": "postInvestmentFxrates",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentFxrates"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/fxrates/{id}": {
            "get": {
                "summary": "Returns a single InvestmentFxrates entry.",
                "operationId": "getOneInvestmentFxrates",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentFxrates"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentFxrates element.",
                "operationId": "putOneInvestmentFxrates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentFxrates"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentFxrates element.",
                "operationId": "patchOneInvestmentFxrates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentFxrates element.",
                "operationId": "deleteOneInvestmentFxrates",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/grouprow-assetclass-mapping/": {
            "get": {
                "summary": "Returns InvestmentGrouprowAssetClassMapping entries.",
                "operationId": "getAllInvestmentGrouprowAssetClassMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentGrouprowAssetClassMapping"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentGrouprowAssetClassMapping entry.",
                "operationId": "postInvestmentGrouprowAssetClassMapping",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentGrouprowAssetClassMapping"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/grouprow-assetclass-mapping/{id}": {
            "get": {
                "summary": "Returns a single InvestmentGrouprowAssetClassMapping entry.",
                "operationId": "getOneInvestmentGrouprowAssetClassMapping",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentGrouprowAssetClassMapping"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentGrouprowAssetClassMapping element.",
                "operationId": "putOneInvestmentGrouprowAssetClassMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentGrouprowAssetClassMapping"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentGrouprowAssetClassMapping element.",
                "operationId": "patchOneInvestmentGrouprowAssetClassMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentGrouprowAssetClassMapping element.",
                "operationId": "deleteOneInvestmentGrouprowAssetClassMapping",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/modelportfolio/": {
            "get": {
                "summary": "Returns InvestmentModelportfolio entries.",
                "operationId": "getAllInvestmentModelportfolio",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentModelportfolio"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentModelportfolio entry.",
                "operationId": "postInvestmentModelportfolio",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentModelportfolio"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/modelportfolio/{id}": {
            "get": {
                "summary": "Returns a single InvestmentModelportfolio entry.",
                "operationId": "getOneInvestmentModelportfolio",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentModelportfolio"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentModelportfolio element.",
                "operationId": "putOneInvestmentModelportfolio",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentModelportfolio"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentModelportfolio element.",
                "operationId": "patchOneInvestmentModelportfolio",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentModelportfolio element.",
                "operationId": "deleteOneInvestmentModelportfolio",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/product/": {
            "get": {
                "summary": "Returns InvestmentProduct entries.",
                "operationId": "getAllInvestmentProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentProduct"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentProduct entry.",
                "operationId": "postInvestmentProduct",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/product/{id}": {
            "get": {
                "summary": "Returns a single InvestmentProduct entry.",
                "operationId": "getOneInvestmentProduct",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentProduct"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentProduct element.",
                "operationId": "putOneInvestmentProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentProduct"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentProduct element.",
                "operationId": "patchOneInvestmentProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentProduct element.",
                "operationId": "deleteOneInvestmentProduct",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/profile/": {
            "get": {
                "summary": "Returns InvestmentProfile entries.",
                "operationId": "getAllInvestmentProfile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentProfile"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentProfile entry.",
                "operationId": "postInvestmentProfile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentProfile"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/profile/{id}": {
            "get": {
                "summary": "Returns a single InvestmentProfile entry.",
                "operationId": "getOneInvestmentProfile",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentProfile"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentProfile element.",
                "operationId": "putOneInvestmentProfile",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentProfile"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentProfile element.",
                "operationId": "patchOneInvestmentProfile",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentProfile element.",
                "operationId": "deleteOneInvestmentProfile",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/questionnaire/": {
            "get": {
                "summary": "Returns InvestmentQuestionnaire entries.",
                "operationId": "getAllInvestmentQuestionnaire",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentQuestionnaire"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentQuestionnaire entry.",
                "operationId": "postInvestmentQuestionnaire",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentQuestionnaire"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/questionnaire/{id}": {
            "get": {
                "summary": "Returns a single InvestmentQuestionnaire entry.",
                "operationId": "getOneInvestmentQuestionnaire",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentQuestionnaire"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentQuestionnaire element.",
                "operationId": "putOneInvestmentQuestionnaire",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentQuestionnaire"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentQuestionnaire element.",
                "operationId": "patchOneInvestmentQuestionnaire",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentQuestionnaire element.",
                "operationId": "deleteOneInvestmentQuestionnaire",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/range/": {
            "get": {
                "summary": "Returns InvestmentRange entries.",
                "operationId": "getAllInvestmentRange",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentRange"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentRange entry.",
                "operationId": "postInvestmentRange",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentRange"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/range/{id}": {
            "get": {
                "summary": "Returns a single InvestmentRange entry.",
                "operationId": "getOneInvestmentRange",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentRange"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentRange element.",
                "operationId": "putOneInvestmentRange",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentRange"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentRange element.",
                "operationId": "patchOneInvestmentRange",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentRange element.",
                "operationId": "deleteOneInvestmentRange",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/recommendation/": {
            "get": {
                "summary": "Returns InvestmentRecommendation entries.",
                "operationId": "getAllInvestmentRecommendation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentRecommendation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentRecommendation entry.",
                "operationId": "postInvestmentRecommendation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentRecommendation"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/recommendation/{id}": {
            "get": {
                "summary": "Returns a single InvestmentRecommendation entry.",
                "operationId": "getOneInvestmentRecommendation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentRecommendation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentRecommendation element.",
                "operationId": "putOneInvestmentRecommendation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentRecommendation"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentRecommendation element.",
                "operationId": "patchOneInvestmentRecommendation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentRecommendation element.",
                "operationId": "deleteOneInvestmentRecommendation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/serviceclassrestriction/": {
            "get": {
                "summary": "Returns InvestmentServiceClassRestriction entries.",
                "operationId": "getAllInvestmentServiceClassRestriction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentServiceClassRestriction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentServiceClassRestriction entry.",
                "operationId": "postInvestmentServiceClassRestriction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentServiceClassRestriction"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/serviceclassrestriction/{id}": {
            "get": {
                "summary": "Returns a single InvestmentServiceClassRestriction entry.",
                "operationId": "getOneInvestmentServiceClassRestriction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentServiceClassRestriction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentServiceClassRestriction element.",
                "operationId": "putOneInvestmentServiceClassRestriction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentServiceClassRestriction"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentServiceClassRestriction element.",
                "operationId": "patchOneInvestmentServiceClassRestriction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentServiceClassRestriction element.",
                "operationId": "deleteOneInvestmentServiceClassRestriction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/servicesubtype/": {
            "get": {
                "summary": "Returns InvestmentServiceSubType entries.",
                "operationId": "getAllInvestmentServiceSubType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentServiceSubType"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentServiceSubType entry.",
                "operationId": "postInvestmentServiceSubType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentServiceSubType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/servicesubtype/{id}": {
            "get": {
                "summary": "Returns a single InvestmentServiceSubType entry.",
                "operationId": "getOneInvestmentServiceSubType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentServiceSubType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentServiceSubType element.",
                "operationId": "putOneInvestmentServiceSubType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentServiceSubType"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentServiceSubType element.",
                "operationId": "patchOneInvestmentServiceSubType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentServiceSubType element.",
                "operationId": "deleteOneInvestmentServiceSubType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/servicetype/": {
            "get": {
                "summary": "Returns InvestmentServiceType entries.",
                "operationId": "getAllInvestmentServiceType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentServiceType"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentServiceType entry.",
                "operationId": "postInvestmentServiceType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentServiceType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/servicetype/{id}": {
            "get": {
                "summary": "Returns a single InvestmentServiceType entry.",
                "operationId": "getOneInvestmentServiceType",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentServiceType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentServiceType element.",
                "operationId": "putOneInvestmentServiceType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentServiceType"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentServiceType element.",
                "operationId": "patchOneInvestmentServiceType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentServiceType element.",
                "operationId": "deleteOneInvestmentServiceType",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/strategy/": {
            "get": {
                "summary": "Returns InvestmentStrategy entries.",
                "operationId": "getAllInvestmentStrategy",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentStrategy"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentStrategy entry.",
                "operationId": "postInvestmentStrategy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentStrategy"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/strategy/{id}": {
            "get": {
                "summary": "Returns a single InvestmentStrategy entry.",
                "operationId": "getOneInvestmentStrategy",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentStrategy"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentStrategy element.",
                "operationId": "putOneInvestmentStrategy",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentStrategy"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentStrategy element.",
                "operationId": "patchOneInvestmentStrategy",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentStrategy element.",
                "operationId": "deleteOneInvestmentStrategy",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/strategyassignment/": {
            "get": {
                "summary": "Returns InvestmentStrategyAssignment entries.",
                "operationId": "getAllInvestmentStrategyAssignment",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentStrategyAssignment"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentStrategyAssignment entry.",
                "operationId": "postInvestmentStrategyAssignment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentStrategyAssignment"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/strategyassignment/{id}": {
            "get": {
                "summary": "Returns a single InvestmentStrategyAssignment entry.",
                "operationId": "getOneInvestmentStrategyAssignment",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentStrategyAssignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentStrategyAssignment element.",
                "operationId": "putOneInvestmentStrategyAssignment",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentStrategyAssignment"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentStrategyAssignment element.",
                "operationId": "patchOneInvestmentStrategyAssignment",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentStrategyAssignment element.",
                "operationId": "deleteOneInvestmentStrategyAssignment",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/strategyreturn/": {
            "get": {
                "summary": "Returns StrategyReturn entries.",
                "operationId": "getAllStrategyReturn",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StrategyReturn"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single StrategyReturn entry.",
                "operationId": "postStrategyReturn",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StrategyReturn"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/strategyreturn/{id}": {
            "get": {
                "summary": "Returns a single StrategyReturn entry.",
                "operationId": "getOneStrategyReturn",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StrategyReturn"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single StrategyReturn element.",
                "operationId": "putOneStrategyReturn",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StrategyReturn"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single StrategyReturn element.",
                "operationId": "patchOneStrategyReturn",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single StrategyReturn element.",
                "operationId": "deleteOneStrategyReturn",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/target/": {
            "get": {
                "summary": "Returns InvestmentTarget entries.",
                "operationId": "getAllInvestmentTarget",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentTarget"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single InvestmentTarget entry.",
                "operationId": "postInvestmentTarget",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentTarget"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/investment/target/{id}": {
            "get": {
                "summary": "Returns a single InvestmentTarget entry.",
                "operationId": "getOneInvestmentTarget",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentTarget"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single InvestmentTarget element.",
                "operationId": "putOneInvestmentTarget",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvestmentTarget"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single InvestmentTarget element.",
                "operationId": "patchOneInvestmentTarget",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single InvestmentTarget element.",
                "operationId": "deleteOneInvestmentTarget",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/investment/valor/": {
            "get": {
                "summary": "Returns InvestmentValor entries.",
                "operationId": "getAllInvestmentValor",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentValor"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/investment/valor/{id}": {
            "get": {
                "summary": "Returns a single InvestmentValor entry.",
                "operationId": "getOneInvestmentValor",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentValor"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/loader/action/": {
            "get": {
                "summary": "Returns Ml3kLoadAction entries.",
                "operationId": "getAllMl3kLoadAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Ml3kLoadAction"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/loader/action/{id}": {
            "get": {
                "summary": "Returns a single Ml3kLoadAction entry.",
                "operationId": "getOneMl3kLoadAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ml3kLoadAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/loader/load/": {
            "get": {
                "summary": "Returns Ml3kLoad entries.",
                "operationId": "getAllMl3kLoad",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Ml3kLoad"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/loader/load/{id}": {
            "get": {
                "summary": "Returns a single Ml3kLoad entry.",
                "operationId": "getOneMl3kLoad",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ml3kLoad"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/loader/ref-error/": {
            "get": {
                "summary": "Returns Ml3kLog entries.",
                "operationId": "getAllMl3kLog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Ml3kLog"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/loader/ref-error/{id}": {
            "get": {
                "summary": "Returns a single Ml3kLog entry.",
                "operationId": "getOneMl3kLog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ml3kLog"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/loader/trigger/": {
            "get": {
                "summary": "Returns Ml3kLoadTrigger entries.",
                "operationId": "getAllMl3kLoadTrigger",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Ml3kLoadTrigger"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Ml3kLoadTrigger entry.",
                "operationId": "postMl3kLoadTrigger",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Ml3kLoadTrigger"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/loader/trigger/{id}": {
            "get": {
                "summary": "Returns a single Ml3kLoadTrigger entry.",
                "operationId": "getOneMl3kLoadTrigger",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Ml3kLoadTrigger"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Ml3kLoadTrigger element.",
                "operationId": "putOneMl3kLoadTrigger",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Ml3kLoadTrigger"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Ml3kLoadTrigger element.",
                "operationId": "patchOneMl3kLoadTrigger",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Ml3kLoadTrigger element.",
                "operationId": "deleteOneMl3kLoadTrigger",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/advertising/": {
            "get": {
                "summary": "Returns Advertising entries.",
                "operationId": "getAllAdvertising",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Advertising"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/advertising/{id}": {
            "get": {
                "summary": "Returns a single Advertising entry.",
                "operationId": "getOneAdvertising",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Advertising"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/antimoneylaundering/": {
            "get": {
                "summary": "Returns AntiMoneyLaundering entries.",
                "operationId": "getAllAntiMoneyLaundering",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AntiMoneyLaundering"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/antimoneylaundering/{id}": {
            "get": {
                "summary": "Returns a single AntiMoneyLaundering entry.",
                "operationId": "getOneAntiMoneyLaundering",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AntiMoneyLaundering"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/": {
            "get": {
                "summary": "Returns Consultant entries.",
                "operationId": "getAllConsultant",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Consultant"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Consultant entry.",
                "operationId": "postConsultant",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Consultant"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/consultant/account-overdraft/": {
            "get": {
                "summary": "Returns AccountOverdraft entries.",
                "operationId": "getAllAccountOverdraft",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AccountOverdraft"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/account-overdraft/{id}": {
            "get": {
                "summary": "Returns a single AccountOverdraft entry.",
                "operationId": "getOneAccountOverdraft",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountOverdraft"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/customer-mutations/": {
            "get": {
                "summary": "Returns CustomerMutations entries.",
                "operationId": "getAllCustomerMutations",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerMutations"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/customer-mutations/{id}": {
            "get": {
                "summary": "Returns a single CustomerMutations entry.",
                "operationId": "getOneCustomerMutations",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerMutations"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/customer-profit/": {
            "get": {
                "summary": "Returns ProfitableCustomers entries.",
                "operationId": "getAllProfitableCustomers",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProfitableCustomers"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/customer-profit/{id}": {
            "get": {
                "summary": "Returns a single ProfitableCustomers entry.",
                "operationId": "getOneProfitableCustomers",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfitableCustomers"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/deposit-transactions/": {
            "get": {
                "summary": "Returns DepositTransactions entries.",
                "operationId": "getAllDepositTransactions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DepositTransactions"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/deposit-transactions/{id}": {
            "get": {
                "summary": "Returns a single DepositTransactions entry.",
                "operationId": "getOneDepositTransactions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DepositTransactions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/inbound-transactions/": {
            "get": {
                "summary": "Returns InboundTransactions entries.",
                "operationId": "getAllInboundTransactions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InboundTransactions"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/inbound-transactions/{id}": {
            "get": {
                "summary": "Returns a single InboundTransactions entry.",
                "operationId": "getOneInboundTransactions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InboundTransactions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/investment-potential/": {
            "get": {
                "summary": "Returns InvestmentPotential entries.",
                "operationId": "getAllInvestmentPotential",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvestmentPotential"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/investment-potential/{id}": {
            "get": {
                "summary": "Returns a single InvestmentPotential entry.",
                "operationId": "getOneInvestmentPotential",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvestmentPotential"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/kpi/": {
            "get": {
                "summary": "Returns ConsultantKpi entries.",
                "operationId": "getAllConsultantKpi",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConsultantKpi"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/kpi/{id}": {
            "get": {
                "summary": "Returns a single ConsultantKpi entry.",
                "operationId": "getOneConsultantKpi",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConsultantKpi"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/mbo/": {
            "get": {
                "summary": "Returns ConsultantMbo entries.",
                "operationId": "getAllConsultantMbo",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ConsultantMbo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/mbo/{id}": {
            "get": {
                "summary": "Returns a single ConsultantMbo entry.",
                "operationId": "getOneConsultantMbo",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConsultantMbo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/outbound-transactions/": {
            "get": {
                "summary": "Returns OutboundTransactions entries.",
                "operationId": "getAllOutboundTransactions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OutboundTransactions"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/outbound-transactions/{id}": {
            "get": {
                "summary": "Returns a single OutboundTransactions entry.",
                "operationId": "getOneOutboundTransactions",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutboundTransactions"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/provision-investment-potential/": {
            "get": {
                "summary": "Returns ProvisionInvestmentPotential entries.",
                "operationId": "getAllProvisionInvestmentPotential",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionInvestmentPotential"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/provision-investment-potential/{id}": {
            "get": {
                "summary": "Returns a single ProvisionInvestmentPotential entry.",
                "operationId": "getOneProvisionInvestmentPotential",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionInvestmentPotential"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/provision-potential/": {
            "get": {
                "summary": "Returns ProvisionPotential entries.",
                "operationId": "getAllProvisionPotential",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionPotential"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/consultant/provision-potential/{id}": {
            "get": {
                "summary": "Returns a single ProvisionPotential entry.",
                "operationId": "getOneProvisionPotential",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionPotential"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/consultant/{id}": {
            "get": {
                "summary": "Returns a single Consultant entry.",
                "operationId": "getOneConsultant",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Consultant"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Consultant element.",
                "operationId": "putOneConsultant",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Consultant"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Consultant element.",
                "operationId": "patchOneConsultant",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Consultant element.",
                "operationId": "deleteOneConsultant",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/contact/consultant/": {
            "get": {
                "summary": "Returns FinancingConsultantContact entries.",
                "operationId": "getAllFinancingConsultantContact",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FinancingConsultantContact"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single FinancingConsultantContact entry.",
                "operationId": "postFinancingConsultantContact",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingConsultantContact"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/contact/consultant/{id}": {
            "get": {
                "summary": "Returns a single FinancingConsultantContact entry.",
                "operationId": "getOneFinancingConsultantContact",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FinancingConsultantContact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single FinancingConsultantContact element.",
                "operationId": "putOneFinancingConsultantContact",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinancingConsultantContact"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single FinancingConsultantContact element.",
                "operationId": "patchOneFinancingConsultantContact",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single FinancingConsultantContact element.",
                "operationId": "deleteOneFinancingConsultantContact",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer-balance/": {
            "get": {
                "summary": "Returns CustomerBalance entries.",
                "operationId": "getAllCustomerBalance",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerBalance"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerBalance entry.",
                "operationId": "postCustomerBalance",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBalance"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customer-balance/history/": {
            "get": {
                "summary": "Returns CustomerBalanceHistory entries.",
                "operationId": "getAllCustomerBalanceHistory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerBalanceHistory"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerBalanceHistory entry.",
                "operationId": "postCustomerBalanceHistory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBalanceHistory"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customer-balance/history/{id}": {
            "get": {
                "summary": "Returns a single CustomerBalanceHistory entry.",
                "operationId": "getOneCustomerBalanceHistory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerBalanceHistory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerBalanceHistory element.",
                "operationId": "putOneCustomerBalanceHistory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBalanceHistory"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerBalanceHistory element.",
                "operationId": "patchOneCustomerBalanceHistory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerBalanceHistory element.",
                "operationId": "deleteOneCustomerBalanceHistory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer-balance/{id}": {
            "get": {
                "summary": "Returns a single CustomerBalance entry.",
                "operationId": "getOneCustomerBalance",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerBalance"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerBalance element.",
                "operationId": "putOneCustomerBalance",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerBalance"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerBalance element.",
                "operationId": "patchOneCustomerBalance",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerBalance element.",
                "operationId": "deleteOneCustomerBalance",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer-group/": {
            "get": {
                "summary": "Returns CustomerGroup entries.",
                "operationId": "getAllCustomerGroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerGroup"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerGroup entry.",
                "operationId": "postCustomerGroup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customer-group/{id}": {
            "get": {
                "summary": "Returns a single CustomerGroup entry.",
                "operationId": "getOneCustomerGroup",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerGroup element.",
                "operationId": "putOneCustomerGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerGroup"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerGroup element.",
                "operationId": "patchOneCustomerGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerGroup element.",
                "operationId": "deleteOneCustomerGroup",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer-income/": {
            "get": {
                "summary": "Returns CustomerIncome entries.",
                "operationId": "getAllCustomerIncome",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerIncome"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/customer-income/{id}": {
            "get": {
                "summary": "Returns a single CustomerIncome entry.",
                "operationId": "getOneCustomerIncome",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerIncome"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer-migration/": {
            "get": {
                "summary": "Returns CustomerMigration entries.",
                "operationId": "getAllCustomerMigration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerMigration"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerMigration entry.",
                "operationId": "postCustomerMigration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerMigration"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customer-migration/{id}": {
            "get": {
                "summary": "Returns a single CustomerMigration entry.",
                "operationId": "getOneCustomerMigration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerMigration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerMigration element.",
                "operationId": "putOneCustomerMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerMigration"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerMigration element.",
                "operationId": "patchOneCustomerMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerMigration element.",
                "operationId": "deleteOneCustomerMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer-prospectmigration/": {
            "get": {
                "summary": "Returns CustomerProspectMigration entries.",
                "operationId": "getAllCustomerProspectMigration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerProspectMigration"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerProspectMigration entry.",
                "operationId": "postCustomerProspectMigration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerProspectMigration"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customer-prospectmigration/{id}": {
            "get": {
                "summary": "Returns a single CustomerProspectMigration entry.",
                "operationId": "getOneCustomerProspectMigration",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerProspectMigration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerProspectMigration element.",
                "operationId": "putOneCustomerProspectMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerProspectMigration"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerProspectMigration element.",
                "operationId": "patchOneCustomerProspectMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerProspectMigration element.",
                "operationId": "deleteOneCustomerProspectMigration",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer-restricted/": {
            "get": {
                "summary": "Returns CustomerRestricted entries.",
                "operationId": "getAllCustomerRestricted",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerRestricted"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/customer-restricted/{id}": {
            "get": {
                "summary": "Returns a single CustomerRestricted entry.",
                "operationId": "getOneCustomerRestricted",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerRestricted"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer/": {
            "get": {
                "summary": "Returns Customer entries.",
                "operationId": "getAllCustomer",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Customer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Customer entry.",
                "operationId": "postCustomer",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customer/business-relations/": {
            "get": {
                "summary": "Returns CustomerToBusinessRelations entries.",
                "operationId": "getAllCustomerToBusinessRelations",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerToBusinessRelations"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/customer/business-relations/{id}": {
            "get": {
                "summary": "Returns a single CustomerToBusinessRelations entry.",
                "operationId": "getOneCustomerToBusinessRelations",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerToBusinessRelations"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer/salary/": {
            "get": {
                "summary": "Returns CustomerSalary entries.",
                "operationId": "getAllCustomerSalary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerSalary"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/customer/salary/{id}": {
            "get": {
                "summary": "Returns a single CustomerSalary entry.",
                "operationId": "getOneCustomerSalary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerSalary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer/verification/": {
            "get": {
                "summary": "Returns CustomerVerification entries.",
                "operationId": "getAllCustomerVerification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerVerification"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerVerification entry.",
                "operationId": "postCustomerVerification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerVerification"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customer/verification/{id}": {
            "get": {
                "summary": "Returns a single CustomerVerification entry.",
                "operationId": "getOneCustomerVerification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerVerification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerVerification element.",
                "operationId": "putOneCustomerVerification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerVerification"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerVerification element.",
                "operationId": "patchOneCustomerVerification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerVerification element.",
                "operationId": "deleteOneCustomerVerification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customer/{id}": {
            "get": {
                "summary": "Returns a single Customer entry.",
                "operationId": "getOneCustomer",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Customer element.",
                "operationId": "putOneCustomer",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Customer element.",
                "operationId": "patchOneCustomer",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Customer element.",
                "operationId": "deleteOneCustomer",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/customerassignment/": {
            "get": {
                "summary": "Returns CustomerAssignment entries.",
                "operationId": "getAllCustomerAssignment",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerAssignment"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerAssignment entry.",
                "operationId": "postCustomerAssignment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerAssignment"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/customerassignment/{id}": {
            "get": {
                "summary": "Returns a single CustomerAssignment entry.",
                "operationId": "getOneCustomerAssignment",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerAssignment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerAssignment element.",
                "operationId": "putOneCustomerAssignment",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerAssignment"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerAssignment element.",
                "operationId": "patchOneCustomerAssignment",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerAssignment element.",
                "operationId": "deleteOneCustomerAssignment",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/enforcement/": {
            "get": {
                "summary": "Returns Enforcement entries.",
                "operationId": "getAllEnforcement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Enforcement"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/enforcement/{id}": {
            "get": {
                "summary": "Returns a single Enforcement entry.",
                "operationId": "getOneEnforcement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Enforcement"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/rating/": {
            "get": {
                "summary": "Returns CustomerRating entries.",
                "operationId": "getAllCustomerRating",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerRating"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerRating entry.",
                "operationId": "postCustomerRating",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRating"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/rating/{id}": {
            "get": {
                "summary": "Returns a single CustomerRating entry.",
                "operationId": "getOneCustomerRating",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerRating"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerRating element.",
                "operationId": "putOneCustomerRating",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRating"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerRating element.",
                "operationId": "patchOneCustomerRating",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerRating element.",
                "operationId": "deleteOneCustomerRating",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/regulatoryclassification/": {
            "get": {
                "summary": "Returns RegulatoryClassification entries.",
                "operationId": "getAllRegulatoryClassification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RegulatoryClassification"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/person/regulatoryclassification/{id}": {
            "get": {
                "summary": "Returns a single RegulatoryClassification entry.",
                "operationId": "getOneRegulatoryClassification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegulatoryClassification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/relation/": {
            "get": {
                "summary": "Returns CustomerRelation entries.",
                "operationId": "getAllCustomerRelation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerRelation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerRelation entry.",
                "operationId": "postCustomerRelation",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRelation"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/relation/{id}": {
            "get": {
                "summary": "Returns a single CustomerRelation entry.",
                "operationId": "getOneCustomerRelation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerRelation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerRelation element.",
                "operationId": "putOneCustomerRelation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRelation"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerRelation element.",
                "operationId": "patchOneCustomerRelation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerRelation element.",
                "operationId": "deleteOneCustomerRelation",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/person/usersettings/": {
            "get": {
                "summary": "Returns UserSettings entries.",
                "operationId": "getAllUserSettings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserSettings"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single UserSettings entry.",
                "operationId": "postUserSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/person/usersettings/{id}": {
            "get": {
                "summary": "Returns a single UserSettings entry.",
                "operationId": "getOneUserSettings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSettings"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single UserSettings element.",
                "operationId": "putOneUserSettings",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserSettings"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single UserSettings element.",
                "operationId": "patchOneUserSettings",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single UserSettings element.",
                "operationId": "deleteOneUserSettings",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/pos/promotion/": {
            "get": {
                "summary": "Returns BasisPromotion entries.",
                "operationId": "getAllBasisPromotion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BasisPromotion"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single BasisPromotion entry.",
                "operationId": "postBasisPromotion",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasisPromotion"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/pos/promotion/{id}": {
            "get": {
                "summary": "Returns a single BasisPromotion entry.",
                "operationId": "getOneBasisPromotion",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasisPromotion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single BasisPromotion element.",
                "operationId": "putOneBasisPromotion",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BasisPromotion"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single BasisPromotion element.",
                "operationId": "patchOneBasisPromotion",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single BasisPromotion element.",
                "operationId": "deleteOneBasisPromotion",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/print/document/": {
            "get": {
                "summary": "Returns PrintDocument entries.",
                "operationId": "getAllPrintDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PrintDocument"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single PrintDocument entry.",
                "operationId": "postPrintDocument",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrintDocument"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/print/document/{id}": {
            "get": {
                "summary": "Returns a single PrintDocument entry.",
                "operationId": "getOnePrintDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrintDocument"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single PrintDocument element.",
                "operationId": "putOnePrintDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrintDocument"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single PrintDocument element.",
                "operationId": "patchOnePrintDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single PrintDocument element.",
                "operationId": "deleteOnePrintDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/print/investment-document/": {
            "get": {
                "summary": "Returns PrintInvestmentDocument entries.",
                "operationId": "getAllPrintInvestmentDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PrintInvestmentDocument"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single PrintInvestmentDocument entry.",
                "operationId": "postPrintInvestmentDocument",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrintInvestmentDocument"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/print/investment-document/{id}": {
            "get": {
                "summary": "Returns a single PrintInvestmentDocument entry.",
                "operationId": "getOnePrintInvestmentDocument",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrintInvestmentDocument"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single PrintInvestmentDocument element.",
                "operationId": "putOnePrintInvestmentDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrintInvestmentDocument"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single PrintInvestmentDocument element.",
                "operationId": "patchOnePrintInvestmentDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single PrintInvestmentDocument element.",
                "operationId": "deleteOnePrintInvestmentDocument",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/print/url-to-pdf/": {
            "get": {
                "summary": "Returns PrintUrl entries.",
                "operationId": "getAllPrintUrl",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PrintUrl"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single PrintUrl entry.",
                "operationId": "postPrintUrl",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrintUrl"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/print/url-to-pdf/{id}": {
            "get": {
                "summary": "Returns a single PrintUrl entry.",
                "operationId": "getOnePrintUrl",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrintUrl"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single PrintUrl element.",
                "operationId": "putOnePrintUrl",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrintUrl"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single PrintUrl element.",
                "operationId": "patchOnePrintUrl",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single PrintUrl element.",
                "operationId": "deleteOnePrintUrl",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/provision/assets/": {
            "get": {
                "summary": "Returns ProvisionAssets entries.",
                "operationId": "getAllProvisionAssets",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionAssets"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provision/assets/{id}": {
            "get": {
                "summary": "Returns a single ProvisionAssets entry.",
                "operationId": "getOneProvisionAssets",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionAssets"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/provision/institution/": {
            "get": {
                "summary": "Returns ProvisionInstitution entries.",
                "operationId": "getAllProvisionInstitution",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionInstitution"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProvisionInstitution entry.",
                "operationId": "postProvisionInstitution",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProvisionInstitution"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/provision/institution/{id}": {
            "get": {
                "summary": "Returns a single ProvisionInstitution entry.",
                "operationId": "getOneProvisionInstitution",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionInstitution"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProvisionInstitution element.",
                "operationId": "putOneProvisionInstitution",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProvisionInstitution"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProvisionInstitution element.",
                "operationId": "patchOneProvisionInstitution",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProvisionInstitution element.",
                "operationId": "deleteOneProvisionInstitution",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/provision/leadmanagement/": {
            "get": {
                "summary": "Returns ProvisionLeadmanagement entries.",
                "operationId": "getAllProvisionLeadmanagement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionLeadmanagement"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProvisionLeadmanagement entry.",
                "operationId": "postProvisionLeadmanagement",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProvisionLeadmanagement"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/provision/leadmanagement/{id}": {
            "get": {
                "summary": "Returns a single ProvisionLeadmanagement entry.",
                "operationId": "getOneProvisionLeadmanagement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionLeadmanagement"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProvisionLeadmanagement element.",
                "operationId": "putOneProvisionLeadmanagement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProvisionLeadmanagement"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProvisionLeadmanagement element.",
                "operationId": "patchOneProvisionLeadmanagement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProvisionLeadmanagement element.",
                "operationId": "deleteOneProvisionLeadmanagement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/provision/person/evaluation/": {
            "get": {
                "summary": "Returns ProvisionCustomerBaseEvaluation entries.",
                "operationId": "getAllProvisionCustomerBaseEvaluation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionCustomerBaseEvaluation"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provision/person/evaluation/{id}": {
            "get": {
                "summary": "Returns a single ProvisionCustomerBaseEvaluation entry.",
                "operationId": "getOneProvisionCustomerBaseEvaluation",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionCustomerBaseEvaluation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/provision/workflow/": {
            "get": {
                "summary": "Returns ProvisionWorkflow entries.",
                "operationId": "getAllProvisionWorkflow",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionWorkflow"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/provision/workflow/{id}": {
            "get": {
                "summary": "Returns a single ProvisionWorkflow entry.",
                "operationId": "getOneProvisionWorkflow",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionWorkflow"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/provision/workguide/": {
            "get": {
                "summary": "Returns ProvisionWorkguide entries.",
                "operationId": "getAllProvisionWorkguide",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProvisionWorkguide"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ProvisionWorkguide entry.",
                "operationId": "postProvisionWorkguide",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProvisionWorkguide"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/provision/workguide/{id}": {
            "get": {
                "summary": "Returns a single ProvisionWorkguide entry.",
                "operationId": "getOneProvisionWorkguide",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionWorkguide"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ProvisionWorkguide element.",
                "operationId": "putOneProvisionWorkguide",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProvisionWorkguide"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ProvisionWorkguide element.",
                "operationId": "patchOneProvisionWorkguide",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ProvisionWorkguide element.",
                "operationId": "deleteOneProvisionWorkguide",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/requisition/groups/": {
            "get": {
                "summary": "Returns EvojaBasicsRequisitionGroups entries.",
                "operationId": "getAllEvojaBasicsRequisitionGroups",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EvojaBasicsRequisitionGroups"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single EvojaBasicsRequisitionGroups entry.",
                "operationId": "postEvojaBasicsRequisitionGroups",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EvojaBasicsRequisitionGroups"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/requisition/groups/{id}": {
            "get": {
                "summary": "Returns a single EvojaBasicsRequisitionGroups entry.",
                "operationId": "getOneEvojaBasicsRequisitionGroups",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvojaBasicsRequisitionGroups"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single EvojaBasicsRequisitionGroups element.",
                "operationId": "putOneEvojaBasicsRequisitionGroups",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EvojaBasicsRequisitionGroups"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single EvojaBasicsRequisitionGroups element.",
                "operationId": "patchOneEvojaBasicsRequisitionGroups",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single EvojaBasicsRequisitionGroups element.",
                "operationId": "deleteOneEvojaBasicsRequisitionGroups",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/approval/": {
            "get": {
                "summary": "Returns ServiceApproval entries.",
                "operationId": "getAllServiceApproval",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceApproval"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single ServiceApproval entry.",
                "operationId": "postServiceApproval",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceApproval"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/service/approval/{id}": {
            "get": {
                "summary": "Returns a single ServiceApproval entry.",
                "operationId": "getOneServiceApproval",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceApproval"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single ServiceApproval element.",
                "operationId": "putOneServiceApproval",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceApproval"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single ServiceApproval element.",
                "operationId": "patchOneServiceApproval",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single ServiceApproval element.",
                "operationId": "deleteOneServiceApproval",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/card/": {
            "get": {
                "summary": "Returns Card entries.",
                "operationId": "getAllCard",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Card"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Card entry.",
                "operationId": "postCard",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Card"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/service/card/restlimit/": {
            "get": {
                "summary": "Returns CardRestLimit entries.",
                "operationId": "getAllCardRestLimit",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CardRestLimit"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/service/card/restlimit/{id}": {
            "get": {
                "summary": "Returns a single CardRestLimit entry.",
                "operationId": "getOneCardRestLimit",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CardRestLimit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/card/{id}": {
            "get": {
                "summary": "Returns a single Card entry.",
                "operationId": "getOneCard",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Card"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Card element.",
                "operationId": "putOneCard",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Card"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Card element.",
                "operationId": "patchOneCard",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Card element.",
                "operationId": "deleteOneCard",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/eservice/": {
            "get": {
                "summary": "Returns EService entries.",
                "operationId": "getAllEService",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EService"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/service/eservice/{id}": {
            "get": {
                "summary": "Returns a single EService entry.",
                "operationId": "getOneEService",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EService"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/lsv/": {
            "get": {
                "summary": "Returns DirectDebitingProcedure entries.",
                "operationId": "getAllDirectDebitingProcedure",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DirectDebitingProcedure"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/service/lsv/{id}": {
            "get": {
                "summary": "Returns a single DirectDebitingProcedure entry.",
                "operationId": "getOneDirectDebitingProcedure",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DirectDebitingProcedure"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/settlementcosts/": {
            "get": {
                "summary": "Returns SettlementCosts entries.",
                "operationId": "getAllSettlementCosts",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SettlementCosts"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/service/settlementcosts/details/": {
            "get": {
                "summary": "Returns SettlementCostsDetails entries.",
                "operationId": "getAllSettlementCostsDetails",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SettlementCostsDetails"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/service/settlementcosts/details/{id}": {
            "get": {
                "summary": "Returns a single SettlementCostsDetails entry.",
                "operationId": "getOneSettlementCostsDetails",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettlementCostsDetails"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/settlementcosts/{id}": {
            "get": {
                "summary": "Returns a single SettlementCosts entry.",
                "operationId": "getOneSettlementCosts",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettlementCosts"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/standingorder/": {
            "get": {
                "summary": "Returns StandingOrder entries.",
                "operationId": "getAllStandingOrder",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StandingOrder"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/service/standingorder/{id}": {
            "get": {
                "summary": "Returns a single StandingOrder entry.",
                "operationId": "getOneStandingOrder",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StandingOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/service/suspensionsummary/": {
            "get": {
                "summary": "Returns SuspensionSummary entries.",
                "operationId": "getAllSuspensionSummary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SuspensionSummary"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/service/suspensionsummary/{id}": {
            "get": {
                "summary": "Returns a single SuspensionSummary entry.",
                "operationId": "getOneSuspensionSummary",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuspensionSummary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/ssp/action/": {
            "get": {
                "summary": "Returns SspAction entries.",
                "operationId": "getAllSspAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SspAction"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single SspAction entry.",
                "operationId": "postSspAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SspAction"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/ssp/action/{id}": {
            "get": {
                "summary": "Returns a single SspAction entry.",
                "operationId": "getOneSspAction",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SspAction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single SspAction element.",
                "operationId": "putOneSspAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SspAction"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single SspAction element.",
                "operationId": "patchOneSspAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single SspAction element.",
                "operationId": "deleteOneSspAction",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/ssp/worklog-execution/": {
            "get": {
                "summary": "Returns SspWorkLogExecution entries.",
                "operationId": "getAllSspWorkLogExecution",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SspWorkLogExecution"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ssp/worklog-execution/{id}": {
            "get": {
                "summary": "Returns a single SspWorkLogExecution entry.",
                "operationId": "getOneSspWorkLogExecution",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SspWorkLogExecution"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/ssp/worklog/": {
            "get": {
                "summary": "Returns SspWorkLog entries.",
                "operationId": "getAllSspWorkLog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SspWorkLog"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ssp/worklog/{id}": {
            "get": {
                "summary": "Returns a single SspWorkLog entry.",
                "operationId": "getOneSspWorkLog",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SspWorkLog"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/activity/": {
            "get": {
                "summary": "Returns Activity entries.",
                "operationId": "getAllActivity",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Activity"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Activity entry.",
                "operationId": "postActivity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/activity/{id}": {
            "get": {
                "summary": "Returns a single Activity entry.",
                "operationId": "getOneActivity",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Activity"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Activity element.",
                "operationId": "putOneActivity",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Activity element.",
                "operationId": "patchOneActivity",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Activity element.",
                "operationId": "deleteOneActivity",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/customer-note/": {
            "get": {
                "summary": "Returns CustomerNote entries.",
                "operationId": "getAllCustomerNote",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerNote"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/work/customer-note/{id}": {
            "get": {
                "summary": "Returns a single CustomerNote entry.",
                "operationId": "getOneCustomerNote",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/customer-task/": {
            "get": {
                "summary": "Returns CustomerTask entries.",
                "operationId": "getAllCustomerTask",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerTask"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single CustomerTask entry.",
                "operationId": "postCustomerTask",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerTask"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/customer-task/{id}": {
            "get": {
                "summary": "Returns a single CustomerTask entry.",
                "operationId": "getOneCustomerTask",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerTask"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single CustomerTask element.",
                "operationId": "putOneCustomerTask",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerTask"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single CustomerTask element.",
                "operationId": "patchOneCustomerTask",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single CustomerTask element.",
                "operationId": "deleteOneCustomerTask",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/leadmanagement/": {
            "get": {
                "summary": "Returns Leadmanagement entries.",
                "operationId": "getAllLeadmanagement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Leadmanagement"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Leadmanagement entry.",
                "operationId": "postLeadmanagement",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Leadmanagement"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/leadmanagement/history/": {
            "get": {
                "summary": "Returns LeadmanagementHistory entries.",
                "operationId": "getAllLeadmanagementHistory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LeadmanagementHistory"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single LeadmanagementHistory entry.",
                "operationId": "postLeadmanagementHistory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LeadmanagementHistory"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/leadmanagement/history/{id}": {
            "get": {
                "summary": "Returns a single LeadmanagementHistory entry.",
                "operationId": "getOneLeadmanagementHistory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeadmanagementHistory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single LeadmanagementHistory element.",
                "operationId": "putOneLeadmanagementHistory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LeadmanagementHistory"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single LeadmanagementHistory element.",
                "operationId": "patchOneLeadmanagementHistory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single LeadmanagementHistory element.",
                "operationId": "deleteOneLeadmanagementHistory",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/leadmanagement/revision/": {
            "get": {
                "summary": "Returns LeadmanagementRevision entries.",
                "operationId": "getAllLeadmanagementRevision",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LeadmanagementRevision"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/work/leadmanagement/revision/{id}": {
            "get": {
                "summary": "Returns a single LeadmanagementRevision entry.",
                "operationId": "getOneLeadmanagementRevision",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LeadmanagementRevision"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/leadmanagement/{id}": {
            "get": {
                "summary": "Returns a single Leadmanagement entry.",
                "operationId": "getOneLeadmanagement",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Leadmanagement"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Leadmanagement element.",
                "operationId": "putOneLeadmanagement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Leadmanagement"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Leadmanagement element.",
                "operationId": "patchOneLeadmanagement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Leadmanagement element.",
                "operationId": "deleteOneLeadmanagement",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/leadqualification/": {
            "get": {
                "summary": "Returns Leadqualification entries.",
                "operationId": "getAllLeadqualification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Leadqualification"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Leadqualification entry.",
                "operationId": "postLeadqualification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Leadqualification"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/leadqualification/{id}": {
            "get": {
                "summary": "Returns a single Leadqualification entry.",
                "operationId": "getOneLeadqualification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Leadqualification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Leadqualification element.",
                "operationId": "putOneLeadqualification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Leadqualification"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Leadqualification element.",
                "operationId": "patchOneLeadqualification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Leadqualification element.",
                "operationId": "deleteOneLeadqualification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/notification/": {
            "get": {
                "summary": "Returns WorkNotification entries.",
                "operationId": "getAllWorkNotification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkNotification"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single WorkNotification entry.",
                "operationId": "postWorkNotification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkNotification"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/notification/{id}": {
            "get": {
                "summary": "Returns a single WorkNotification entry.",
                "operationId": "getOneWorkNotification",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkNotification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single WorkNotification element.",
                "operationId": "putOneWorkNotification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkNotification"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single WorkNotification element.",
                "operationId": "patchOneWorkNotification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single WorkNotification element.",
                "operationId": "deleteOneWorkNotification",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/quickfilter/": {
            "get": {
                "summary": "Returns QuickFilter entries.",
                "operationId": "getAllQuickFilter",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/QuickFilter"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single QuickFilter entry.",
                "operationId": "postQuickFilter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuickFilter"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/quickfilter/{id}": {
            "get": {
                "summary": "Returns a single QuickFilter entry.",
                "operationId": "getOneQuickFilter",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuickFilter"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single QuickFilter element.",
                "operationId": "putOneQuickFilter",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuickFilter"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single QuickFilter element.",
                "operationId": "patchOneQuickFilter",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single QuickFilter element.",
                "operationId": "deleteOneQuickFilter",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/translation/": {
            "get": {
                "summary": "Returns Translations entries.",
                "operationId": "getAllTranslations",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Translations"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Translations entry.",
                "operationId": "postTranslations",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Translations"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/translation/{id}": {
            "get": {
                "summary": "Returns a single Translations entry.",
                "operationId": "getOneTranslations",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Translations"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Translations element.",
                "operationId": "putOneTranslations",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Translations"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Translations element.",
                "operationId": "patchOneTranslations",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Translations element.",
                "operationId": "deleteOneTranslations",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/uinotes/": {
            "get": {
                "summary": "Returns UserInterfaceNotes entries.",
                "operationId": "getAllUserInterfaceNotes",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserInterfaceNotes"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single UserInterfaceNotes entry.",
                "operationId": "postUserInterfaceNotes",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInterfaceNotes"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/uinotes/{id}": {
            "get": {
                "summary": "Returns a single UserInterfaceNotes entry.",
                "operationId": "getOneUserInterfaceNotes",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInterfaceNotes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single UserInterfaceNotes element.",
                "operationId": "putOneUserInterfaceNotes",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInterfaceNotes"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single UserInterfaceNotes element.",
                "operationId": "patchOneUserInterfaceNotes",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single UserInterfaceNotes element.",
                "operationId": "deleteOneUserInterfaceNotes",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/usertracking/": {
            "get": {
                "summary": "Returns Usertracking entries.",
                "operationId": "getAllUsertracking",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Usertracking"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Usertracking entry.",
                "operationId": "postUsertracking",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Usertracking"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/usertracking/{id}": {
            "get": {
                "summary": "Returns a single Usertracking entry.",
                "operationId": "getOneUsertracking",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Usertracking"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Usertracking element.",
                "operationId": "putOneUsertracking",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Usertracking"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Usertracking element.",
                "operationId": "patchOneUsertracking",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Usertracking element.",
                "operationId": "deleteOneUsertracking",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/workbench/": {
            "get": {
                "summary": "Returns Workbench entries.",
                "operationId": "getAllWorkbench",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Workbench"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Workbench entry.",
                "operationId": "postWorkbench",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workbench"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/workbench/quickfilter/": {
            "get": {
                "summary": "Returns WorkbenchQuickFilter entries.",
                "operationId": "getAllWorkbenchQuickFilter",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkbenchQuickFilter"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single WorkbenchQuickFilter entry.",
                "operationId": "postWorkbenchQuickFilter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkbenchQuickFilter"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/workbench/quickfilter/{id}": {
            "get": {
                "summary": "Returns a single WorkbenchQuickFilter entry.",
                "operationId": "getOneWorkbenchQuickFilter",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkbenchQuickFilter"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single WorkbenchQuickFilter element.",
                "operationId": "putOneWorkbenchQuickFilter",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkbenchQuickFilter"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single WorkbenchQuickFilter element.",
                "operationId": "patchOneWorkbenchQuickFilter",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single WorkbenchQuickFilter element.",
                "operationId": "deleteOneWorkbenchQuickFilter",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/workbench/{id}": {
            "get": {
                "summary": "Returns a single Workbench entry.",
                "operationId": "getOneWorkbench",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Workbench"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Workbench element.",
                "operationId": "putOneWorkbench",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workbench"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Workbench element.",
                "operationId": "patchOneWorkbench",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Workbench element.",
                "operationId": "deleteOneWorkbench",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/workflow/": {
            "get": {
                "summary": "Returns Workflow entries.",
                "operationId": "getAllWorkflow",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Workflow"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/work/workflow/{id}": {
            "get": {
                "summary": "Returns a single Workflow entry.",
                "operationId": "getOneWorkflow",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Workflow"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/workguide/": {
            "get": {
                "summary": "Returns Workguide entries.",
                "operationId": "getAllWorkguide",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Workguide"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Workguide entry.",
                "operationId": "postWorkguide",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workguide"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/workguide/usage/": {
            "get": {
                "summary": "Returns WorkguideUsage entries.",
                "operationId": "getAllWorkguideUsage",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WorkguideUsage"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/work/workguide/usage/{id}": {
            "get": {
                "summary": "Returns a single WorkguideUsage entry.",
                "operationId": "getOneWorkguideUsage",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkguideUsage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/workguide/{id}": {
            "get": {
                "summary": "Returns a single Workguide entry.",
                "operationId": "getOneWorkguide",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Workguide"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Workguide element.",
                "operationId": "putOneWorkguide",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workguide"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Workguide element.",
                "operationId": "patchOneWorkguide",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Workguide element.",
                "operationId": "deleteOneWorkguide",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/work/workguideconfig/": {
            "get": {
                "summary": "Returns Workguideconfig entries.",
                "operationId": "getAllWorkguideconfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Workguideconfig"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Writes a single Workguideconfig entry.",
                "operationId": "postWorkguideconfig",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workguideconfig"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                }
            }
        },
        "/work/workguideconfig/{id}": {
            "get": {
                "summary": "Returns a single Workguideconfig entry.",
                "operationId": "getOneWorkguideconfig",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Workguideconfig"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Persists a single Workguideconfig element.",
                "operationId": "putOneWorkguideconfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workguideconfig"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "summary": "Applies a patch on a single Workguideconfig element.",
                "operationId": "patchOneWorkguideconfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GravitonPatchBody"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "summary": "Deletes a single Workguideconfig element.",
                "operationId": "deleteOneWorkguideconfig",
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "404": {
                        "description": "Entry not found."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of entry.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Account": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "number": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Number"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number formatted"
                    },
                    "bankname": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Bankname"
                    },
                    "webDomain": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Web domain"
                    },
                    "iban": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Iban"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "accountGroup": {
                        "$ref": "#/components/schemas/Accountgroup"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "accountTypeRef": {
                        "$ref": "#/components/schemas/AccountAccountAccountTypeRef"
                    },
                    "openedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Opened date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "closedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Closed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "balanceAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "reportingCurrency": {
                        "$ref": "#/components/schemas/AccountAccountReportingCurrency"
                    },
                    "accountCurrency": {
                        "$ref": "#/components/schemas/AccountAccountAccountCurrency"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "domain": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Domain"
                    },
                    "authorizedCustomer": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Authorized customer",
                        "items": {
                            "$ref": "#/components/schemas/AccountAccountAuthorizedCustomer"
                        }
                    },
                    "usedAmount": {
                        "type": "number",
                        "description": "Amount currently used for this month",
                        "title": "Currently Used Monthly Amount"
                    },
                    "safeNumber": {
                        "type": "string",
                        "description": "Safe number",
                        "title": "Safe Number"
                    },
                    "safeLocation": {
                        "type": "string",
                        "description": "Safe location",
                        "title": "Safe Location"
                    },
                    "maturityDate": {
                        "type": "string",
                        "description": "Maturity date of gift savings account",
                        "title": "Maturity Date of Gift Savings Account",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "withdrawalAmount": {
                        "type": "number",
                        "description": "Withdrawal amount",
                        "title": "Withdrawal Amount"
                    },
                    "withdrawalUsedAmount": {
                        "type": "number",
                        "description": "So far used amount of withdrawal",
                        "title": "Used Amount of Withdrawal"
                    },
                    "withdrawalAvailableAmount": {
                        "type": "number",
                        "description": "Available amount of withdrawal",
                        "title": "Available Amount of Withdrawal"
                    },
                    "hasCancelationPeriod": {
                        "type": "boolean",
                        "description": "Indicates if acccount has a cancelation period",
                        "title": "Indicates if Acccount Has a Cancelation Period"
                    },
                    "withdrawalCancellation": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Withdrawal cancellation",
                        "items": {
                            "$ref": "#/components/schemas/AccountAccountWithdrawalCancellation"
                        }
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/AccountAccountSuspension"
                        }
                    },
                    "withdrawalPeriodDesc": {
                        "$ref": "#/components/schemas/AccountAccountWithdrawalPeriodDesc"
                    },
                    "withdrawalPeriod": {
                        "$ref": "#/components/schemas/AccountAccountWithdrawalPeriod"
                    },
                    "provision": {
                        "$ref": "#/components/schemas/AccountAccountProvision"
                    },
                    "creditLimit": {
                        "type": "number",
                        "description": "Credit limit, if a credit contract exists for this account",
                        "title": "Credit Limil"
                    },
                    "reservedAmount": {
                        "type": "number",
                        "description": "Reserved amount from this account",
                        "title": "Reserved Amount"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "pledge": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pledge",
                        "items": {
                            "$ref": "#/components/schemas/AccountAccountPledge"
                        }
                    },
                    "connectedAccountsRef": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Connected accounts ref",
                        "items": {
                            "$ref": "#/components/schemas/AccountAccountConnectedAccountsRef"
                        }
                    },
                    "sector": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "interestRates": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Interest rates",
                        "items": {
                            "$ref": "#/components/schemas/AccountAccountInterestRates"
                        }
                    },
                    "expenseCategory": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "isMultiAccountActive": {
                        "type": "boolean",
                        "description": "Describes if multi account is active",
                        "title": "Is Multi Account Active"
                    },
                    "isPersonalFinanceManagementActive": {
                        "type": "boolean",
                        "description": "Describes if personal finance management (PFM) is active",
                        "title": "Is Personal Finance Management Active"
                    },
                    "hasTwint": {
                        "type": "boolean",
                        "description": "Indicates if Twint has been used at least once on this account in the last 12m",
                        "title": "Indicates if Twint is used"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads accounts",
                "additionalProperties": false
            },
            "AccountAccountAccountCurrency": {
                "type": "object",
                "properties": {
                    "balance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Balance"
                    },
                    "reservedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Reserved amount"
                    },
                    "creditLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Credit limit"
                    },
                    "availableLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Available limit"
                    },
                    "disponibleBalance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Disponible balance"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/Code"
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountAccountTypeRef": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountAuthorizedCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Customers who are authorized on this account",
                        "title": "Authorized customers",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountConnectedAccountsRef": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Accounts connected to this account, list of references to account objects.",
                        "title": "Connected accounts Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountInterestRates": {
                "type": "object",
                "properties": {
                    "validFrom": {
                        "type": "string",
                        "description": "Start of the tarif period",
                        "title": "Start Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "End of the tarif period",
                        "title": "End Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amountFrom": {
                        "type": "number",
                        "description": "Lower limit amount for interest rate",
                        "title": "Amount From"
                    },
                    "amountUntil": {
                        "type": "number",
                        "description": "Upper limit amount for interest rate",
                        "title": "Amount Until"
                    },
                    "interestType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "interestRate": {
                        "type": "number",
                        "description": "Interest rate",
                        "title": "Interest Rate"
                    },
                    "type": {
                        "type": "string",
                        "description": "Interest type (standard / individual)",
                        "title": "Interest Type"
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountPledge": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Pledge amount",
                        "title": "Pledge Amount"
                    },
                    "type": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "creditor": {
                        "type": "string",
                        "description": "Pledge Creditor",
                        "title": "Pledge Creditor"
                    },
                    "clearingNumber": {
                        "type": "string",
                        "description": "Clearing number of pledge creditor",
                        "title": "Pledge Creditor Clearing Number"
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountProvision": {
                "type": "object",
                "properties": {
                    "balancePrivor": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Balance privor"
                    },
                    "balanceRevor": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Balance revor"
                    },
                    "lastWEFWithdrawalDate": {
                        "type": "string",
                        "description": "Date of last WEF withdrawal",
                        "title": "Last WEF Withdrawal",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "paymentRequest": {
                        "type": "string",
                        "description": "Date of payment request",
                        "title": "Date of Payment Request",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "orderOfBeneficiariesDate": {
                        "type": "string",
                        "description": "Date for Order of Beneficiaries (Beg\u00fcnstigungsordnung)",
                        "title": "Date for Order of Beneficiaries",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "accessionDate": {
                        "type": "string",
                        "description": "Accession date",
                        "title": "Accession Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "hasBVG": {
                        "type": "boolean",
                        "description": "1 if it has BVG else 0 (only for PRIVOR)",
                        "title": "Presence of BVG"
                    },
                    "currentRateInPercent": {
                        "type": "number",
                        "description": "Current rate in Percent",
                        "title": "Current rate in Percent"
                    },
                    "continuationDate": {
                        "type": "string",
                        "description": "Continuation Date (only PRIVOR)",
                        "title": "Continuation Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "dispatchability": {
                        "type": "boolean",
                        "description": "Dispatchability",
                        "title": "Dispatchability"
                    },
                    "dispatchabilityDate": {
                        "type": "string",
                        "description": "Dispatchability date",
                        "title": "Dispatchability Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "depositFeeSpecialConditionInPercent": {
                        "type": "number",
                        "description": "Deposit Fee Special Condition in percent",
                        "title": "Deposit Fee Special Condition in Percent"
                    },
                    "hasInsurance": {
                        "type": "boolean",
                        "description": "Existence of insurance",
                        "title": "Existance of Insurance"
                    },
                    "transactionFeeInPercent": {
                        "type": "number",
                        "description": "Transaction fee in percent",
                        "title": "Transaction Fee in Percent"
                    },
                    "legalGuardianAssistance": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "productName": {
                        "type": "string",
                        "description": "Product name",
                        "title": "Product Name"
                    },
                    "lastBuyInDate": {
                        "type": "string",
                        "description": "Date of the last buy-in transaction",
                        "title": "Last Buy-In Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "taxCorrectionYears": {
                        "type": "string",
                        "description": "List of years where tax corrections were already accomplished",
                        "title": "Tax Corrections Year"
                    },
                    "hasForcedBalance": {
                        "type": "boolean",
                        "description": "Indicates if this account has a corresponding forced balance account",
                        "title": "Has Forced Balance"
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountReportingCurrency": {
                "type": "object",
                "properties": {
                    "reservedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Reserved amount"
                    },
                    "creditLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Credit limit"
                    },
                    "balance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Balance"
                    },
                    "disponibleBalance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Disponible balance"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/Code"
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Account suspensions",
                        "title": "Account Suspensions",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountWithdrawalCancellation": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "description": "Start date of a cancellation",
                        "title": "Cancellation Start Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "to": {
                        "type": "string",
                        "description": "End date of a cancellation",
                        "title": "Cancellation End Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Start date of a cancellation",
                        "title": "Cancellation amount"
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountWithdrawalPeriod": {
                "type": "object",
                "properties": {
                    "de": {
                        "type": "string",
                        "description": "Period of the withdrawal amount in german, e.g. monthly, yearly, 30 days,...",
                        "title": "Withdrawal Period in German"
                    },
                    "en": {
                        "type": "string",
                        "description": "Period of the withdrawal amount in english, e.g. monthly, yearly, 30 days,...",
                        "title": "Withdrawal Period in Enlish"
                    },
                    "fr": {
                        "type": "string",
                        "description": "Period of the withdrawal amount in french, e.g. monthly, yearly, 30 days,...",
                        "title": "Withdrawal Period in French"
                    }
                },
                "additionalProperties": false
            },
            "AccountAccountWithdrawalPeriodDesc": {
                "type": "object",
                "properties": {
                    "de": {
                        "type": "string",
                        "description": "Description of the withdrawal amount period in german, e.g. Period, Rolling,...",
                        "title": "Withdrawal Period Description in German"
                    },
                    "en": {
                        "type": "string",
                        "description": "Description of the withdrawal amount period in english, e.g. Period, Rolling,...",
                        "title": "Withdrawal Period Description in English"
                    },
                    "fr": {
                        "type": "string",
                        "description": "Description of the withdrawal amount period in french, e.g. Period, Rolling,...",
                        "title": "Withdrawal Period Description in French"
                    }
                },
                "additionalProperties": false
            },
            "AccountGroupCheck": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "portfolioId": {
                        "type": "string",
                        "description": "Id of the portfolio",
                        "title": "Portfolio Id"
                    },
                    "userId": {
                        "type": "string",
                        "description": "Id of the user",
                        "title": "User Id"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Id of the client ",
                        "title": "Client Id"
                    },
                    "language": {
                        "type": "string",
                        "description": "Language of the client",
                        "title": "Language"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Information about the account group check",
                "additionalProperties": false
            },
            "AccountInstruction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "is needed for persist-fil",
                        "title": "Customer id",
                        "x-recordOriginException": true
                    },
                    "originCustomer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "targetCustomer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "originPortfolio": {
                        "$ref": "#/components/schemas/Accountgroup"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "is needed for persist-fil",
                        "title": "account id",
                        "x-recordOriginException": true
                    },
                    "originAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "originCurrencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "targetAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "instructionType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "validAfter": {
                        "type": "string",
                        "description": "Valid date before",
                        "title": "Valid Date After",
                        "x-recordOriginException": true,
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "Valid date until",
                        "title": "Valid Date Until",
                        "x-recordOriginException": true,
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "note": {
                        "type": "string",
                        "description": "Note",
                        "title": "Note"
                    },
                    "tier": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Account Instructions",
                "required": [
                    "validAfter",
                    "validUntil"
                ],
                "additionalProperties": false
            },
            "AccountMigration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "customerNumber": {
                        "type": "string",
                        "description": "Customer number",
                        "title": "Customer number"
                    },
                    "migrations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Migrations",
                        "items": {
                            "$ref": "#/components/schemas/AccountMigrationAccountMigrationMigrations"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Account migration data (between banks and core systems)",
                "additionalProperties": false
            },
            "AccountMigrationAccountMigrationMigrations": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account ID",
                        "title": "Account ID"
                    },
                    "keyOrigin": {
                        "type": "string",
                        "description": "Key origin",
                        "title": "Key origin"
                    },
                    "keyTarget": {
                        "type": "string",
                        "description": "Key target",
                        "title": "Key target"
                    },
                    "systemOrigin": {
                        "type": "string",
                        "description": "System origin",
                        "title": "System origin"
                    },
                    "systemTarget": {
                        "type": "string",
                        "description": "System target",
                        "title": "System target"
                    },
                    "migrationDate": {
                        "type": "string",
                        "description": "Migration date",
                        "title": "Migration date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "organizationOrigin": {
                        "type": "string",
                        "description": "Organization origin",
                        "title": "Organization origin"
                    },
                    "organizationTarget": {
                        "type": "string",
                        "description": "Organization target",
                        "title": "Organization target"
                    }
                },
                "additionalProperties": false
            },
            "AccountOverdraft": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultantId": {
                        "type": "string",
                        "description": "ID of the consultant, links to /person/consultant/{id}",
                        "title": "Consultant id"
                    },
                    "overdraft": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Overdraft",
                        "items": {
                            "$ref": "#/components/schemas/AccountOverdraftAccountOverdraftOverdraft"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Account overdraft > 1k",
                "additionalProperties": false
            },
            "AccountOverdraftAccountOverdraftOverdraft": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id"
                    },
                    "accountNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account number"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "customerDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer designation"
                    },
                    "currencyIso": {
                        "type": "object",
                        "description": "@todo replace me",
                        "title": "Currency iso",
                        "additionalProperties": true
                    },
                    "overdraft": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Overdraft"
                    }
                },
                "additionalProperties": false
            },
            "AccountPosition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "positionId": {
                        "type": "string",
                        "description": "Position ID within account",
                        "title": "Position ID"
                    },
                    "account": {
                        "$ref": "#/components/schemas/AccountPositionAccountPositionAccount"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "account id as string",
                        "title": "account id"
                    },
                    "instrumentId": {
                        "type": "string",
                        "description": "Instrument ID",
                        "title": "Instrument ID"
                    },
                    "valuationDate": {
                        "type": "string",
                        "description": "Date of the valuation",
                        "title": "Valuation Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "portfolio": {
                        "$ref": "#/components/schemas/AccountPositionAccountPositionPortfolio"
                    },
                    "quantity": {
                        "type": "number",
                        "description": "Quantity",
                        "title": "Quantity"
                    },
                    "value": {
                        "type": "number",
                        "description": "Value in reference currency",
                        "title": "Value in reference currency"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "valueInPortfolioCurrency": {
                        "type": "number",
                        "description": "Value in portfolio currency",
                        "title": "Value in portfolio currency"
                    },
                    "valueInReportingCurrency": {
                        "type": "number",
                        "description": "Value in reporting currency",
                        "title": "Value in reporting currency"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "securityCode": {
                        "type": "integer",
                        "description": "Security code",
                        "title": "Security code"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "Has blocked amount",
                        "title": "Blocked"
                    },
                    "blockedAmount": {
                        "type": "number",
                        "description": "Blocked amount",
                        "title": "Blocked amount"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status",
                        "title": "Status"
                    },
                    "availableAmount": {
                        "type": "number",
                        "description": "Available amount",
                        "title": "Available amount"
                    },
                    "contract": {
                        "$ref": "#/components/schemas/AccountPositionAccountPositionContract"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "custodian": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/AccountPositionAccountPositionCustomer"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "Rubric",
                        "title": "Rubric"
                    },
                    "provision": {
                        "$ref": "#/components/schemas/AccountPositionAccountPositionProvision"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Information about the position of an account",
                "required": [
                    "account",
                    "accountType",
                    "customer",
                    "portfolio",
                    "positionId",
                    "quantity"
                ],
                "additionalProperties": false
            },
            "AccountPositionAccountPositionAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Account",
                        "title": "Account",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "AccountPositionAccountPositionContract": {
                "type": "object",
                "properties": {
                    "productName": {
                        "type": "string",
                        "description": "Contract product name",
                        "title": "Contract product name"
                    },
                    "productNameExtension": {
                        "type": "string",
                        "description": "Contract product name extension",
                        "title": "Contract product name extension"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "beginDate": {
                        "type": "string",
                        "description": "Contract begin date",
                        "title": "Contract begin date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Contract end date",
                        "title": "Contract end date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "accruedInterest": {
                        "type": "number",
                        "description": "Contract accrued interest",
                        "title": "Contract accrued interest"
                    },
                    "accIntInReportingCcy": {
                        "type": "number",
                        "description": "Contract accrued interest reporting currency",
                        "title": "Contract accrued interest reporting currency"
                    }
                },
                "additionalProperties": false
            },
            "AccountPositionAccountPositionCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Customer",
                        "title": "Customer",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "AccountPositionAccountPositionPortfolio": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Account group",
                        "title": "Portfolio",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/group\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Accountgroup"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "AccountPositionAccountPositionProvision": {
                "type": "object",
                "properties": {
                    "valuePrivor": {
                        "type": "number",
                        "description": "Privor value",
                        "title": "Privor Value"
                    },
                    "valueRevor": {
                        "type": "number",
                        "description": "FZ value",
                        "title": "FZ Value"
                    },
                    "product": {
                        "type": "string",
                        "description": "Provision product",
                        "title": "Provision Product"
                    }
                },
                "additionalProperties": false
            },
            "AccountPositionTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "id which links to /person/customer",
                        "title": "Customer ID"
                    },
                    "accountPositionId": {
                        "type": "string",
                        "description": "id which links to /account/position",
                        "title": "Account Position ID"
                    },
                    "isEarning": {
                        "type": "boolean",
                        "description": "Defines if the transaction is a trade or an earning",
                        "title": "Is Earning?"
                    },
                    "tradingDate": {
                        "type": "string",
                        "description": "Date of the trade",
                        "title": "Trading Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "settlementDate": {
                        "type": "string",
                        "description": "Date of the settlement of the trade",
                        "title": "Settlement Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "quantity": {
                        "type": "number",
                        "description": "Quantity",
                        "title": "Quantity"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "value": {
                        "type": "number",
                        "description": "Value in reference currency",
                        "title": "Value in reference currency"
                    },
                    "text": {
                        "type": "string",
                        "description": "Description of the trade/earning",
                        "title": "Text"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Transactions of an account position (stock exchange trades, dividends, etc.)",
                "additionalProperties": false
            },
            "AccountStatement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "number": {
                        "type": "integer",
                        "description": "Account number",
                        "title": "Account Number"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "accountPosition": {
                        "$ref": "#/components/schemas/AccountPosition"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start date of closing period (exclusive)",
                        "title": "Start Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Closing-valuta, end date of the closing period (inclusive)",
                        "title": "End Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "bookingDate": {
                        "type": "string",
                        "description": "Booking date",
                        "title": "Booking Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "applicationType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "statementType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "statementReason": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "accountCurrency": {
                        "$ref": "#/components/schemas/AccountStatementAccountStatementAccountCurrency"
                    },
                    "calculationDetails": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Calculation details",
                        "items": {
                            "$ref": "#/components/schemas/AccountStatementAccountStatementCalculationDetails"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads account statments",
                "additionalProperties": false
            },
            "AccountStatementAccountStatementAccountCurrency": {
                "type": "object",
                "properties": {
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Account balance",
                        "title": "Account Balance"
                    }
                },
                "additionalProperties": false
            },
            "AccountStatementAccountStatementCalculationDetails": {
                "type": "object",
                "properties": {
                    "startDate": {
                        "type": "string",
                        "description": "Start of the calculation period (exclusiv)",
                        "title": "Start Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End of the calculation period (inclusive)",
                        "title": "End Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "days": {
                        "type": "integer",
                        "description": "Number of days",
                        "title": "Number of Days"
                    },
                    "calculationType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "calculationBase": {
                        "type": "number",
                        "description": "Relevant amount",
                        "title": "Calculation Base"
                    },
                    "interestRate": {
                        "type": "number",
                        "description": "Applicable percentage",
                        "title": "Interest Rate"
                    },
                    "fixedRate": {
                        "type": "number",
                        "description": "Fixed amount, used if the price was not loaded as percentage but as fix amount",
                        "title": "Fixed Rate"
                    },
                    "rateBorder": {
                        "type": "number",
                        "description": "Amount up to which this record is valid. If tariff currency <> account/contract currency, conversion from tariff currency to account/contract currency is required.",
                        "title": "Rate Border"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Calculated amount per calculation period and stage.",
                        "title": "Amount"
                    }
                },
                "additionalProperties": false
            },
            "AccountTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "account": {
                        "$ref": "#/components/schemas/AccountTransactionAccountTransactionAccount"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "account id as string",
                        "title": "account id"
                    },
                    "valuta": {
                        "type": "string",
                        "description": "Valuta",
                        "title": "Valuta",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "product": {
                        "type": "string",
                        "description": "Product",
                        "title": "Product"
                    },
                    "transactionNumber": {
                        "type": "integer",
                        "description": "Transaction number",
                        "title": "Transaction Number"
                    },
                    "transactionId": {
                        "type": "string",
                        "description": "unique id of the transaction",
                        "title": "Transaction id"
                    },
                    "description": {
                        "type": "string",
                        "description": "Transaction Description",
                        "title": "Description"
                    },
                    "valueInAccountCurrency": {
                        "type": "number",
                        "description": "Value In Account Currency",
                        "title": "Value in account currency"
                    },
                    "valueInReportingCurrency": {
                        "type": "number",
                        "description": "Value In Reporting Currency",
                        "title": "Value in reporting currency"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Valuta Year",
                        "title": "Year"
                    },
                    "text": {
                        "type": "string",
                        "description": "Transaction Text",
                        "title": "Text"
                    },
                    "bookingDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Booking Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "bookingType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "pveBooking": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "PVE Booking"
                    },
                    "systemOrigin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Core System Type"
                    },
                    "isTwint": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is Twint?"
                    },
                    "isSalary": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is salary payment?"
                    },
                    "_retentionBaseDate": {
                        "type": "string",
                        "description": "Rention base date",
                        "title": "Rention Base Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Transaction details for an account",
                "required": [
                    "account"
                ],
                "additionalProperties": false
            },
            "AccountTransactionAccountTransactionAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Account",
                        "title": "Account",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "AccountTurnover": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the account owner, links to /person/customer/{id}",
                        "title": "Customer id"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "ID of the account",
                        "title": "Account id"
                    },
                    "expenses": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Expenses"
                    },
                    "income": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Income"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Yearly turnover by account",
                "additionalProperties": false
            },
            "AccountWithdrawal": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "Unique id of the account",
                        "title": "Account ID"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Withdrawal/cancellation amount",
                        "title": "Amount"
                    },
                    "withdrawalPeriodStart": {
                        "type": "string",
                        "description": "First date, at which a withdrawal can be made",
                        "title": "Withdrawal Period Start Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "withdrawalPeriodEnd": {
                        "type": "string",
                        "description": "Last date, at which a withdrawal can be made",
                        "title": "Withdrawal Period End Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Stores withdrawals/cancellations of accounts.",
                "required": [
                    "accountId",
                    "withdrawalPeriodEnd",
                    "withdrawalPeriodStart"
                ],
                "additionalProperties": false
            },
            "Accountgroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "Formatted account number",
                        "title": "Formatted Number"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "consultant": {
                        "$ref": "#/components/schemas/Consultant"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date where account group was created",
                        "title": "Creation Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "investmentStrategy": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "Modification date of the account group",
                        "title": "Modification Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "currencyIsoRef": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "serviceClass": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "portfolioKind": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "Rubric",
                        "title": "Rubric"
                    },
                    "rubricExtension": {
                        "type": "string",
                        "description": "Rubric Extension",
                        "title": "Rubric Extension"
                    },
                    "blockingReason": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "pledge": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pledge",
                        "items": {
                            "$ref": "#/components/schemas/AccountgroupAccountgroupPledge"
                        }
                    },
                    "balanceOnly": {
                        "type": "boolean",
                        "description": "True, if this record is for the balance module",
                        "title": "Balance Only"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "True, if the portfolio is active",
                        "title": "Is Active"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads account groups",
                "required": [
                    "creationDate"
                ],
                "additionalProperties": false
            },
            "AccountgroupAccountgroupPledge": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Pledge amount",
                        "title": "Pledge Amount"
                    },
                    "type": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "creditor": {
                        "type": "string",
                        "description": "Pledge Creditor",
                        "title": "Pledge Creditor"
                    }
                },
                "additionalProperties": false
            },
            "Activity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "relationId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Relation id"
                    },
                    "creator": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creator"
                    },
                    "account": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Created at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "contactDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Contact date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "dueDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Due date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "consultantId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Consultant id"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "orderOrigin": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "noteTopic": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "noteType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "initiative": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "noteQuality": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "note": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Note"
                    },
                    "recommendedProduct": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Recommended product",
                        "items": {
                            "$ref": "#/components/schemas/Code"
                        }
                    },
                    "decision": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Decision"
                    },
                    "nextContact": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Next contact",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "consultantFirstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Consultant first name"
                    },
                    "consultantLastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Consultant last name"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/ActivityActivityCustomer"
                    },
                    "sourceSystem": {
                        "type": "string",
                        "description": "string which describes the source system of the record",
                        "title": "Source system"
                    },
                    "internalParticipantsConsultants": {
                        "type": "array",
                        "description": "an array of employee refs (consultants)",
                        "title": "Internal participants consultants",
                        "items": {
                            "$ref": "#/components/schemas/Consultant"
                        }
                    },
                    "externalParticipants": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "External participants",
                        "items": {
                            "$ref": "#/components/schemas/ActivityActivityExternalParticipants"
                        }
                    },
                    "externalParticipantsCustomers": {
                        "type": "string",
                        "description": "the value of the externalParticipants free text area",
                        "title": "External participants customers"
                    },
                    "massUploadFile": {
                        "$ref": "#/components/schemas/ActivityActivityMassUploadFile"
                    },
                    "parentActivity": {
                        "$ref": "#/components/schemas/ActivityActivityParentActivity"
                    },
                    "linkedLeadIds": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Linked lead ids",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workguideData": {
                        "$ref": "#/components/schemas/ActivityActivityWorkguideData"
                    },
                    "assigneeId": {
                        "type": "string",
                        "description": "User id (from /person/consultant/) this activity is assigned to",
                        "title": "Assignee Id"
                    },
                    "isSticky": {
                        "type": "boolean",
                        "description": "Is this note sticky (should be displayed on top of the list)",
                        "title": "Is sticky"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Activity service to hold manipulated customerNotes and some additional fields",
                "additionalProperties": false
            },
            "ActivityActivityCustomer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Id"
                    },
                    "consultantId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Consultant id"
                    },
                    "legalAddress": {
                        "$ref": "#/components/schemas/CustomerAddress"
                    },
                    "designation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Designation"
                    },
                    "shortDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Short designation"
                    },
                    "customerNumberAlternate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer number alternate"
                    }
                },
                "additionalProperties": false
            },
            "ActivityActivityExternalParticipants": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the record depending on its type",
                        "title": "Record id"
                    },
                    "designation": {
                        "type": "string",
                        "description": "Designation of the participant",
                        "title": "Customer designation"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the participant (e.g. owner, powerOfAttorney, custom...)",
                        "title": "Participant type"
                    }
                },
                "additionalProperties": false
            },
            "ActivityActivityMassUploadFile": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to csv file in fileservice when activity was uploaded by mass-upload",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ActivityActivityParentActivity": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to parent activity when this activity was copied",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/work\\/activity\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Activity"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ActivityActivityWorkguideData": {
                "type": "object",
                "properties": {
                    "workguideId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Workguide id"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "subStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "rejectReasonCode": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "history": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "History",
                        "items": {
                            "$ref": "#/components/schemas/ActivityActivityWorkguideDataHistory"
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Created at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "formData": {
                        "type": "object",
                        "description": "key of the form element",
                        "title": "Form data",
                        "additionalProperties": true
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "Reason if the workguide was rejected",
                        "title": "Reject reason"
                    }
                },
                "additionalProperties": false
            },
            "ActivityActivityWorkguideDataHistory": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "subStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Modified at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "modifiedByConsultantId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Modified by consultant id"
                    },
                    "rejectReason": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Reject reason"
                    },
                    "rejectReasonCode": {
                        "$ref": "#/components/schemas/Code"
                    }
                },
                "additionalProperties": false
            },
            "Advertising": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "Customer ID",
                        "title": "Customer id"
                    },
                    "useDefaultDispatching": {
                        "type": "boolean",
                        "description": "Use default address for shipment",
                        "title": "Use default dispatching"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CustomerAddress"
                    },
                    "document": {
                        "type": "string",
                        "description": "Document type of the advertisement",
                        "title": "Document"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "How many copies will be sent to the customer",
                        "title": "Quantity"
                    },
                    "note": {
                        "type": "string",
                        "description": "Personal note for the advertisement shipment",
                        "title": "Note"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Start date of the advertisement",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "End date of the advertisement",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Advertising",
                "additionalProperties": false
            },
            "AgendaConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "collapsed": {
                        "type": "boolean",
                        "description": "Collapsed State of the section.",
                        "title": "Collapsed state"
                    },
                    "imageKey": {
                        "type": "string",
                        "description": "Identifies the image for this section.",
                        "title": "Image identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Defines the position of the section in a list.",
                        "title": "Order (section)"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/AgendaConfigAgendaConfigItems"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Configure the ordered and colapsable sections of a meeting agenda, corresponding imagery and agenda-items.",
                "required": [
                    "collapsed",
                    "name",
                    "order"
                ],
                "additionalProperties": false
            },
            "AgendaConfigAgendaConfigItems": {
                "type": "object",
                "properties": {
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "isChecked": {
                        "type": "boolean",
                        "description": "Defines, if the item is checked or not.",
                        "title": "Checked state of the item"
                    },
                    "isOwnItem": {
                        "type": "boolean",
                        "description": "Defines, if the item is self created or not.",
                        "title": "Own Item"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Defines the position of the item in a list.",
                        "title": "Order (item)"
                    }
                },
                "required": [
                    "isChecked",
                    "isOwnItem"
                ],
                "additionalProperties": false
            },
            "AnalyticalAuditing-entris-bank-user-summary": {
                "type": "array",
                "properties": [],
                "title": "Entris Bank User Summary",
                "description": "Each document contains user statistics. Banks can be distinguished by the field webDomain",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "title": "ID",
                            "description": "Session document id",
                            "type": "string"
                        },
                        "username": {
                            "title": "Username",
                            "description": "User/Login name",
                            "type": "string"
                        },
                        "usernameBackend": {
                            "title": "Backend Username",
                            "description": "The name of the user in the backend",
                            "type": "string"
                        },
                        "webDomain": {
                            "title": "Web domain",
                            "description": "The banks web domain. Can be used to associate users to banks",
                            "type": "string"
                        },
                        "isActivated": {
                            "title": "User Activation Status",
                            "description": "Informs if the user is activated",
                            "type": "boolean"
                        },
                        "activatedChangeAt": {
                            "title": "Activation/Deactivation Change Date",
                            "description": "Informs when the user was activated or deactivated",
                            "type": "string",
                            "format": "date-time"
                        },
                        "isApproved": {
                            "title": "User Approval Status",
                            "description": "Informs if the user was approved",
                            "type": "boolean"
                        },
                        "approvedChangeAt": {
                            "title": "Approval/Disapproval Change Date",
                            "description": "Informs when the user was approved or disapproved",
                            "type": "string",
                            "format": "date-time"
                        },
                        "isAdmin": {
                            "title": "User Admin Status",
                            "description": "Informs if the user has admin rights",
                            "type": "boolean"
                        },
                        "lastLogin": {
                            "title": "Last Login",
                            "description": "Last time the user was logged in",
                            "type": "string",
                            "format": "date-time"
                        },
                        "upstreamUsername": {
                            "title": "Upstream Username",
                            "description": "upstream username (matches with username on /person/consultant/)",
                            "type": "string"
                        }
                    }
                }
            },
            "AnalyticalAuditing-requests": {
                "type": "array",
                "properties": [],
                "title": "Request audit log",
                "description": "Each entry represents one authenticated request that was done by users.",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "title": "ID",
                            "description": "ID of this request",
                            "type": "string"
                        },
                        "username": {
                            "title": "Username",
                            "description": "Username",
                            "type": "string"
                        },
                        "createdAt": {
                            "title": "Created at",
                            "description": "Created at",
                            "type": "string",
                            "format": "date-time"
                        },
                        "method": {
                            "title": "Method",
                            "description": "HTTP method that was used in this request (GET, PUT, PATCH and so on)",
                            "type": "string"
                        },
                        "requestUri": {
                            "title": "Request URI",
                            "description": "URI that was requested including any GET params",
                            "type": "string"
                        },
                        "userAgent": {
                            "title": "User agent",
                            "description": "Content of the User-Agent header that was used in the request",
                            "type": "string"
                        },
                        "responseCode": {
                            "title": "Response code",
                            "description": "Response code that was sent to the user in the response to this request",
                            "type": "int"
                        },
                        "requestBody": {
                            "title": "Request body",
                            "description": "Request body that the user sent in this request, encoded as a string.",
                            "type": "string"
                        },
                        "requestTimeS": {
                            "title": "Request time",
                            "description": "Time in seconds that this request took to execute",
                            "type": "number"
                        }
                    }
                }
            },
            "AnalyticalAuditing-sessions-active": {
                "type": "array",
                "properties": [],
                "title": "Currently active sessions",
                "description": "Each record is one session, one user can have multiple open sessions.",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "title": "ID",
                            "description": "Session record id",
                            "type": "string"
                        },
                        "username": {
                            "title": "Username",
                            "description": "User that opened that session",
                            "type": "string"
                        },
                        "keyCreatedAt": {
                            "title": "Created at",
                            "description": "When this session was opened",
                            "type": "string",
                            "format": "date-time"
                        },
                        "keyRefreshedAt": {
                            "title": "Refreshed at",
                            "description": "Last request of the session",
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                }
            },
            "AnalyticalAuditing-users-daily-summary": {
                "type": "array",
                "properties": [],
                "title": "Daily user summary",
                "description": "One entry per user per day, showing stats for that user activity for the given day.",
                "items": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "title": "Username",
                            "description": "Username",
                            "type": "string"
                        },
                        "firstRequest": {
                            "title": "First request",
                            "description": "Datetime of the first request the user made that day",
                            "type": "string",
                            "format": "date-time"
                        },
                        "lastRequest": {
                            "title": "Last request",
                            "description": "Datetime of the last request the user made that day",
                            "type": "string",
                            "format": "date-time"
                        },
                        "year": {
                            "title": "Year",
                            "description": "Year that record relates to",
                            "type": "int"
                        },
                        "month": {
                            "title": "Month",
                            "description": "Month that record relates to",
                            "type": "int"
                        },
                        "day": {
                            "title": "Day",
                            "description": "Day that record relates to",
                            "type": "int"
                        },
                        "requestCount": {
                            "title": "Request count",
                            "description": "Number of requests that user did that day (excluding OPTIONS)",
                            "type": "int"
                        },
                        "sessionCount": {
                            "title": "Session count",
                            "description": "Number of sessions involved that day.",
                            "type": "int"
                        },
                        "methods": {
                            "title": "Methods",
                            "description": "Array of HTTP methods that user executed that day (excluding OPTIONS)",
                            "type": "array"
                        }
                    }
                }
            },
            "AnalyticalAuditing-users-historical": {
                "type": "array",
                "properties": [],
                "title": "Historical user count",
                "description": "Shows how many users were (and are now) active on a given day.",
                "items": {
                    "type": "object",
                    "properties": {
                        "year": {
                            "title": "Year",
                            "description": "Year of entry",
                            "type": "int"
                        },
                        "month": {
                            "title": "Month",
                            "description": "Month of entry",
                            "type": "int"
                        },
                        "day": {
                            "title": "Day",
                            "description": "Day of entry",
                            "type": "int"
                        },
                        "activeUserCount": {
                            "title": "Count",
                            "description": "Active user count for that day",
                            "type": "int"
                        }
                    }
                }
            },
            "AnalyticalBank-info": {
                "type": "array",
                "properties": [],
                "title": "Bank info",
                "description": "Lists bank info",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "title": "ID",
                            "description": "Document id",
                            "type": "string"
                        },
                        "webDomain": {
                            "title": "Web domain",
                            "description": "The banks web domain",
                            "type": "string"
                        },
                        "bankname": {
                            "title": "Bank Name",
                            "description": "Bank name",
                            "type": "string"
                        }
                    }
                }
            },
            "AnalyticalCodegroup": {
                "type": "array",
                "properties": [],
                "title": "Code Group",
                "description": "Name of the Code Group",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "title": "ID",
                            "description": "Unique identifier",
                            "type": "string"
                        },
                        "codeGroup": {
                            "title": "Code Group name",
                            "description": "Name of the Code Group",
                            "type": "string"
                        }
                    }
                }
            },
            "AnalyticalConsultant-lead-summary": {
                "type": "array",
                "properties": [],
                "title": "Lead summary",
                "description": "Summary (count) of leads by type and score",
                "items": {
                    "type": "object",
                    "properties": {
                        "orders": {
                            "title": "Orders",
                            "description": "Orders grouped by score (lower boundry 0, 60, 80)",
                            "type": "object"
                        },
                        "tasks": {
                            "title": "Tasks",
                            "description": "Tasks grouped by score (lower boundry 0, 60, 80)",
                            "type": "object"
                        },
                        "potentials": {
                            "title": "Potential",
                            "description": "Potentials grouped by score (lower boundry 0, 60, 80)",
                            "type": "object"
                        },
                        "unqualified": {
                            "title": "Unqualified",
                            "description": "Unqualified leads",
                            "type": "integer"
                        }
                    }
                }
            },
            "AnalyticalConsultant-workbench-summary": {
                "type": "array",
                "properties": [],
                "title": "Workbench summary",
                "description": "Summary (count) of activities by score",
                "items": {
                    "type": "object",
                    "properties": {
                        "low": {
                            "title": "Low",
                            "description": "Low priority activities (score lt 60)",
                            "type": "integer"
                        },
                        "mid": {
                            "title": "Mid",
                            "description": "Mid priority activities (score gte 60 lt 80)",
                            "type": "integer"
                        },
                        "high": {
                            "title": "High",
                            "description": "High priority activities (score gte 80)",
                            "type": "integer"
                        }
                    }
                }
            },
            "AnalyticalConsultantsearch": {
                "type": "array",
                "properties": [],
                "title": "Consultant by iban",
                "description": "Consultant by iban"
            },
            "AnalyticalContractnote": {
                "type": "array",
                "properties": [],
                "title": "example by customer id",
                "description": "example customer id"
            },
            "AnalyticalCustomer-profile-completion": {
                "type": "object",
                "properties": []
            },
            "AnalyticalCustomerbirthdays": {
                "type": "array",
                "properties": [],
                "title": "Customer birthday list",
                "description": "Customer birthday list",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "title": "ID",
                            "description": "Unique identifier",
                            "type": "string"
                        },
                        "birthDate": {
                            "title": "birthDate",
                            "description": "Customer birth date",
                            "type": "string",
                            "format": "date-time"
                        },
                        "ageThisYear": {
                            "title": "ageThisYear",
                            "description": "Age the customer has this year (regardless if he has had birthday already this year)",
                            "type": "integer"
                        },
                        "birthDay": {
                            "title": "birthDay",
                            "description": "The birth day (without year) for clients to display.",
                            "type": "string"
                        },
                        "age": {
                            "title": "age",
                            "description": "The age the customer has right now (accounting for birthday)",
                            "type": "integer"
                        },
                        "hasBirthdayToday": {
                            "title": "hasBirthdayToday",
                            "description": "If the customer has birthday today",
                            "type": "boolean"
                        },
                        "hasHadBirthdayAlready": {
                            "title": "hasHadBirthdayAlready",
                            "description": "If the customer has had birthday this year",
                            "type": "boolean"
                        },
                        "customer": {
                            "title": "customer",
                            "description": "Object containing some properties of the customer.",
                            "type": "object"
                        }
                    }
                }
            },
            "AnalyticalCustomerbook": {
                "type": "array",
                "properties": [],
                "title": "Customerbook",
                "description": "Data from CustomerBook enriched with data from CustomerDetail"
            },
            "AnalyticalCustomerbook-lead-count": {
                "type": "array",
                "properties": [],
                "title": "Customerbook lead count",
                "description": "Count of leads for all customers of a consultant",
                "items": {
                    "type": "object",
                    "properties": {
                        "consultantUsername": {
                            "title": "Consultant username",
                            "description": "Username of the consultant",
                            "type": "string"
                        },
                        "customers": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "customerId": {
                                        "type": "string",
                                        "description": "Id of the customer"
                                    },
                                    "customerNumberAlternate": {
                                        "type": "string",
                                        "description": "Display number of the customer"
                                    },
                                    "leadCount": {
                                        "type": "number",
                                        "description": "Count of leads for the given customer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AnalyticalCustomergroup": {
                "type": "array",
                "properties": [],
                "title": "Customer by group id",
                "description": "Customer by group id",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "title": "ID",
                            "description": "Unique identifier",
                            "type": "string"
                        },
                        "consultantId": {
                            "title": "consultantId",
                            "description": "ID of the consultant",
                            "type": "string"
                        },
                        "groupId": {
                            "title": "groupId",
                            "description": "ID of the customer group (Code)",
                            "type": "string"
                        },
                        "customerCount": {
                            "title": "customerCount",
                            "description": "How many customers this consultant has in this group",
                            "type": "integer"
                        },
                        "customerCountActive": {
                            "title": "customerCountActive",
                            "description": "How many active customers this consultant has in this group",
                            "type": "integer"
                        },
                        "group": {
                            "title": "group",
                            "description": "Object containing the group Code.",
                            "type": "object"
                        }
                    }
                }
            },
            "AnalyticalCustomersegment": {
                "type": "array",
                "properties": [],
                "title": "Customer by group id",
                "description": "Customer by group id",
                "items": {
                    "type": "object",
                    "properties": {
                        "_id": {
                            "title": "ID",
                            "description": "Unique identifier",
                            "type": "string"
                        },
                        "consultantId": {
                            "title": "consultantId",
                            "description": "ID of the consultant",
                            "type": "string"
                        },
                        "segmentId": {
                            "title": "segmentId",
                            "description": "ID of the customer segment (Code)",
                            "type": "string"
                        },
                        "customerCount": {
                            "title": "customerCount",
                            "description": "How many customers this consultant has in this segment",
                            "type": "integer"
                        },
                        "customerCountActive": {
                            "title": "customerCountActive",
                            "description": "How many active customers this consultant has in this group",
                            "type": "integer"
                        },
                        "segment": {
                            "title": "segment",
                            "description": "Object containing the segment Code.",
                            "type": "object"
                        }
                    }
                }
            },
            "AnalyticalFinancing-estimation-explicit": {
                "type": "object",
                "properties": []
            },
            "AnalyticalFinancing-estimation-iazi": {
                "type": "array",
                "properties": [],
                "title": "IAZI estimations",
                "description": "Each record is one session, one user can have multiple open sessions."
            },
            "AnalyticalFinancingexpress": {
                "type": "array",
                "properties": [],
                "title": "Customerdata for financing express",
                "description": "Customerdata for financing express",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "title": "ID",
                            "description": "Unique identifier",
                            "type": "string"
                        },
                        "birthDate": {
                            "title": "customerId",
                            "description": "Customer Id",
                            "type": "string"
                        },
                        "dbiiRollingLast12Month": {
                            "type": "number",
                            "title": "sum of DBII of the last 12 month",
                            "description": "sum of DBII of the last 12 month",
                            "recordOriginException": false
                        },
                        "dbiiExtrapolated": {
                            "type": "number",
                            "title": "Extrapolated DBII",
                            "description": "Extrapolated DBII out of the trend of the last 12 month",
                            "recordOriginException": false
                        }
                    }
                }
            },
            "AnalyticalTranslation-namespaces": {
                "type": "array",
                "properties": [],
                "title": "Array of namespaces",
                "description": "Filters distinct by namespace"
            },
            "AnalyticalWorkguide-netted-accounts": {
                "type": "object",
                "properties": []
            },
            "AntiMoneyLaundering": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amlo": {
                        "$ref": "#/components/schemas/AntiMoneyLaunderingAntiMoneyLaunderingAmlo"
                    },
                    "pep": {
                        "$ref": "#/components/schemas/AntiMoneyLaunderingAntiMoneyLaunderingPep"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Anti Money Laundering Ordinance",
                "additionalProperties": false
            },
            "AntiMoneyLaunderingAntiMoneyLaunderingAmlo": {
                "type": "object",
                "properties": {
                    "category": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "points": {
                        "type": "integer",
                        "description": "Number of points to determine risk category",
                        "title": "Number of Points"
                    },
                    "date": {
                        "type": "string",
                        "description": "Date and time of approval, last reappraisal",
                        "title": "Date and time of approval",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    }
                },
                "additionalProperties": false
            },
            "AntiMoneyLaunderingAntiMoneyLaunderingPep": {
                "type": "object",
                "properties": {
                    "system": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "user": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "date": {
                        "type": "string",
                        "description": "Last verification timestamp of a politically exposed person",
                        "title": "Last Verification Timestamp of a Politically Exposed Person",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    }
                },
                "additionalProperties": false
            },
            "App": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "showInMenu": {
                        "type": "boolean",
                        "description": "Define if an app should be exposed on the top level menu.",
                        "title": "Show in Menu"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order sorting field",
                        "title": "Order"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "A graviton based app.",
                "required": [
                    "name",
                    "showInMenu"
                ],
                "additionalProperties": false
            },
            "BalanceCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "title": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "alternativeTitle": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Category order",
                        "title": "Category Order"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryCoreType"
                        }
                    },
                    "type": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "availabilityType": {
                        "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryAvailabilityType"
                    },
                    "default": {
                        "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryDefault"
                    },
                    "creationClass": {
                        "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryCreationClass"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "creationClass",
                    "title",
                    "type"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryAvailabilityType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Availability type of the Category",
                        "title": "Availability type of the Category",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "References to categories in the core System",
                        "title": "References to Categories in the Core System",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryCreationClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Output class of the category",
                        "title": "Creation Class of the category",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryDefault": {
                "type": "object",
                "properties": {
                    "displayClass": {
                        "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryDefaultDisplayClass"
                    },
                    "detailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail group",
                        "items": {
                            "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryDefaultDetailGroup"
                        }
                    },
                    "availabilityDetailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Availability detail group",
                        "items": {
                            "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryDefaultAvailabilityDetailGroup"
                        }
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/BalanceCategoryBalanceCategoryDefaultOutputClass"
                    }
                },
                "required": [
                    "displayClass",
                    "outputClass"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryDefaultAvailabilityDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Detail Group for the availability",
                        "title": "Detail Group for the availability",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryDefaultDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Detail group of the category",
                        "title": "Detail Group of the Category",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryDefaultDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Display class of the category",
                        "title": "Display Class of the Category",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryBalanceCategoryDefaultOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Output class of the category",
                        "title": "Output Class of the Category",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryMapping": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Category order",
                        "title": "Mapping Order"
                    },
                    "category": {
                        "$ref": "#/components/schemas/BalanceCategoryMappingBalanceCategoryMappingCategory"
                    },
                    "creationClass": {
                        "$ref": "#/components/schemas/BalanceCategoryMappingBalanceCategoryMappingCreationClass"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/BalanceCategoryMappingBalanceCategoryMappingAssetSegment"
                    },
                    "displayClass": {
                        "$ref": "#/components/schemas/BalanceCategoryMappingBalanceCategoryMappingDisplayClass"
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/BalanceCategoryMappingBalanceCategoryMappingOutputClass"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "category",
                    "creationClass"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryMappingBalanceCategoryMappingAssetSegment": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "AssetSegment to the category",
                        "title": "AssetSegment",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BalanceCategoryMappingBalanceCategoryMappingCategory": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to the Balance Category",
                        "title": "category link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/balance\\/category\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BalanceCategory"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryMappingBalanceCategoryMappingCreationClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Creation class to the category",
                        "title": "Creation Class",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BalanceCategoryMappingBalanceCategoryMappingDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Display class to the creation class",
                        "title": "Display Class",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BalanceCategoryMappingBalanceCategoryMappingOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Output class to the creation class",
                        "title": "Output Class",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasicExchangeRate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "currencyFrom": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currencyFromIsoCode": {
                        "type": "string",
                        "description": "ISO Code of the from currency",
                        "title": "Currency From ISO Code"
                    },
                    "currencyTo": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currencyToIsoCode": {
                        "type": "string",
                        "description": "ISO Code of the to currency",
                        "title": "Currency To ISO Code"
                    },
                    "asOfDate": {
                        "type": "string",
                        "description": "When this rate was defined",
                        "title": "As of date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "exchangeRateUnit": {
                        "type": "number",
                        "description": "Unit that has to be applied to this rate",
                        "title": "Rate unit"
                    },
                    "rate": {
                        "$ref": "#/components/schemas/BasicExchangeRateBasicExchangeRateRate"
                    },
                    "priceForOne": {
                        "$ref": "#/components/schemas/BasicExchangeRateBasicExchangeRatePriceForOne"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Exchange rates with calculated rates based on prespecified exchange types.",
                "additionalProperties": false
            },
            "BasicExchangeRateBasicExchangeRatePriceForOne": {
                "type": "object",
                "properties": {
                    "physical": {
                        "type": "number",
                        "description": "Price for one item of the 'to' currency in the 'from' currency based on the rate. In the case of an cross exchange; this is the same as the rate.",
                        "title": "Price for one piece physical"
                    },
                    "physicalBig": {
                        "type": "number",
                        "description": "Price for one item of the 'to' currency in the 'from' currency based on the rate. In the case of an cross exchange; this is the same as the rate.",
                        "title": "Price for one piece physical big"
                    },
                    "virtual": {
                        "type": "number",
                        "description": "Price for one item of the 'to' currency in the 'from' currency based on the rate. In the case of an cross exchange; this is the same as the rate.",
                        "title": "Price for one piece virtual"
                    },
                    "virtualBig": {
                        "type": "number",
                        "description": "Price for one item of the 'to' currency in the 'from' currency based on the rate. In the case of an cross exchange; this is the same as the rate.",
                        "title": "Price for one piece virtual big"
                    }
                },
                "additionalProperties": false
            },
            "BasicExchangeRateBasicExchangeRateRate": {
                "type": "object",
                "properties": {
                    "physical": {
                        "type": "number",
                        "description": "Calculated rate for physical paper exchange",
                        "title": "Rate for physical exchange"
                    },
                    "physicalBig": {
                        "type": "number",
                        "description": "Calculated rate for physical exchange (big), after a user defined threshold.",
                        "title": "Rate for big physical exchange"
                    },
                    "virtual": {
                        "type": "number",
                        "description": "Calculated rate for virtual exchange",
                        "title": "Rate for virtual exchange"
                    },
                    "virtualBig": {
                        "type": "number",
                        "description": "Calculated rate for virtual exchange (big), after a user defined threshold.",
                        "title": "Rate for big virtual exchange"
                    }
                },
                "additionalProperties": false
            },
            "BasicIntermediateView": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "description": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "product": {
                        "$ref": "#/components/schemas/BasicIntermediateViewBasicIntermediateViewProduct"
                    },
                    "image": {
                        "$ref": "#/components/schemas/BasicIntermediateViewBasicIntermediateViewImage"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Defines the intermediate view of basic services products.",
                "required": [
                    "description",
                    "product"
                ],
                "additionalProperties": false
            },
            "BasicIntermediateViewBasicIntermediateViewImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Promotion image",
                        "title": "Image",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasicIntermediateViewBasicIntermediateViewProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to the product.",
                        "title": "Product",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/BasicProductBasicProductName"
                    },
                    "category": {
                        "$ref": "#/components/schemas/BasicProductBasicProductCategory"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Defines the position of the investment product in a list.",
                        "title": "Order"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/BasicProductBasicProductCoreType"
                        }
                    },
                    "maxOccurrence": {
                        "type": "integer",
                        "description": "Allowed maximum for this product.",
                        "title": "Order"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Defines the basic services products.",
                "required": [
                    "category",
                    "name"
                ],
                "additionalProperties": false
            },
            "BasicProductAddition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "$ref": "#/components/schemas/BasicProductAdditionBasicProductAdditionProduct"
                    },
                    "displayClass": {
                        "$ref": "#/components/schemas/BasicProductAdditionBasicProductAdditionDisplayClass"
                    },
                    "detailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail group",
                        "items": {
                            "$ref": "#/components/schemas/BasicProductAdditionBasicProductAdditionDetailGroup"
                        }
                    },
                    "changeType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Change type",
                        "items": {
                            "$ref": "#/components/schemas/BasicProductAdditionBasicProductAdditionChangeType"
                        }
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/BasicProductAdditionBasicProductAdditionOutputClass"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Defines the basic services products addition.",
                "required": [
                    "displayClass",
                    "outputClass",
                    "product"
                ],
                "additionalProperties": false
            },
            "BasicProductAdditionBasicProductAdditionChangeType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines the for this product allowed mutations",
                        "title": "mutation links",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasicProductAdditionBasicProductAdditionDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines one or multiple groups shown on the detail card",
                        "title": "detail group links",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductAdditionBasicProductAdditionDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines the information shown on the detail card",
                        "title": "display class link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductAdditionBasicProductAdditionOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines the information shown in the output",
                        "title": "output class link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductAdditionBasicProductAdditionProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to the Product this addition belongs to",
                        "title": "product link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductBasicProductCategory": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines to which category this product belongs to",
                        "title": "Category Link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductBasicProductCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Link this product to corresponding codes within the code-group 'basicServicesProduct' loaded from the core system.",
                        "title": "Core type links",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasicProductBasicProductName": {
                "type": "object",
                "properties": {
                    "de": {
                        "type": "string",
                        "description": "The name of the product in german.",
                        "title": "Name"
                    },
                    "en": {
                        "type": "string",
                        "description": "The name of the product in english.",
                        "title": "Name"
                    },
                    "fr": {
                        "type": "string",
                        "description": "The name of the product in french.",
                        "title": "Name"
                    }
                },
                "required": [
                    "en"
                ],
                "additionalProperties": false
            },
            "BasicProductCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Key of the icon to be used for this category",
                        "title": "Icon"
                    },
                    "image": {
                        "type": "string",
                        "description": "Key of the image to be used for this category",
                        "title": "Icon"
                    },
                    "color": {
                        "type": "string",
                        "description": "The code of the color to be used for this category",
                        "title": "Color"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Defines the position of the investment product in a list.",
                        "title": "Order"
                    },
                    "checklistChangeType": {
                        "type": "string",
                        "description": "Defines the structure of an checklist entry generated for a mutation on a product that belogs to this category.",
                        "title": "Checklist Mutation"
                    },
                    "checklistPowerOfAttorney": {
                        "type": "string",
                        "description": "Defines the structure of an checklist entry generated for a power of Attorney on a product that belogs to this category.",
                        "title": "Checklist Power of Attorney"
                    },
                    "coreType": {
                        "$ref": "#/components/schemas/BasicProductCategoryBasicProductCategoryCoreType"
                    },
                    "defaults": {
                        "$ref": "#/components/schemas/BasicProductCategoryBasicProductCategoryDefaults"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Defines the basic services products category.",
                "required": [
                    "color",
                    "coreType",
                    "icon",
                    "image",
                    "name"
                ],
                "additionalProperties": false
            },
            "BasicProductCategoryBasicProductCategoryCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Allows to make the link betwen this categories and the entity code that is set by loader on the product",
                        "title": "Core type link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductCategoryBasicProductCategoryDefaults": {
                "type": "object",
                "properties": {
                    "displayClass": {
                        "$ref": "#/components/schemas/BasicProductCategoryBasicProductCategoryDefaultsDisplayClass"
                    },
                    "detailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail group",
                        "items": {
                            "$ref": "#/components/schemas/BasicProductCategoryBasicProductCategoryDefaultsDetailGroup"
                        }
                    },
                    "changeType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Change type",
                        "items": {
                            "$ref": "#/components/schemas/BasicProductCategoryBasicProductCategoryDefaultsChangeType"
                        }
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/BasicProductCategoryBasicProductCategoryDefaultsOutputClass"
                    }
                },
                "required": [
                    "displayClass",
                    "outputClass"
                ],
                "additionalProperties": false
            },
            "BasicProductCategoryBasicProductCategoryDefaultsChangeType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines the for this product allowed mutations",
                        "title": "Mutation links",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasicProductCategoryBasicProductCategoryDefaultsDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines one or multiple groups shown on the detail card",
                        "title": "detail group links",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductCategoryBasicProductCategoryDefaultsDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines the information shown on the detail card",
                        "title": "display class link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductCategoryBasicProductCategoryDefaultsOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Defines the information shown in the output",
                        "title": "output class link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicProductDocument": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "$ref": "#/components/schemas/BasicProductDocumentBasicProductDocumentProduct"
                    },
                    "document": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Document",
                        "items": {
                            "$ref": "#/components/schemas/BasicProductDocumentBasicProductDocumentDocument"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Defines the documents to a products.",
                "required": [
                    "product"
                ],
                "additionalProperties": false
            },
            "BasicProductDocumentBasicProductDocumentDocument": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "Product documents URL",
                        "title": "Document URL"
                    },
                    "source": {
                        "type": "string",
                        "description": "Product documents Source (local/external)",
                        "title": "Document Source"
                    },
                    "title": {
                        "type": "string",
                        "description": "Product documents Title to be shown in the UI",
                        "title": "Document Title"
                    }
                },
                "required": [
                    "source",
                    "title",
                    "url"
                ],
                "additionalProperties": false
            },
            "BasicProductDocumentBasicProductDocumentProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to the Product this addition belongs to",
                        "title": "product link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasicTariff": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "kd_lnr from kd_stamm",
                        "title": "Customer Id"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "kt_lnr from kt_stamm",
                        "title": "Account Id"
                    },
                    "orderManagementArea": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tier": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tariffBegin": {
                        "type": "string",
                        "description": "Tariff begin",
                        "title": "Tariff Begin",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tariffEnd": {
                        "type": "string",
                        "description": "Tariff end",
                        "title": "Tariff End",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "internalDescription": {
                        "type": "string",
                        "description": "Internal description",
                        "title": "Internal Description"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "title": "Description"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Tariffs",
                "required": [
                    "tariffBegin",
                    "tariffEnd"
                ],
                "additionalProperties": false
            },
            "BasisPromotion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Is this promotion active?",
                        "title": "Active"
                    },
                    "from": {
                        "type": "string",
                        "description": "Promotion is valide from",
                        "title": "From",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "to": {
                        "type": "string",
                        "description": "Promotion is valide until",
                        "title": "To",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customerSegments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer segments",
                        "items": {
                            "$ref": "#/components/schemas/BasisPromotionBasisPromotionCustomerSegments"
                        }
                    },
                    "image": {
                        "$ref": "#/components/schemas/BasisPromotionBasisPromotionImage"
                    },
                    "teaserImage": {
                        "$ref": "#/components/schemas/BasisPromotionBasisPromotionTeaserImage"
                    },
                    "document": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Document",
                        "items": {
                            "$ref": "#/components/schemas/BasisPromotionBasisPromotionDocument"
                        }
                    },
                    "checklistItem": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Checklist item",
                        "items": {
                            "$ref": "#/components/schemas/BasisPromotionBasisPromotionChecklistItem"
                        }
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Defines if a Promotion is used as default promotion",
                        "title": "Default"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Defines in which order the promotions have to be displayed",
                        "title": "Order"
                    },
                    "imageText": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "colorCode": {
                        "type": "string",
                        "description": "Color to be used for the imageText",
                        "title": "Name"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Defines the recommendations for strategies depending on risk tolerance and runtime.",
                "required": [
                    "active",
                    "from",
                    "image",
                    "teaserImage",
                    "title",
                    "to"
                ],
                "additionalProperties": false
            },
            "BasisPromotionBasisPromotionChecklistItem": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Checklist Items related to this promotion",
                        "title": "Checklist",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/checklist\\/config\\/standard\\-set\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "ChecklistConfigurationItem"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasisPromotionBasisPromotionCustomerSegments": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "List of Customer Segment references",
                        "title": "Customer Segments",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasisPromotionBasisPromotionDocument": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Promotion documents",
                        "title": "Documents",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "BasisPromotionBasisPromotionImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Promotion image",
                        "title": "Image",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "BasisPromotionBasisPromotionTeaserImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Promotion teaser image",
                        "title": "teaserImage",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "Card": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "cardType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "cardCategory": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CardCardAccount"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "customerName": {
                        "type": "string",
                        "description": "Customer name",
                        "title": "Customer Name"
                    },
                    "state": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "isCreditCard": {
                        "type": "boolean",
                        "description": "Defines if card is a credit card",
                        "title": "Defines if Card is a Credit Card"
                    },
                    "ownDailyLimit": {
                        "type": "number",
                        "description": "Own daily limit",
                        "title": "Own Daily Limit"
                    },
                    "temporaryLimits": {
                        "$ref": "#/components/schemas/CardCardTemporaryLimits"
                    },
                    "ownMonthlyLimit": {
                        "type": "number",
                        "description": "Own Monthly Limit",
                        "title": "Own Monthly Limit"
                    },
                    "totalCashLimit": {
                        "type": "number",
                        "description": "Total cash limit (only for credit cards)",
                        "title": "Total Cash Limit (only for credit cards)"
                    },
                    "totalCardLimit": {
                        "type": "number",
                        "description": "Total card limit (only for credit cards)",
                        "title": "Total Card Limit (only for credit cards)"
                    },
                    "offlineLimit": {
                        "type": "number",
                        "description": "Offline limit (only for debit cards)",
                        "title": "Offline Limit (only for debit cards)"
                    },
                    "dailyLimit": {
                        "type": "number",
                        "description": "Daily limit",
                        "title": "Daily Limit"
                    },
                    "monthlyLimit": {
                        "type": "number",
                        "description": "Monthly limit",
                        "title": "Monthly Limit"
                    },
                    "directDebitLimit": {
                        "type": "number",
                        "description": "Direct debit limit",
                        "title": "Direct Debit Limit"
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/CardCardSuspension"
                        }
                    },
                    "expiry": {
                        "type": "string",
                        "description": "Expiry date of card",
                        "title": "Expiry Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "cardNumber": {
                        "type": "string",
                        "description": "Card number",
                        "title": "Card Number"
                    },
                    "customerCardLanguageCode": {
                        "type": "string",
                        "description": "SIX language code of customer setting for ATM 0: Deutsch, 1: Franz\u00f6sisch, 2: Italienisch, 3: Englisch",
                        "title": "SIX language code"
                    },
                    "issueDate": {
                        "type": "string",
                        "description": "Issue date of card",
                        "title": "Issue date of card",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "initialFee": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "renewalFee": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "visecaCustomerCategory": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "visecaAccountNumber": {
                        "type": "string",
                        "description": "Viseca account number of Viseca cards",
                        "title": "Viseca account number of Viseca cards"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads cards",
                "additionalProperties": false
            },
            "CardCardAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Account",
                        "title": "Account",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CardCardSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Card suspensions",
                        "title": "Card Suspensions",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CardCardTemporaryLimits": {
                "type": "object",
                "properties": {
                    "ownDailyLimit": {
                        "type": "number",
                        "description": "Own temporary daily limit",
                        "title": "Own Temporary Daily Limit"
                    },
                    "ownMonthlyLimit": {
                        "type": "number",
                        "description": "Own temporary monthly limit",
                        "title": "Own Temporary Monthly Limit"
                    },
                    "totalCashLimit": {
                        "type": "number",
                        "description": "Total temporary cash limit (only for credit cards)",
                        "title": "Total Temporary Cash Limit (only for credit cards)"
                    },
                    "totalCardLimit": {
                        "type": "number",
                        "description": "Total temporary card limit (only for credit cards)",
                        "title": "Total Temporary Card Limit (only for credit cards)"
                    },
                    "offlineLimit": {
                        "type": "number",
                        "description": "Offline temporary limit (only for debit cards)",
                        "title": "Offline Temporary Limit (only for debit cards)"
                    },
                    "dailyLimit": {
                        "type": "number",
                        "description": "Daily temporary limit",
                        "title": "Daily Temporary Limit"
                    },
                    "monthlyLimit": {
                        "type": "number",
                        "description": "Monthly temporary limit",
                        "title": "Monthly Temporary Limit"
                    },
                    "directDebitLimit": {
                        "type": "number",
                        "description": "Direct temporary debit limit",
                        "title": "Direct Temporary Debit Limit"
                    },
                    "validAfter": {
                        "type": "string",
                        "description": "Valid after date for temporary limits",
                        "title": "Valid After Date for Temporary Limits",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "Valid until date for temporary limits",
                        "title": "Valid Until Date for Temporary Limits",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    }
                },
                "additionalProperties": false
            },
            "CardRestLimit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "lastCashWithdrawalDate": {
                        "type": "string",
                        "description": "Date of the last cash withdrawal",
                        "title": "Last Cash Withdrawal Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "remainingDailyLimit": {
                        "type": "number",
                        "description": "Remaining daily limit",
                        "title": "Remaining Daily Limit"
                    },
                    "remainingMonthlyLimit": {
                        "type": "number",
                        "description": "Remaining daily limit",
                        "title": "Remaining Monthly Limit"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Calculates intraday card rest limits",
                "additionalProperties": false
            },
            "ChecklistChecklist": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "customerTaskType": {
                        "$ref": "#/components/schemas/ChecklistConfigurationCustomerTaskType"
                    },
                    "orderOrigin": {
                        "$ref": "#/components/schemas/ChecklistConfigurationOrderOrigin"
                    },
                    "modules": {
                        "type": "array",
                        "description": "Checklists are grouped into toplevel modules.",
                        "title": "Modules",
                        "items": {
                            "$ref": "#/components/schemas/ChecklistConfigurationModule"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Configurable checklists with items structured into use cases and sections. This is the toplevel entry that is need to expose this in a writable fashion until /checklist/configuration/ is writable.",
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "ChecklistCheckpoint": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "text": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "condition": {
                        "type": "string",
                        "description": "Condition fo this checkpoint.",
                        "title": "Condition"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color code.",
                        "title": "Color"
                    },
                    "module": {
                        "$ref": "#/components/schemas/ChecklistCheckpointChecklistCheckpointModule"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Configuration for parametrizable checkpoints.",
                "required": [
                    "color",
                    "condition",
                    "module",
                    "text"
                ],
                "additionalProperties": false
            },
            "ChecklistCheckpointChecklistCheckpointModule": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Link to module this checkpoint part belongs to.",
                        "title": "Module",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/module\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Module"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "ChecklistConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "customerTaskType": {
                        "$ref": "#/components/schemas/ChecklistConfigurationCustomerTaskType"
                    },
                    "orderOrigin": {
                        "$ref": "#/components/schemas/ChecklistConfigurationOrderOrigin"
                    },
                    "modules": {
                        "$ref": "#/components/schemas/ChecklistConfigurationChecklistConfigurationModules"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Configurable checklists with items structured into use cases and sections.",
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "ChecklistConfigurationChecklistConfigurationModules": {
                "type": "object",
                "properties": {
                    "balance": {
                        "$ref": "#/components/schemas/ChecklistConfigurationModule"
                    },
                    "basicServices": {
                        "$ref": "#/components/schemas/ChecklistConfigurationModule"
                    },
                    "common": {
                        "$ref": "#/components/schemas/ChecklistConfigurationModule"
                    },
                    "financing": {
                        "$ref": "#/components/schemas/ChecklistConfigurationModule"
                    },
                    "pos": {
                        "$ref": "#/components/schemas/ChecklistConfigurationModule"
                    },
                    "trash": {
                        "$ref": "#/components/schemas/ChecklistConfigurationModule"
                    }
                },
                "additionalProperties": false
            },
            "ChecklistConfigurationCustomerTaskType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "$ref": {
                        "type": "string",
                        "description": "Link to a specific customer task type code.",
                        "title": "Link to customerTaskType",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Checklist Customer Task Type",
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "ChecklistConfigurationItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "defaultCheckedState": {
                        "type": "boolean",
                        "description": "Defines, if the checklist item is checked or not by default.",
                        "title": "Checked?"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Defines the position of the item in a list.",
                        "title": "Order"
                    },
                    "isChecked": {
                        "type": "boolean",
                        "description": "Indicates if a checklist item is currently checked. Please use defaultCheckedState if you want to configure a default state. This is only a placeholder so the clients may copy this structure verbatim for further use.",
                        "title": "Is Checked?"
                    },
                    "isOwnItem": {
                        "type": "boolean",
                        "description": "Indicates if a given item was added to the checklist by the user and not as part of the configuration. Please do not set this field to true on this service. It is only intended as placeholder so clients do not need to add the additional field when copying the whole structure verbatim for further use.",
                        "title": "Is Own Item?"
                    },
                    "displayCondition": {
                        "type": "string",
                        "description": "A condition expression used to determine if this item is relevant in an use case",
                        "title": "Display condition"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Checklist items that may be used in a module, section or use-case property.",
                "required": [
                    "defaultCheckedState",
                    "name"
                ],
                "additionalProperties": false
            },
            "ChecklistConfigurationModule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "module": {
                        "$ref": "#/components/schemas/ChecklistConfigurationModuleModule"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "collapsed": {
                        "type": "boolean",
                        "description": "Default collapse state of a module.",
                        "title": "Collapsed?"
                    },
                    "discussed": {
                        "type": "boolean",
                        "description": "Indicate if this module has been discussed in a meeting.",
                        "title": "Discussed?"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Position of the checklist section",
                        "title": "Position"
                    },
                    "useCases": {
                        "type": "array",
                        "description": "Checklist modules consist of multiple use cases.",
                        "title": "Use Cases",
                        "items": {
                            "$ref": "#/components/schemas/ChecklistConfigurationUseCase"
                        }
                    },
                    "items": {
                        "type": "array",
                        "description": "Individual checklist items that are stored in a section.",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/ChecklistConfigurationItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Checklists may be grouped into toplevel modules if they span multiple modules. Every checklist-module needs to reference a /core/module/.",
                "required": [
                    "collapsed",
                    "discussed",
                    "name",
                    "order"
                ],
                "additionalProperties": false
            },
            "ChecklistConfigurationModuleModule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "$ref": {
                        "type": "string",
                        "description": "Link to module this checklist part belongs to.",
                        "title": "Module",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/module\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Module"
                        ],
                        "nullable": false
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Checklist Module Module reference",
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "ChecklistConfigurationOrderOrigin": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "$ref": {
                        "type": "string",
                        "description": "Link to a specific order origin code.",
                        "title": "Link to order origin",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Checklist Order Origin reference",
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "ChecklistConfigurationSection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "collapsed": {
                        "type": "boolean",
                        "description": "Collapsed State of the section.",
                        "title": "Collapsed?"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Position of the checklist section.",
                        "title": "Order"
                    },
                    "imageKey": {
                        "type": "string",
                        "description": "A reference to an image attached to a section.",
                        "title": "Image Key"
                    },
                    "items": {
                        "type": "array",
                        "description": "Individual checklist items that are stored in a section.",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/ChecklistConfigurationItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Checklist sections are use to group items into use-cases.",
                "required": [
                    "collapsed",
                    "name",
                    "order"
                ],
                "additionalProperties": false
            },
            "ChecklistConfigurationUseCase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "useCaseKey": {
                        "type": "string",
                        "description": "An fixed string key identifying this use case.",
                        "title": "Key"
                    },
                    "name": {
                        "$ref": "#/components/schemas/GravitonTranslatable"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Number for ordering use cases.",
                        "title": "Use Case Order"
                    },
                    "sections": {
                        "type": "array",
                        "description": "Sections may be used to group items in use-cases.",
                        "title": "Sections",
                        "items": {
                            "$ref": "#/components/schemas/ChecklistConfigurationSection"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Checklist modules consist of multiple use cases.",
                "required": [
                    "name",
                    "order"
                ],
                "additionalProperties": false
            },
            "ClientSetting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "group": {
                        "type": "string",
                        "description": "Key of the group to be able to group settings",
                        "title": "Group key"
                    },
                    "value": {
                        "type": "object",
                        "description": "Setting value",
                        "title": "Setting value",
                        "additionalProperties": true
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Settings that affect all clients",
                "required": [
                    "value"
                ],
                "additionalProperties": false
            },
            "Code": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code group name; each code belongs to one group",
                        "title": "Group"
                    },
                    "number": {
                        "type": "string",
                        "description": "The code number, unique within the group",
                        "title": "Number"
                    },
                    "parentCodeId": {
                        "type": "string",
                        "description": "Optional ID of the parent code",
                        "title": "Parent Code ID"
                    },
                    "addition": {
                        "type": "string",
                        "description": "Optional additional data",
                        "title": "Additional data"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Optional sorting value",
                        "title": "Order"
                    },
                    "text": {
                        "$ref": "#/components/schemas/CodeCodeText"
                    },
                    "textShort": {
                        "$ref": "#/components/schemas/CodeCodeTextShort"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Code Load",
                "additionalProperties": false
            },
            "CodeCodeText": {
                "type": "object",
                "properties": {
                    "de": {
                        "type": "string",
                        "description": "Text of this code in german",
                        "title": "German code text"
                    },
                    "fr": {
                        "type": "string",
                        "description": "Text of this code in french",
                        "title": "French code text"
                    },
                    "it": {
                        "type": "string",
                        "description": "Text of this code in italian",
                        "title": "Italian code text"
                    },
                    "en": {
                        "type": "string",
                        "description": "Text of this code in English",
                        "title": "English code text"
                    }
                },
                "additionalProperties": false
            },
            "CodeCodeTextShort": {
                "type": "object",
                "properties": {
                    "de": {
                        "type": "string",
                        "description": "short text of this code in german",
                        "title": "German short code text"
                    },
                    "fr": {
                        "type": "string",
                        "description": "short text of this code in french",
                        "title": "French short code text"
                    },
                    "it": {
                        "type": "string",
                        "description": "short text of this code in italian",
                        "title": "Italian short code text"
                    },
                    "en": {
                        "type": "string",
                        "description": "short text of this code in English",
                        "title": "English short code text"
                    }
                },
                "additionalProperties": false
            },
            "CodeMapping": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "Mapping name",
                        "title": "Mapping name"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "description": "Record origin",
                        "title": "Record origin"
                    },
                    "score": {
                        "type": "integer",
                        "description": "Optional score that mapping should set",
                        "title": "Score"
                    },
                    "mapping": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Mapping",
                        "items": {
                            "$ref": "#/components/schemas/CodeMappingCodeMappingMapping"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Mapping for codes",
                "additionalProperties": false
            },
            "CodeMappingCodeMappingMapping": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key inside mapping (e.g. open, pending...)",
                        "title": "Key in mapping"
                    },
                    "value": {
                        "type": "array",
                        "description": "Array of code ids",
                        "title": "Code id",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            },
            "CodeMappingRelation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "name": {
                        "type": "string",
                        "description": "Relation name",
                        "title": "Name"
                    },
                    "key": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "values": {
                        "type": "array",
                        "description": "Mapping value",
                        "title": "Mapping Value",
                        "items": {
                            "$ref": "#/components/schemas/Code"
                        }
                    },
                    "relationClassification": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Code Relation Mappings",
                "additionalProperties": false
            },
            "Config": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "key": {
                        "type": "string",
                        "description": "A fixed string identifying this configuration value.",
                        "title": "Key"
                    },
                    "app": {
                        "$ref": "#/components/schemas/ConfigConfigApp"
                    },
                    "default": {
                        "type": "string",
                        "description": "Default value of configuration value.",
                        "title": "Default"
                    },
                    "value": {
                        "type": "string",
                        "description": "Actual value of configuration value.",
                        "title": "Value"
                    },
                    "description": {
                        "type": "string",
                        "description": "Describes the key.",
                        "title": "Description"
                    },
                    "group": {
                        "type": "string",
                        "description": "Defines to which group the key belongs to.",
                        "title": "Group"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "A key-value store for keeping global configuration state.",
                "required": [
                    "default",
                    "key"
                ],
                "additionalProperties": false
            },
            "ConfigConfigApp": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Link to the application this configuration value relates to.",
                        "title": "Application-Link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/app\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "App"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Consultant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "hash": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Hash"
                    },
                    "userId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "User id"
                    },
                    "username": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Username"
                    },
                    "employeeId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Employee id"
                    },
                    "externalUsername": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "External username"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name"
                    },
                    "shortDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Short designation"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is active"
                    },
                    "isBackoffice": {
                        "type": "boolean",
                        "description": "If the consultant is member of the backoffice",
                        "title": "Is backoffice"
                    },
                    "type": {
                        "type": "string",
                        "description": "Consultant type (Kundenberater, Sachberater,...)",
                        "title": "Consultant Type"
                    },
                    "product": {
                        "type": "string",
                        "description": "The product the consultant is repsonsible for",
                        "title": "Product"
                    },
                    "roles": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Roles",
                        "items": {
                            "$ref": "#/components/schemas/Code"
                        }
                    },
                    "department": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Department"
                    },
                    "division": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Division"
                    },
                    "title": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Title"
                    },
                    "pictureUrl": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Picture url"
                    },
                    "certificationLevelInvestment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Certification level investment"
                    },
                    "certificationLevelFinancing": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Certification level financing"
                    },
                    "certificationLevelRetirement": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Certification level retirement"
                    },
                    "contacts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Contacts",
                        "items": {
                            "$ref": "#/components/schemas/ConsultantConsultantContacts"
                        }
                    },
                    "location": {
                        "$ref": "#/components/schemas/ConsultantConsultantLocation"
                    },
                    "groupMembership": {
                        "type": "array",
                        "description": "Array of any external group membership names",
                        "title": "Group membership",
                        "x-recordOriginException": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "permission": {
                        "type": "array",
                        "description": "Array strings that specify a set of permissions that this consultant has",
                        "title": "User permissions",
                        "x-recordOriginException": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "webDomain": {
                        "type": "string",
                        "description": "Web domain of consultants company",
                        "title": "Web Domain"
                    },
                    "branch": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "teamMainAdvisorId": {
                        "type": "string",
                        "description": "Team main advisor Id",
                        "title": "Team Main Advisor Id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Consultant Load from LDAP multitenant as in BAS",
                "additionalProperties": false
            },
            "ConsultantConsultantContacts": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type"
                    },
                    "value": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Value"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Protocol"
                    },
                    "uri": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Uri"
                    }
                },
                "additionalProperties": false
            },
            "ConsultantConsultantLocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street"
                    },
                    "zip": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip"
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Longitude"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Latitude"
                    },
                    "description": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Description"
                    },
                    "contacts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Contacts",
                        "items": {
                            "$ref": "#/components/schemas/LocationContact"
                        }
                    }
                },
                "additionalProperties": false
            },
            "ConsultantKpi": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "week": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Week"
                    },
                    "countSalesAppointments": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Count sales appointments"
                    },
                    "countSalesNewCustomers": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Count sales new customers"
                    },
                    "countSalesNewFinancing": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Count sales new financing"
                    },
                    "volumeSalesNewFinancing": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Volume sales new financing"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads Kpis from consultants from E+",
                "additionalProperties": false
            },
            "ConsultantMbo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "year": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Year"
                    },
                    "month": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Month"
                    },
                    "mboGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Mbo group",
                        "items": {
                            "$ref": "#/components/schemas/ConsultantMboConsultantMboMboGroup"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads Mbo Goals for consultants from E+",
                "additionalProperties": false
            },
            "ConsultantMboConsultantMboMboGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Id"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name"
                    },
                    "factor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Factor"
                    },
                    "indicator": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Indicator"
                    },
                    "base": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Base"
                    },
                    "actualFactor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Actual factor"
                    },
                    "targetFactor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Target factor"
                    },
                    "actualValue": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Actual value"
                    },
                    "targetValue": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Target value"
                    }
                },
                "additionalProperties": false
            },
            "ConsultationConsultationCompletion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "completedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Completed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntilDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "ConsultationInvestmentQuestionnaireAnswerStorage": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "calculatedProfile": {
                        "$ref": "#/components/schemas/CustomerConsultationPersistenceRiskToleranceCalculatedProfile"
                    },
                    "questionnaireAnswers": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Questionnaire answers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPersistenceRiskToleranceQuestionnaireAnswer"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "questionnaireAnswers"
                ],
                "additionalProperties": false
            },
            "ConsultationPersistenceFinancingObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "realEstateType": {
                        "$ref": "#/components/schemas/ConsultationPersistenceFinancingObjectConsultationPersistenceFinancingObjectRealEstateType"
                    },
                    "currentMarketPrice": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Current market price",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/ConsultationPersistenceFinancingObjectConsultationPersistenceFinancingObjectCustomer"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CustomerConsultationPersistenceFinancingObjectAddress"
                    },
                    "frameNr": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Frame nr"
                    },
                    "amortizationType": {
                        "$ref": "#/components/schemas/ConsultationPersistenceFinancingObjectConsultationPersistenceFinancingObjectAmortizationType"
                    },
                    "amortizationAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amortization amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "amortizationYear": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Amortization year"
                    },
                    "tranches": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Tranches",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPersistenceFinancingTranche"
                        }
                    },
                    "collaterals": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Collaterals",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPersistenceFinancingCollateral"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "address",
                    "collaterals",
                    "currentMarketPrice",
                    "customer",
                    "realEstateType",
                    "tranches"
                ],
                "additionalProperties": false
            },
            "ConsultationPersistenceFinancingObjectConsultationPersistenceFinancingObjectAmortizationType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ConsultationPersistenceFinancingObjectConsultationPersistenceFinancingObjectCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "ConsultationPersistenceFinancingObjectConsultationPersistenceFinancingObjectRealEstateType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/realestatetype\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingRealEstateType"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "ConsultationRequisitionMutableItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "date": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "portfolio": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Portfolio"
                    },
                    "itemDescription": {
                        "$ref": "#/components/schemas/CustomerConsultationRequisitionParameterItemDescription"
                    },
                    "groupDescription": {
                        "$ref": "#/components/schemas/CustomerConsultationRequisitionParameterGroupDescription"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "affectedCustomer": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Affected customer",
                        "enum": [
                            0,
                            1,
                            2
                        ]
                    },
                    "region": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Region",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "type": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Type",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "position": {
                        "$ref": "#/components/schemas/CustomerConsultationRequisitionConsultationPosition"
                    },
                    "noteString": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Note string"
                    },
                    "noteImage": {
                        "$ref": "#/components/schemas/ConsultationRequisitionMutableItemConsultationRequisitionMutableItemNoteImage"
                    },
                    "titleString": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Title string"
                    },
                    "titleImage": {
                        "$ref": "#/components/schemas/ConsultationRequisitionMutableItemConsultationRequisitionMutableItemTitleImage"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "affectedCustomer",
                    "groupDescription",
                    "itemDescription",
                    "position",
                    "region",
                    "type"
                ],
                "additionalProperties": false
            },
            "ConsultationRequisitionMutableItemConsultationRequisitionMutableItemNoteImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ConsultationRequisitionMutableItemConsultationRequisitionMutableItemTitleImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Contract": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "note": {
                        "type": "string",
                        "description": "An optional note that can be saved and is transient after loads.",
                        "title": "Note",
                        "x-recordOriginException": true
                    },
                    "number": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number"
                    },
                    "contractType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "contractStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "authorizedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Authorized date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "signedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Signed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validFromDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid from date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntilDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "contractNote": {
                        "type": "string",
                        "description": "Note out of VT_BEM",
                        "title": "Contract note"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "customer id as string",
                        "title": "customer id"
                    },
                    "portfolio": {
                        "$ref": "#/components/schemas/Accountgroup"
                    },
                    "account": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account",
                        "items": {
                            "$ref": "#/components/schemas/Account"
                        }
                    },
                    "documentId": {
                        "type": "string",
                        "description": "unique id of the according document output",
                        "title": "document id"
                    },
                    "attorneyReceiver": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "attorneyReceiverId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Attorney receiver id"
                    },
                    "attorneyDonor": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "attorneyDonorId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Attorney donor id"
                    },
                    "powerOfAttorney": {
                        "type": "boolean",
                        "description": "true if power of attorney contract else false",
                        "title": "Power of Attorney Contract"
                    },
                    "signatureRight": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "legitimation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "attorneyRelation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "signatureGroup": {
                        "type": "string",
                        "description": "To which group the signature belongs to.",
                        "title": "Signature group"
                    },
                    "signatureGroupLimits": {
                        "type": "array",
                        "description": "Signature groups on limits",
                        "title": "Limits Signature groups",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignedCustomers": {
                        "type": "array",
                        "description": "Customers assigned to this contract",
                        "title": "Assigned customers",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignedAccounts": {
                        "type": "array",
                        "description": "Accounts assigned to this contract",
                        "title": "Assigned accounts",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignedAccountsRef": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Assigned accounts ref",
                        "items": {
                            "$ref": "#/components/schemas/ContractContractAssignedAccountsRef"
                        }
                    },
                    "assignedCards": {
                        "type": "array",
                        "description": "Cards assigned to this contract",
                        "title": "Assigned cards",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignedPortfolios": {
                        "type": "array",
                        "description": "Portfolios assigned to this contract",
                        "title": "Assigned Portfolios",
                        "items": {
                            "type": "string"
                        }
                    },
                    "collective": {
                        "type": "boolean",
                        "description": "true if collective power of attorney contract else false",
                        "title": "States if Collective Power of Attorney Contract"
                    },
                    "lastLogin": {
                        "type": "string",
                        "description": "Date and time of the last successful login to eBanking",
                        "title": "eBanking Login Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "totalLoginsFailed": {
                        "type": "string",
                        "description": "Count of failed logins to eBanking (total)",
                        "title": "Failed Logins ebanking"
                    },
                    "contractSuspension": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "contractRecipientName": {
                        "type": "string",
                        "description": "lastName and firstName of contract recipient out of the recipient roules",
                        "title": "Contract Recipient"
                    },
                    "contractRecipientStreet": {
                        "type": "string",
                        "description": "Street of contract recipient address out of the recipient roules",
                        "title": "Contract Recipient Street"
                    },
                    "contractRecipientZip": {
                        "type": "string",
                        "description": "ZIP of contract recipient address out of the recipient roules",
                        "title": "Contract Recipient ZIP"
                    },
                    "contractRecipientCity": {
                        "type": "string",
                        "description": "City of contract recipient address out of the recipient roules",
                        "title": "Contract Recipient City"
                    },
                    "loginsCurrentYear": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Logins current year"
                    },
                    "loginsLast30Days": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Logins last30 days"
                    },
                    "electronicDocuments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Electronic documents",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mobileBanking": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Mobile banking"
                    },
                    "electronicInvoice": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Electronic invoice"
                    },
                    "defaultEbankingAssignment": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Default ebanking assignment"
                    },
                    "electronicBankingLimits": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Electronic banking limits",
                        "items": {
                            "$ref": "#/components/schemas/ContractContractElectronicBankingLimits"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads contracts",
                "additionalProperties": false
            },
            "ContractContractAssignedAccountsRef": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Accounts assigned to this contract. This list contains references to account objects instead of simple varchar as in assignedAccounts. ",
                        "title": "Assigned accounts Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ContractContractElectronicBankingLimits": {
                "type": "object",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account"
                    },
                    "singleAuthorizationDaily": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Single authorization daily"
                    },
                    "doubleAuthorizationDaily": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Double authorization daily"
                    },
                    "absoluteDaily": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Absolute daily"
                    },
                    "singleAuthorizationMonthly": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Single authorization monthly"
                    },
                    "doubleAuthorizationMonthly": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Double authorization monthly"
                    },
                    "absoluteMonthly": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Absolute monthly"
                    }
                },
                "additionalProperties": false
            },
            "ContractNote": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "note": {
                        "type": "string",
                        "description": "A note to the contract",
                        "title": "Note"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "A service to make notes relating to contracts",
                "required": [
                    "note"
                ],
                "additionalProperties": false
            },
            "CoreSetting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "setting": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "value": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "portfolioId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Portfolio id"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id"
                    },
                    "contractId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Contract id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Load",
                "additionalProperties": false
            },
            "Customer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "singleCustomerId": {
                        "type": "string",
                        "description": "Customer id of first partner in case of a dual partner",
                        "title": "Single customer id"
                    },
                    "singleCustomerIdPartner": {
                        "type": "string",
                        "description": "Customer id of second partner in case of a dual partner",
                        "title": "Single customer id partner"
                    },
                    "doubleCustomerId": {
                        "type": "string",
                        "description": "Customer id of a connected dual partner",
                        "title": "Double customer id"
                    },
                    "idAlternativeSystem": {
                        "type": "string",
                        "description": "unique identifier in a alternative optional customer system",
                        "title": "Id alternative system"
                    },
                    "clientStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nationalityIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "dispatchType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "customerNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer number"
                    },
                    "customerNumberAlternate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer number alternate"
                    },
                    "OASI": {
                        "type": "string",
                        "description": "Formatted old-age and survivors insurance (old AHV number)",
                        "title": "O a s i"
                    },
                    "socialSecurityNumber": {
                        "type": "string",
                        "description": "Formatted social security number (new AHV number)",
                        "title": "Social security number"
                    },
                    "isResidential": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is residential"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is active"
                    },
                    "hasActiveCustomerRelation": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Has active customer relation"
                    },
                    "createDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Create date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "openedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Opened date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "closedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Closed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name"
                    },
                    "addition": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Addition"
                    },
                    "age": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Age"
                    },
                    "designation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Designation"
                    },
                    "shortDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Short designation"
                    },
                    "shortDesignationAbbreviation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Short designation abbreviation"
                    },
                    "fullDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Full designation"
                    },
                    "letterSalutation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Letter salutation"
                    },
                    "salutation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "firstNamePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name partner"
                    },
                    "lastNamePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name partner"
                    },
                    "salutationPartner": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "birthDatePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date partner",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "language": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "languageIso": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Language iso"
                    },
                    "sex": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "sexPartner": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "maritalStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "legalForm": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "profession": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "segment": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "group": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nationality": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nationality2nd": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "legalAddress": {
                        "$ref": "#/components/schemas/CustomerAddress"
                    },
                    "consultant": {
                        "$ref": "#/components/schemas/Consultant"
                    },
                    "contact": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Contact",
                        "x-recordOriginException": true,
                        "items": {
                            "$ref": "#/components/schemas/CustomerContact"
                        }
                    },
                    "additionalAddresses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Additional addresses",
                        "x-recordOriginException": true,
                        "items": {
                            "$ref": "#/components/schemas/CustomerAddress"
                        }
                    },
                    "nariloCode": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nariloDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Narilo date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customerType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer type"
                    },
                    "rating": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "ratingAgency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "ratingDate": {
                        "$ref": "#/components/schemas/CustomerCustomerRatingDate"
                    },
                    "bvgCode": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "hasBvg": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Has bvg"
                    },
                    "title": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "titlePartner": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "mainType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nativePlace": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Native place"
                    },
                    "birthPlace": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth place"
                    },
                    "countryOfBirth": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "placeOfRelation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nationalityPartner": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nationalityPartner2nd": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "maritalStatusPartner": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "maritalStatusDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Marital status date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "maritalStatusPartnerDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Marital status partner date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "nativePlacePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Native place partner"
                    },
                    "birthPlacePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth place partner"
                    },
                    "countryOfBirthPartner": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "mifidCategory": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "euTaxLiability": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "settlementTaxMethod": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Settlement tax method",
                        "items": {
                            "$ref": "#/components/schemas/Code"
                        }
                    },
                    "qiBasket": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "taxDomicil": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "taxDomicilIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "employmentStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "isMainBank": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is main bank"
                    },
                    "education": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Education"
                    },
                    "noga": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "family": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "family",
                        "items": {
                            "$ref": "#/components/schemas/CustomerFamily"
                        }
                    },
                    "vsbStatus": {
                        "$ref": "#/components/schemas/CustomerVsb"
                    },
                    "customerGroup": {
                        "type": "array",
                        "description": "Array of Customer group objects",
                        "title": "Customer Group",
                        "x-recordOriginException": true,
                        "items": {
                            "$ref": "#/components/schemas/CustomerGroup"
                        }
                    },
                    "customerConnectionType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Accounts",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isRestricted": {
                        "type": "boolean",
                        "description": "can be set if the customer should not return certain values. Usualy this will be set by a post-loader job. For example employees should not have account balance data. Other services can consume this field to evaluate if they should handle data for restricted users",
                        "title": "restricted customer flag"
                    },
                    "matrimonialProperty": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "stockExchangeListed": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "legalFormBase": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "legalFormDetail1": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "legalFormDetail2": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "According to Finnova field KD_UID",
                        "title": "Unique ID of the company"
                    },
                    "foundingDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Founding date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "numberOfEmployees": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Number of employees"
                    },
                    "lastAnnualFinancialStatement": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last annual financial statement",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "consultationCompany": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "fidlegSegment": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tax": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Tax",
                        "items": {
                            "$ref": "#/components/schemas/CustomerCustomerTax"
                        }
                    },
                    "creditFeeLimit": {
                        "type": "integer",
                        "description": "Amount limit for the credit fee.",
                        "title": "Credit Fee Limit"
                    },
                    "creditFeeLimitType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "creditFeeLimitId": {
                        "type": "string",
                        "description": "GB_KD_COND_LNR field from table GB_KD_COND",
                        "title": "Unique Id of the credit fee limit"
                    },
                    "prospects": {
                        "type": "string",
                        "description": "Personal Prospects/professional goals/further eductions",
                        "title": "Prospects"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Load",
                "required": [
                    "customerType"
                ],
                "additionalProperties": false
            },
            "CustomerAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "sourceSystem": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Source system"
                    },
                    "customer": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street"
                    },
                    "addition": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Addition"
                    },
                    "pobox": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pobox"
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code"
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City"
                    },
                    "country": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "dispatchType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "addressType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "salutationLine1": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Salutation line1"
                    },
                    "salutationLine2": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Salutation line2"
                    },
                    "addressLine1": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line1"
                    },
                    "addressLine2": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line2"
                    },
                    "addressLine3": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line3"
                    },
                    "addressLine4": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line4"
                    },
                    "addressLine5": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line5"
                    },
                    "addressLine6": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line6"
                    },
                    "addressLine7": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line7"
                    },
                    "addressLine8": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address line8"
                    },
                    "contactVariation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "this address will be valied from this date (exclude)",
                        "title": "Valid from",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "this address will bei valid until this date (include)",
                        "title": "Valid until",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "language": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "denyAdvertising": {
                        "type": "boolean",
                        "description": "Describes if advertising is denyed",
                        "title": "deny Advertising"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads adresses from customers",
                "additionalProperties": false
            },
            "CustomerAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer",
                        "items": {
                            "$ref": "#/components/schemas/CustomerAssignmentCustomerAssignmentCustomer"
                        }
                    },
                    "consultant": {
                        "$ref": "#/components/schemas/CustomerAssignmentCustomerAssignmentConsultant"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer assignment Service.",
                "additionalProperties": false
            },
            "CustomerAssignmentCustomerAssignmentConsultant": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Link to consultant document.",
                        "title": "Consultant link",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/consultant\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Consultant"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerAssignmentCustomerAssignmentCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "List of links to customer documents.",
                        "title": "Customer links",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerBalance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerBalanceCustomerBalanceCustomer"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "balanceType": {
                        "type": "string",
                        "description": "unique identifier",
                        "title": "Balance type"
                    },
                    "isAtThirdParty": {
                        "type": "boolean",
                        "description": "whether entry is located at a third party",
                        "title": "Is at third party"
                    },
                    "entryDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Entry date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "date from this information is valid",
                        "title": "Valid from",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "date until this information is valid",
                        "title": "Valid until",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "balanceSubType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "balanceAtType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "amountDue": {
                        "type": "number",
                        "description": "In case of liability, this is the remaining amount of it",
                        "title": "Amount Due"
                    },
                    "balanceAtComment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at comment"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "_retentionBaseDate": {
                        "type": "string",
                        "description": "Rention base date",
                        "title": "Rention Base Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Balance data (assets and liabilities)",
                "additionalProperties": false
            },
            "CustomerBalanceCustomerBalanceCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerBalanceHistory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "entryDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Entry date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "balanceSubType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "_retentionBaseDate": {
                        "type": "string",
                        "description": "Rention base date",
                        "title": "Rention Base Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Balance history",
                "additionalProperties": false
            },
            "CustomerBasicProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerBasicProductCustomerBasicProductCustomer"
                    },
                    "favoriteProduct": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Favorite product",
                        "items": {
                            "$ref": "#/components/schemas/CustomerBasicProductCustomerBasicProductFavoriteProduct"
                        }
                    },
                    "dislikedProduct": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Disliked product",
                        "items": {
                            "$ref": "#/components/schemas/CustomerBasicProductCustomerBasicProductDislikedProduct"
                        }
                    },
                    "possibleProduct": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Possible product",
                        "items": {
                            "$ref": "#/components/schemas/CustomerBasicProductCustomerBasicProductPossibleProduct"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Stores the liked/disliked/allowed basic products per customer",
                "required": [
                    "customer"
                ],
                "additionalProperties": false
            },
            "CustomerBasicProductCustomerBasicProductCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Customer the record belongs to.",
                        "title": "Customer",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerBasicProductCustomerBasicProductDislikedProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Products disliked by the customer",
                        "title": "Disliked products",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerBasicProductCustomerBasicProductFavoriteProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Products favored by the customer",
                        "title": "Favorite products",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerBasicProductCustomerBasicProductPossibleProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Possible products for the customer",
                        "title": "Possible products",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerBook": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "balance": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance",
                        "items": {
                            "$ref": "#/components/schemas/CustomerBookCustomerBookBalance"
                        }
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "customerNumber": {
                        "type": "string",
                        "description": "business customer number",
                        "title": "Customer Number"
                    },
                    "customerNumberAlternate": {
                        "type": "string",
                        "description": "Formatted customer number",
                        "title": "Customer Number Alternate"
                    },
                    "customerIdG2": {
                        "type": "string",
                        "description": "customer number out of G2 (private banking system)",
                        "title": "Customer ID G2"
                    },
                    "designation": {
                        "type": "string",
                        "description": "customer name and place",
                        "title": "Designation"
                    },
                    "salutation": {
                        "type": "string",
                        "description": "salutation of the main customer",
                        "title": "Salutation"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "first name of the main customer",
                        "title": "First Name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "last name of the main customer",
                        "title": "Last Name"
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "birth date of the main customer",
                        "title": "Birth Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "age": {
                        "type": "integer",
                        "description": "The numeric age of the customer, not accounting for birthday.",
                        "title": "Age"
                    },
                    "salutationPartner": {
                        "type": "string",
                        "description": "salutation of the secondary customer",
                        "title": "Salutation Partner"
                    },
                    "firstNamePartner": {
                        "type": "string",
                        "description": "first name of the secondary customer",
                        "title": "First Name Partner"
                    },
                    "lastNamePartner": {
                        "type": "string",
                        "description": "last name of the secondary customer",
                        "title": "Last Name Partner"
                    },
                    "birthDatePartner": {
                        "type": "string",
                        "description": "birth date of the secondary customer",
                        "title": "Birth Date Partner",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "street": {
                        "type": "string",
                        "description": "street",
                        "title": "Street"
                    },
                    "addition": {
                        "type": "string",
                        "description": "address addition",
                        "title": "Addition"
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "zip code",
                        "title": "ZIP Code"
                    },
                    "city": {
                        "type": "string",
                        "description": "city",
                        "title": "City"
                    },
                    "formationYear": {
                        "type": "integer",
                        "description": "formation year of the company",
                        "title": "Formation Year"
                    },
                    "segment": {
                        "type": "string",
                        "description": "customer segment",
                        "title": "Segment"
                    },
                    "consultantDesignation": {
                        "type": "string",
                        "description": "designation of the consultant",
                        "title": "Consultant Designation"
                    },
                    "consultantUsername": {
                        "type": "string",
                        "description": "technical username of the consultant",
                        "title": "Consultant Username"
                    },
                    "consultantDesignationG2": {
                        "type": "string",
                        "description": "designation of the consultant in G2 (private banking system)",
                        "title": "Consultant Designation G2"
                    },
                    "clientStatus": {
                        "type": "string",
                        "description": "status of the customer (active, inactive, etc.)",
                        "title": "Client Status"
                    },
                    "isActiveCustomer": {
                        "type": "boolean",
                        "description": "defines if the customer is activtely using the bank relation",
                        "title": "Active Customer"
                    },
                    "group": {
                        "type": "string",
                        "description": "customer classification",
                        "title": "Customer Group"
                    },
                    "lastPhysicalContactDate": {
                        "type": "string",
                        "description": "last time, the advisor had physical contact with the customer",
                        "title": "Last Physical Contact",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "totalContactsLastYearPeriod": {
                        "type": "integer",
                        "description": "total count of contacts between the advisor and the customer last year",
                        "title": "Total Contacts Last Year Period"
                    },
                    "totalContactsYtd": {
                        "type": "integer",
                        "description": "total count of contacts between the advisor and the customer year-to-date",
                        "title": "Total Contacts YTD"
                    },
                    "physicalContactsLastYearPeriod": {
                        "type": "integer",
                        "description": "count of physical contacts between the advisor and the customer last year",
                        "title": "Physical Contacts Last Year Period"
                    },
                    "physicalContactsYtd": {
                        "type": "integer",
                        "description": "count of physical contacts between the advisor and the customer year-to-date",
                        "title": "Physical Contacts YTD"
                    },
                    "phoneCallsLastYearPeriod": {
                        "type": "integer",
                        "description": "count of phone calls between the advisor and the customer last year",
                        "title": "Phone Calls Last Year Period"
                    },
                    "phoneCallsYtd": {
                        "type": "integer",
                        "description": "count of phone calls between the advisor and the customer year-to-date",
                        "title": "Phone Calls YTD"
                    },
                    "aquisitionContactsLastYearPeriod": {
                        "type": "integer",
                        "description": "count of contacts between the advisor and the customer due to aquisition last year",
                        "title": "Aquisition Contacts Last Year Period"
                    },
                    "aquisitionContactsYtd": {
                        "type": "integer",
                        "description": "count of contacts between the advisor and the customer due to aquisition year-to-date",
                        "title": "Aquisition Contacts YTD"
                    },
                    "dbiiWithoutCalculatoryPositionsLastYear": {
                        "type": "number",
                        "description": "revenue the bank had with the given customer (DBII) during the last year without calculatory positions",
                        "title": "DBII Without Calculatory Positions Last Year"
                    },
                    "dbiiWithoutCalculatoryPositionsLastYearPeriod": {
                        "type": "number",
                        "description": "revenue the bank had with the given customer (DBII) during the last year (period) without calculatory positions",
                        "title": "DBII Without Calculatory Positions Last Year Period"
                    },
                    "dbiiWithoutCalculatoryPositionsYtd": {
                        "type": "number",
                        "description": "revenue the bank had with the given customer (DBII) year-to-date without calculatory positions",
                        "title": "DBII Without Calculatory Positions YTD"
                    },
                    "dbiiLastYear": {
                        "type": "number",
                        "description": "revenue the bank had with the given customer (DBII) during the last year",
                        "title": "DBII Last Year"
                    },
                    "dbiiLastYearPeriod": {
                        "type": "number",
                        "description": "revenue the bank had with the given customer (DBII) during the last year (period)",
                        "title": "DBII Last Year Period"
                    },
                    "dbiiYtd": {
                        "type": "number",
                        "description": "revenue the bank had with the given customer (DBII) year-to-date",
                        "title": "DBII YTD"
                    },
                    "shareIndifferentYield": {
                        "type": "number",
                        "description": "share of the bank's revenue out of indifferent business",
                        "title": "Share Indifferent Yield"
                    },
                    "dbiInterestResultCustomerYtd": {
                        "type": "number",
                        "description": "revenue the bank had with the given customer out of interest business (DBI) year-to-date",
                        "title": "DB I Interest Result Customer YTD"
                    },
                    "interestIncomeYtd": {
                        "type": "number",
                        "description": "revenue out of interest business year-to-date",
                        "title": "Interest Income YTD"
                    },
                    "opportunityInterestActiveYtd": {
                        "type": "number",
                        "description": "opportunity interests active and forward year-to-date",
                        "title": "Opportunity Interest Active YTD"
                    },
                    "calculatoryCostsRiskYtd": {
                        "type": "number",
                        "description": "calculatory risk costs year-to-date",
                        "title": "Calculatory Costs Risk YTD"
                    },
                    "calculatoryCostsEquityYtd": {
                        "type": "number",
                        "description": "calculatory costs of the equity year-to-date",
                        "title": "Calculatory Costs Equity YTD"
                    },
                    "interestCostsYtd": {
                        "type": "number",
                        "description": "interest costs year-to-date",
                        "title": "Interest Costs YTD"
                    },
                    "opportunityInterestsPassiveYtd": {
                        "type": "number",
                        "description": "opportunity interests passive year-to-date",
                        "title": "Opportunity Interests Passive YTD"
                    },
                    "calculatoryCostsLiquidityRisk": {
                        "type": "number",
                        "description": "calculatory costs of liquidity risks",
                        "title": "Calculatory Costs Liquidity Risk"
                    },
                    "interestLikeCommissions": {
                        "type": "number",
                        "description": "interest like commissions and early repayment penalty",
                        "title": "Interest Like Commissions"
                    },
                    "commissionsResultYtd": {
                        "type": "number",
                        "description": "commissioins result year-to-date",
                        "title": "Commissions Result YTD"
                    },
                    "financingCommissionsYtd": {
                        "type": "number",
                        "description": "commission revenue out of financings year-to-date",
                        "title": "Financing Commissions YTD"
                    },
                    "depositCommissionsYtd": {
                        "type": "number",
                        "description": "commission revenue out of deposits year-to-date",
                        "title": "Deposit Commissions YTD"
                    },
                    "brokerageCommissionsYtd": {
                        "type": "number",
                        "description": "commission revenue out of brokerage year-to-date",
                        "title": "Brokerage Commissions YTD"
                    },
                    "mediumTermBondCommissionsYtd": {
                        "type": "number",
                        "description": "commission revenue out of medium term bonds year-to-date",
                        "title": "Medium Term Bond Commissions YTD"
                    },
                    "custodianCommissionsYtd": {
                        "type": "number",
                        "description": "commission revenue as custodian year-to-date",
                        "title": "Custodian Commissions YTD"
                    },
                    "allInFeeYtd": {
                        "type": "number",
                        "description": "commission revenue out of all-in-fees year-to-date",
                        "title": "All In Fee YTD"
                    },
                    "otherRevenueSecurities": {
                        "type": "number",
                        "description": "other revenue earned with securities",
                        "title": "Other Revenue Securities"
                    },
                    "servicesCommissionsYtd": {
                        "type": "number",
                        "description": "commission revenue out of services year-to-date",
                        "title": "Services Commissions YTD"
                    },
                    "commissionCostsYtd": {
                        "type": "number",
                        "description": "commission costs year-to-date",
                        "title": "Commission Costs YTD"
                    },
                    "fxRevenueYtd": {
                        "type": "number",
                        "description": "revenue out of the foreign exchange business year-to-date",
                        "title": "Foreign Exchange Revenue YTD"
                    },
                    "limitScope": {
                        "type": "number",
                        "description": "limit of a given contract",
                        "title": "Limit Scope"
                    },
                    "activeVolume": {
                        "type": "number",
                        "description": "amount of active volume for the given customer in a bank's point of view",
                        "title": "Active Volume"
                    },
                    "totalCustomerAssets": {
                        "type": "number",
                        "description": "total amount of customer assets",
                        "title": "Total Customer Assets"
                    },
                    "passiveVolume": {
                        "type": "number",
                        "description": "amount of passive volume for the given customer in a bank's point of view",
                        "title": "Passive Volume"
                    },
                    "depositVolume": {
                        "type": "number",
                        "description": "value of customer deposits",
                        "title": "Deposit Volume"
                    },
                    "customerAssets": {
                        "type": "number",
                        "description": "total of customer assets out of core banking (Finnova)",
                        "title": "Customer Assets"
                    },
                    "customerAssetsG2": {
                        "type": "number",
                        "description": "total of customer assets out of G2 (private banking)",
                        "title": "Customer Assets G2"
                    },
                    "investmentSolution": {
                        "type": "string",
                        "description": "investment solution",
                        "title": "Investment Solution"
                    },
                    "investmentSolutionProduct": {
                        "type": "string",
                        "description": "investment solution product",
                        "title": "Investment Solution Product"
                    },
                    "bondsVolume": {
                        "type": "number",
                        "description": "volume of bonds assets",
                        "title": "Bonds Volume"
                    },
                    "fundsVolume": {
                        "type": "number",
                        "description": "volume of funds assets",
                        "title": "Funds Volume"
                    },
                    "ownFundsVolume": {
                        "type": "number",
                        "description": "volume of own funds",
                        "title": "Own Funds Volume"
                    },
                    "sharesVolume": {
                        "type": "number",
                        "description": "volume of shares",
                        "title": "Shares Volume"
                    },
                    "foreignSharesVolume": {
                        "type": "number",
                        "description": "volume of shares (excl. own shares)",
                        "title": "Foreign Shares Volume"
                    },
                    "ownSharesVolume": {
                        "type": "number",
                        "description": "volume of own shares",
                        "title": "Own Shares Volume"
                    },
                    "otherAssetsVolume": {
                        "type": "number",
                        "description": "volume of other assets",
                        "title": "Other Assets Volume"
                    },
                    "structuredProductsVolume": {
                        "type": "number",
                        "description": "volume of structured products",
                        "title": "Structured Products Volume"
                    },
                    "investmentBehaviour": {
                        "type": "string",
                        "description": "type of investment behaviour",
                        "title": "Investment Behaviour"
                    },
                    "investmentBehaviourCount": {
                        "type": "integer",
                        "description": "count of investment behaviour",
                        "title": "Investment Behaviour Count"
                    },
                    "tradingVolume": {
                        "type": "number",
                        "description": "trading volume (amount)",
                        "title": "Trading Volume"
                    },
                    "passiveVolumePrivor": {
                        "type": "number",
                        "description": "passive volume 3rd pillar",
                        "title": "Passive Volume Privor"
                    },
                    "depositVolumePrivor": {
                        "type": "number",
                        "description": "deposit volume 3rd pillar",
                        "title": "Deposit Volume Privor"
                    },
                    "passiveVolumeRevor": {
                        "type": "number",
                        "description": "passive volume 2nd pillar",
                        "title": "Passive Volume Revor"
                    },
                    "depositVolumeRevor": {
                        "type": "number",
                        "description": "deposit volume 2nd pillar",
                        "title": "Deposit Volume Revor"
                    },
                    "productDueDate": {
                        "type": "string",
                        "description": "next due date of a product",
                        "title": "Product Due Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "productDueVolume": {
                        "type": "number",
                        "description": "volume of the product with the next due date",
                        "title": "Product Due Volume"
                    },
                    "dueVolumeFinancing": {
                        "type": "number",
                        "description": "due volume of financing products",
                        "title": "Due Volume Financing"
                    },
                    "dueVolumeInvestment": {
                        "type": "number",
                        "description": "due volume of investment products",
                        "title": "Due Volume Investment"
                    },
                    "dueVolumeProvision": {
                        "type": "number",
                        "description": "due volume of provision products",
                        "title": "Due Volume Provision"
                    },
                    "amortizationsYtd": {
                        "type": "number",
                        "description": "amount of amortizations year-to-date",
                        "title": "Amortizations YTD"
                    },
                    "rating": {
                        "type": "string",
                        "description": "cutomer rating",
                        "title": "Rating"
                    },
                    "financialStatementSubmissionDate": {
                        "type": "string",
                        "description": "date of submission of the financial statement",
                        "title": "Financial Statement Submission Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "resubmissionDate": {
                        "type": "string",
                        "description": "date of resubmission",
                        "title": "Resubmission Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "productsCountLastYear": {
                        "type": "integer",
                        "description": "count of products last year",
                        "title": "Products Count Last Year"
                    },
                    "productsCountYtd": {
                        "type": "integer",
                        "description": "counts of products year-to-date",
                        "title": "Products Count YTD"
                    },
                    "productsPassive": {
                        "type": "integer",
                        "description": "passive products",
                        "title": "Products Passive"
                    },
                    "productsActive": {
                        "type": "integer",
                        "description": "active products",
                        "title": "Products Active"
                    },
                    "productsInvestment": {
                        "type": "integer",
                        "description": "investment products",
                        "title": "Products Investment"
                    },
                    "productsProvision": {
                        "type": "integer",
                        "description": "provision products",
                        "title": "Products Provision"
                    },
                    "productsOther": {
                        "type": "integer",
                        "description": "other products",
                        "title": "Products Other"
                    },
                    "lastFinancialPlanning": {
                        "type": "string",
                        "description": "last financial planning",
                        "title": "Last Financial Planning"
                    },
                    "lastProvisionPlanning": {
                        "type": "string",
                        "description": "last provision planning",
                        "title": "Last Provision Planning"
                    },
                    "totalVolumeForeignBanks": {
                        "type": "integer",
                        "description": "total volume managed by foreign banks",
                        "title": "Total Volume Foreign Banks"
                    },
                    "investmentVolumeForeignBanks": {
                        "type": "string",
                        "description": "investment volume managed by foreign banks",
                        "title": "Investment Volume Foreign Banks"
                    },
                    "investmentLeadsVolume": {
                        "type": "integer",
                        "description": "volume of investment leads",
                        "title": "Investment Leads Volume"
                    },
                    "financingVolumeForeignBanks": {
                        "type": "string",
                        "description": "financing volume managed by foreign banks",
                        "title": "Financing Volume Foreign Banks"
                    },
                    "financingLeadsVolume": {
                        "type": "integer",
                        "description": "volume of financing leads",
                        "title": "Financing Leads Volume"
                    },
                    "liquidityVolumeForeignBanks": {
                        "type": "string",
                        "description": "liquidity volume managed by foreign banks",
                        "title": "Liquidity Volume Foreign Banks"
                    },
                    "liquidityLeadsVolume": {
                        "type": "integer",
                        "description": "volume of liquidity leads",
                        "title": "Liquidity Leads Volume"
                    },
                    "targetRelationshipManagement": {
                        "type": "string",
                        "description": "target relationship management",
                        "title": "Target Relationship Management"
                    },
                    "groups": {
                        "type": "string",
                        "description": "customer groups",
                        "title": "Groups"
                    },
                    "groupsCode": {
                        "type": "string",
                        "description": "customer groups code",
                        "title": "Groups Code"
                    },
                    "kubiRatio": {
                        "type": "number",
                        "description": "kubi ratio",
                        "title": "Kubi Ratio"
                    },
                    "businessVolumeYtd": {
                        "type": "number",
                        "description": "business Volume Ytd",
                        "title": "business Volume Ytd"
                    },
                    "businessVolumeYearPeriod": {
                        "type": "number",
                        "description": "business Volume Year Period",
                        "title": "business Volume Year Period"
                    },
                    "loadDate": {
                        "type": "string",
                        "description": "date, when this dataset was loaded",
                        "title": "Load Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "dataSnapshotDate": {
                        "type": "string",
                        "description": "snapshot date, when this dataset was generated/calculated",
                        "title": "Data Snapshot Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "consultantId": {
                        "type": "string",
                        "description": "ID of the consultant",
                        "title": "consultant ID",
                        "x-recordOriginException": true
                    },
                    "consultantIdG2": {
                        "type": "string",
                        "description": "ID of the consultant G2",
                        "title": "consultant ID G2",
                        "x-recordOriginException": true
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "dbiiRollingLast12Month": {
                        "type": "string",
                        "description": "sum of DBII of the last 12 month",
                        "title": "sum of DBII of the last 12 month"
                    },
                    "dbiiExtrapolated": {
                        "type": "number",
                        "description": "Extrapolated DBII out of the trend of the last 12 month",
                        "title": "Extrapolated DBII"
                    },
                    "confession": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "targetCustomerGroup": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "targetSupport": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "relationId": {
                        "type": "string",
                        "description": "Links different customers into one relation group",
                        "title": "Relation ID"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Holds all customer book data",
                "additionalProperties": false
            },
            "CustomerBookCustomerBookBalance": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "amountDue": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount due"
                    },
                    "balanceSubType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "balanceAtComment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at comment"
                    },
                    "balanceType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance type"
                    },
                    "entryDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Entry date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "isAtThirdParty": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is at third party"
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid from",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/Code"
                    }
                },
                "additionalProperties": false
            },
            "CustomerBusinessModels": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the customer",
                        "title": "Customer ID"
                    },
                    "partner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Partner"
                    },
                    "activity": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Aktivit\u00e4ten"
                    },
                    "lastModifiedAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Datetime of last modification",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "recourses": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ressourcen"
                    },
                    "valueProposition": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Wertangebote"
                    },
                    "customerRelation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Kundenbeziehung"
                    },
                    "channels": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Kan\u00e4le"
                    },
                    "customerSegment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Kundensegment"
                    },
                    "spendingStructure": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ausgabenstruktur"
                    },
                    "revenueSources": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Einnahmequllen"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Hold information about customer business models for 'Kompetenzzerntrum Nachfolgeplanung'",
                "additionalProperties": false
            },
            "CustomerConsultation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Document version. You need to send current version if you want to update.",
                        "title": "Version"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Display name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creation date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Modified date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "dossierData": {
                        "$ref": "#/components/schemas/CustomerConsultationDossierData"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomer"
                    },
                    "customers": {
                        "type": "array",
                        "description": "The customers which belong to the customer group",
                        "title": "Group customers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCustomer"
                        }
                    },
                    "customerGroup": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomerGroup"
                    },
                    "originalCustomer": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomer"
                    },
                    "originalCustomers": {
                        "type": "array",
                        "description": "The original not modified customers which belong to the customer group",
                        "title": "Original Group customers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCustomer"
                        }
                    },
                    "originalCustomerGroup": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomerGroup"
                    },
                    "ownerCustomer": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomerConsultationOwnerCustomer"
                    },
                    "ownerConsultant": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomerConsultationOwnerConsultant"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "The object with which Evoja HTML operates",
                "required": [
                    "creationDate",
                    "dossierData",
                    "ownerConsultant",
                    "ownerCustomer"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationAgendaAgenda": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationAgendaItem"
                        }
                    },
                    "sections": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Sections",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationAgendaSection"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "items",
                    "sections"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationAgendaItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "defaultCheckedState": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Default checked state"
                    },
                    "isOwnItem": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is own item"
                    },
                    "isChecked": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is checked"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "isChecked",
                    "isOwnItem",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationAgendaSection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "collapsed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Collapsed"
                    },
                    "imageKey": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Image key",
                        "nullable": false,
                        "minLength": 1
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationAgendaItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "collapsed",
                    "items",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceBalance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceParameterData"
                    },
                    "stockData": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData",
                    "stockData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "alternativeTitle": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "creationClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryCustomerConsultationBalanceCategoryCreationClass"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "availabilityType": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryCustomerConsultationBalanceCategoryAvailabilityType"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Record origin"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "default": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryDefault"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryCustomerConsultationBalanceCategoryCoreType"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "creationClass",
                    "title",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryCustomerConsultationBalanceCategoryAvailabilityType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryCustomerConsultationBalanceCategoryCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryCustomerConsultationBalanceCategoryCreationClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryDefault": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "displayClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultDisplayClass"
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultOutputClass"
                    },
                    "detailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail group",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultDetailGroup"
                        }
                    },
                    "availabilityDetailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Availability detail group",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultAvailabilityDetailGroup"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "displayClass",
                    "outputClass"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultAvailabilityDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryDefaultCustomerConsultationBalanceCategoryDefaultOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryMapping": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "category": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingCategory"
                    },
                    "creationClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingCreationClass"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingAssetSegment"
                    },
                    "displayClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingDisplayClass"
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingOutputClass"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Record origin"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "category",
                    "creationClass"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingAssetSegment": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingCategory": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/balance\\/category\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BalanceCategory"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingCreationClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceCategoryMappingCustomerConsultationBalanceCategoryMappingOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceConsultationAvailability": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "selectiveAvailableAmounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Selective available amounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceConsultationSelectiveAvailableAmount"
                        }
                    },
                    "definedAvailableAmounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Defined available amounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceConsultationDefinedAvailableAmount"
                        }
                    },
                    "wishedAmounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Wished amounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceConsultationWishedAmount"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "definedAvailableAmounts",
                    "selectiveAvailableAmounts",
                    "wishedAmounts"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceConsultationCustomerBalance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "creationClass": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceSubType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceAtComment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at comment"
                    },
                    "bank": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "isAtThirdParty": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is at third party"
                    },
                    "title": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Title"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "currentMarketPrice": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Current market price",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "provisionAccountType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "creationClass",
                    "isAtThirdParty"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "balanceAccounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance accounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceConsultationCustomerBalance"
                        }
                    },
                    "availability": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceConsultationAvailability"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "availability",
                    "balanceAccounts"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceConsultationDefinedAvailableAmount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "availableAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Available amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceConsultationSelectiveAvailableAmount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "isSelected": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is selected"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "isSelected"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceConsultationWishedAmount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "nkkPercent": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Nkk percent",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "wishedAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Wished amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "nkkPercent",
                    "wishedAmount"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceParameterAssetsGraphicsColor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "categoryId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Category id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "categoryColor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Category color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "coreConfigs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core configs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCoreConfig"
                        }
                    },
                    "categories": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Categories",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceCategory"
                        }
                    },
                    "categoryMapping": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Category mapping",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceCategoryMapping"
                        }
                    },
                    "additions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Additions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceProductAddition"
                        }
                    },
                    "balanceCategories": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance categories",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "balanceCreationClassAssets": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance creation class assets",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "balanceCreationClassLiabilities": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance creation class liabilities",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "balanceDetailGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance detail groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "balanceOutputClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance output classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "balanceDisplayClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance display classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "balanceAvailabilityTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance availability types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "pledgeTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pledge types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "loanProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Loan products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "bankList": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Bank list",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "assetSegments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset segments",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "assetClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "assetTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "investmentAssetClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment asset classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetClass"
                        }
                    },
                    "investmentStrategies": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment strategies",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategy"
                        }
                    },
                    "investmentFondsBreakdowns": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment fonds breakdowns",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentFondsBreakdown"
                        }
                    },
                    "investmentAssetAllocations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment asset allocations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetAllocation"
                        }
                    },
                    "assetsGraphicsColors": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Assets graphics colors",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceParameterAssetsGraphicsColor"
                        }
                    },
                    "depotAccountAdditionalDetails": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Depot account additional details",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceParameterDepotAccountAdditionalDetails"
                        }
                    },
                    "provisionAccountTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Provision account types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "additions",
                    "assetClasses",
                    "assetSegments",
                    "assetTypes",
                    "assetsGraphicsColors",
                    "balanceAvailabilityTypes",
                    "balanceCategories",
                    "balanceCreationClassAssets",
                    "balanceCreationClassLiabilities",
                    "balanceDetailGroups",
                    "balanceDisplayClasses",
                    "balanceOutputClasses",
                    "bankList",
                    "categories",
                    "categoryMapping",
                    "coreConfigs",
                    "depotAccountAdditionalDetails",
                    "investmentAssetAllocations",
                    "investmentAssetClasses",
                    "investmentFondsBreakdowns",
                    "investmentStrategies",
                    "loanProducts",
                    "pledgeTypes",
                    "provisionAccountTypes"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceParameterDepotAccountAdditionalDetails": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "keypath": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Keypath",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceProductAddition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Record origin"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionCoreType"
                        }
                    },
                    "displayClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionDisplayClass"
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionOutputClass"
                    },
                    "detailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail group",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionDetailGroup"
                        }
                    },
                    "availabilityDetailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Availability detail group",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionAvailabilityDetailGroup"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "displayClass",
                    "outputClass"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionAvailabilityDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceProductAdditionCustomerConsultationBalanceProductAdditionOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "number": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Number"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number formatted",
                        "nullable": false,
                        "minLength": 1
                    },
                    "accountGroup": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountCustomerConsultationBalanceStockAccountAccountGroup"
                    },
                    "connectedAccountsRef": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Connected accounts ref",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountCustomerConsultationBalanceStockAccountConnectedAccountsRef"
                        }
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "openedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Opened date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "closedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Closed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "balanceAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "reportingCurrency": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountCurrency"
                    },
                    "accountCurrency": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountCurrency"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "iban": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Iban"
                    },
                    "usedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Used amount"
                    },
                    "creditLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Credit limit"
                    },
                    "reservedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Reserved amount"
                    },
                    "safeNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Safe number"
                    },
                    "safeLocation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Safe location"
                    },
                    "withdrawalAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal amount"
                    },
                    "withdrawalUsedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal used amount"
                    },
                    "withdrawalAvailableAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal available amount"
                    },
                    "withdrawalPeriod": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "withdrawalPeriodDesc": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "withdrawalCancellation": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Withdrawal cancellation",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountWithdrawalCancellation"
                        }
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountCustomerConsultationBalanceStockAccountSuspension"
                        }
                    },
                    "pledge": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pledge",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountPledge"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accountCurrency",
                    "accountGroup",
                    "accountType",
                    "number",
                    "pledge",
                    "reportingCurrency",
                    "withdrawalCancellation"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountCurrency": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "balance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Balance"
                    },
                    "disponibleBalance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Disponible balance"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "balance",
                    "currency",
                    "currencyIso"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountCustomerConsultationBalanceStockAccountAccountGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/group\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Accountgroup"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountCustomerConsultationBalanceStockAccountConnectedAccountsRef": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountCustomerConsultationBalanceStockAccountSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number formatted",
                        "nullable": false,
                        "minLength": 1
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creation date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Modification date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric",
                        "nullable": false,
                        "minLength": 1
                    },
                    "rubricExtension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric extension"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "currencyIsoRef": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "investmentStrategy": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "serviceClass": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "portfolioKind": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "pledge": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pledge",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountGroupPledge"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "creationDate",
                    "currencyIso",
                    "currencyIsoRef",
                    "pledge"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountGroupPledge": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "creditor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creditor"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountPledge": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "clearingNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Clearing number"
                    },
                    "creditor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creditor"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountPosition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "positionId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Position id"
                    },
                    "instrumentId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Instrument id"
                    },
                    "valuationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valuation date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "status": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Status"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Blocked"
                    },
                    "securityCode": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Security code"
                    },
                    "quantity": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Quantity"
                    },
                    "value": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Value"
                    },
                    "availableAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Available amount"
                    },
                    "blockedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Blocked amount"
                    },
                    "valueInPortfolioCurrency": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Value in portfolio currency"
                    },
                    "valueInReportingCurrency": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Value in reporting currency"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountPositionCustomerConsultationBalanceStockAccountPositionAccount"
                    },
                    "portfolio": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountPositionCustomerConsultationBalanceStockAccountPositionPortfolio"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountPositionCustomerConsultationBalanceStockAccountPositionCustomer"
                    },
                    "contract": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountPositionContract"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "account",
                    "accountType",
                    "assetSegment",
                    "customer",
                    "portfolio",
                    "quantity",
                    "value",
                    "valueCurrencyIso",
                    "valueInPortfolioCurrency",
                    "valueInReportingCurrency"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountPositionContract": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "productName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product name"
                    },
                    "productNameExtension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product name extension"
                    },
                    "beginDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Begin date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "accruedInterest": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Accrued interest"
                    },
                    "accIntInReportingCcy": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Acc int in reporting ccy"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountPositionCustomerConsultationBalanceStockAccountPositionAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountPositionCustomerConsultationBalanceStockAccountPositionCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountPositionCustomerConsultationBalanceStockAccountPositionPortfolio": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/group\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Accountgroup"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockAccountWithdrawalCancellation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "from": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "to": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "To",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockCustomerBalance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "balanceType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance type",
                        "enum": [
                            "asset",
                            "liability"
                        ]
                    },
                    "isAtThirdParty": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is at third party"
                    },
                    "entryDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Entry date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "amountDue": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount due"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "balanceAtComment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at comment"
                    },
                    "balanceAtType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceSubType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockCustomerBalanceCustomerConsultationBalanceStockCustomerBalanceCustomer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "balanceSubType",
                    "balanceType",
                    "customer",
                    "isAtThirdParty",
                    "valueCurrencyIso"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockCustomerBalanceCustomerConsultationBalanceStockCustomerBalanceCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Accounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccount"
                        }
                    },
                    "accountGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountGroup"
                        }
                    },
                    "accountPositions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account positions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockAccountPosition"
                        }
                    },
                    "customerBalances": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer balances",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockCustomerBalance"
                        }
                    },
                    "investmentValors": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment valors",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockInvestmentValor"
                        }
                    },
                    "investmentFinancings": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment financings",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockInvestmentFinancing"
                        }
                    },
                    "financingTranches": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing tranches",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBalanceStockFinancingTranche"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accountGroups",
                    "accountPositions",
                    "accounts",
                    "customerBalances",
                    "financingTranches",
                    "investmentFinancings",
                    "investmentValors"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockFinancingTranche": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "loanProduct": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockFinancingTrancheCustomerConsultationBalanceStockFinancingTrancheLoanProduct"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockFinancingTrancheCustomerConsultationBalanceStockFinancingTrancheCustomer"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "term": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Term"
                    },
                    "interestRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Interest rate"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "customer",
                    "interestRate",
                    "loanProduct",
                    "sort",
                    "startDate",
                    "term"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockFinancingTrancheCustomerConsultationBalanceStockFinancingTrancheCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockFinancingTrancheCustomerConsultationBalanceStockFinancingTrancheLoanProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockInvestmentFinancing": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "orderNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order number"
                    },
                    "currentMarketPrice": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Current market price",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockInvestmentFinancingAddress"
                    },
                    "realEstateType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockInvestmentFinancingCustomerConsultationBalanceStockInvestmentFinancingCustomer"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceOnly": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Balance only"
                    },
                    "frameNr": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Frame nr"
                    },
                    "isEMortage": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is e mortage"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "address",
                    "assetSegment",
                    "currentMarketPrice",
                    "customer",
                    "realEstateType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockInvestmentFinancingAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street",
                        "nullable": false,
                        "minLength": 1
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code",
                        "nullable": false,
                        "minLength": 1
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockInvestmentFinancingCustomerConsultationBalanceStockInvestmentFinancingCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockInvestmentValor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accruedInterest": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Accrued interest",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "accruedInterestDays": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Accrued interest days"
                    },
                    "accruedInterestCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "contractSize": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Contract size"
                    },
                    "denomination": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Denomination"
                    },
                    "dividendYield": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Dividend yield",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "duration": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Duration",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "expiryDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Expiry date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "issuerCode": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Issuer code"
                    },
                    "statusCode": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Status code"
                    },
                    "timeToMaturity": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Time to maturity"
                    },
                    "warrantorCode": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Warrantor code"
                    },
                    "valorShortName": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "valorLongName": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "valorReferenceText": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "valorType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "creditRating": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Credit rating"
                    },
                    "marketCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Market code"
                    },
                    "price": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Price"
                    },
                    "pricePerUnit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Price per unit"
                    },
                    "priceType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "valorNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valor number",
                        "nullable": false,
                        "minLength": 1
                    },
                    "isinNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Isin number"
                    },
                    "symbol": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Symbol",
                        "nullable": false,
                        "minLength": 1
                    },
                    "riskCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "riskValorType": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceStockInvestmentValorRiskValorType"
                    },
                    "countryIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "industryType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "telekursInstrumentType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "telekursFondsType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "price",
                    "riskCurrencyIso",
                    "riskValorType",
                    "valorType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBalanceStockInvestmentValorRiskValorType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "valorType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetClass": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSubClass": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "valorType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicIntermediateView": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicIntermediateViewCustomerConsultationBasicIntermediateViewProduct"
                    },
                    "description": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "image": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicIntermediateViewCustomerConsultationBasicIntermediateViewImage"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "description",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicIntermediateViewCustomerConsultationBasicIntermediateViewImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicIntermediateViewCustomerConsultationBasicIntermediateViewProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "category": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductCustomerConsultationBasicProductCategory"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductCustomerConsultationBasicProductCoreType"
                        }
                    },
                    "maxOccurrence": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Max occurrence"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "category",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductAddition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionProduct"
                    },
                    "displayClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionDisplayClass"
                    },
                    "detailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail group",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionDetailGroup"
                        }
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionOutputClass"
                    },
                    "changeType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Change type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionChangeType"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "displayClass",
                    "outputClass",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionChangeType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductAdditionCustomerConsultationBasicProductAdditionProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCategory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "icon": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Icon",
                        "nullable": false,
                        "minLength": 1
                    },
                    "image": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Image",
                        "nullable": false,
                        "minLength": 1
                    },
                    "color": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "checklistChangeType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Checklist change type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "checklistPowerOfAttorney": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Checklist power of attorney",
                        "nullable": false,
                        "minLength": 1
                    },
                    "coreType": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductCategoryCustomerConsultationBasicProductCategoryCoreType"
                    },
                    "defaults": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductCategoryDefaults"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "coreType",
                    "defaults",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCategoryCustomerConsultationBasicProductCategoryCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCategoryDefaults": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "displayClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsDisplayClass"
                    },
                    "detailGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail group",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsDetailGroup"
                        }
                    },
                    "outputClass": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsOutputClass"
                    },
                    "changeType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Change type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsChangeType"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "displayClass",
                    "outputClass"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsChangeType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsDetailGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsDisplayClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCategoryDefaultsCustomerConsultationBasicProductCategoryDefaultsOutputClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCustomerConsultationBasicProductCategory": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductCustomerConsultationBasicProductCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductDocument": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicProductDocumentCustomerConsultationBasicProductDocumentProduct"
                    },
                    "document": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Document",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductDocumentDocument"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "document",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductDocumentCustomerConsultationBasicProductDocumentProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicProductDocumentDocument": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "source": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Source",
                        "nullable": false,
                        "minLength": 1
                    },
                    "url": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Url",
                        "nullable": false,
                        "minLength": 1
                    },
                    "title": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Title",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesBasicServices": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesParameterData"
                    },
                    "stockData": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockData"
                    },
                    "generatedData": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesGeneratedData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData",
                    "stockData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationAuthorizedCustomer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "relatedCustomerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Related customer id"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "salutation": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "nationality": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "legalAddress": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationAuthorizedCustomerAddress"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "legalAddress"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationAuthorizedCustomerAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City",
                        "nullable": false,
                        "minLength": 1
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street",
                        "nullable": false,
                        "minLength": 1
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationChange": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "checklistId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Checklist id"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "subType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "products": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationProduct"
                        }
                    },
                    "externalProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "External products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationProduct"
                        }
                    },
                    "powersOfAttorney": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Powers of attorney",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationPowerOfAttorney"
                        }
                    },
                    "dislikedProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Disliked products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationDataCustomerConsultationBasicServicesConsultationDataDislikedProducts"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "externalProducts",
                    "powersOfAttorney",
                    "products"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationDataCustomerConsultationBasicServicesConsultationDataDislikedProducts": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationPowerOfAttorney": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "contractId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Contract id"
                    },
                    "checklistId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Checklist id"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Parent id"
                    },
                    "isRemoved": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is removed"
                    },
                    "contractType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "signatureRight": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "relationType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "relationOther": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Relation other"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment",
                        "nullable": false,
                        "minLength": 1
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationAuthorizedCustomer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "contractType",
                    "customer",
                    "isRemoved",
                    "signatureRight"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "product": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationProductCustomerConsultationBasicServicesConsultationProductProduct"
                    },
                    "changes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Changes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationChange"
                        }
                    },
                    "powersOfAttorney": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Powers of attorney",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationPowerOfAttorney"
                        }
                    },
                    "target": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesConsultationProductCustomerConsultationBasicServicesConsultationProductTarget"
                    },
                    "checklistId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Checklist id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "changes",
                    "order",
                    "powersOfAttorney",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationProductCustomerConsultationBasicServicesConsultationProductProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesConsultationProductCustomerConsultationBasicServicesConsultationProductTarget": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/[^\\/]+\\/.*)[^\\/]$",
                        "x-collection": [
                            "*"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesGeneratedData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "resultColumn": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesGeneratedResultColumn"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "resultColumn"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesGeneratedResultColumn": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "newProducts": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "New products"
                    },
                    "checklistCompleted": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Checklist completed"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "checklistCompleted",
                    "newProducts"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "coreConfigs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core configs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCoreConfig"
                        }
                    },
                    "basicProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProduct"
                        }
                    },
                    "basicProductCategories": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic product categories",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductCategory"
                        }
                    },
                    "basicProductDocuments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic product documents",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductDocument"
                        }
                    },
                    "basicProductAdditions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic product additions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicProductAddition"
                        }
                    },
                    "basicIntermediateViews": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic intermediate views",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicIntermediateView"
                        }
                    },
                    "countries": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Countries",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "customerSalutations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer salutations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "basicServicesCategories": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic services categories",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "displayClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Display classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "outputClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Output classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "detailGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Detail groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "changeTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Change types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "changeSubTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Change sub types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "blockingReasons": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Blocking reasons",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "cardSuspensions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Card suspensions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "contractTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Contract types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "signatureRights": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Signature rights",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "bdlRelations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Bdl relations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "basicIntermediateViews",
                    "basicProductAdditions",
                    "basicProductCategories",
                    "basicProductDocuments",
                    "basicProducts",
                    "basicServicesCategories",
                    "bdlRelations",
                    "blockingReasons",
                    "cardSuspensions",
                    "changeSubTypes",
                    "changeTypes",
                    "contractTypes",
                    "coreConfigs",
                    "countries",
                    "customerSalutations",
                    "detailGroups",
                    "displayClasses",
                    "outputClasses",
                    "signatureRights"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "number": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Number"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number formatted",
                        "nullable": false,
                        "minLength": 1
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCustomer"
                    },
                    "connectedAccountsRef": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Connected accounts ref",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccountCustomerConsultationBasicServicesStockAccountConnectedAccountsRef"
                        }
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccountCustomerConsultationBasicServicesStockAccountSuspension"
                        }
                    },
                    "reportingCurrency": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccountCurrency"
                    },
                    "accountCurrency": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccountCurrency"
                    },
                    "safeNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Safe number"
                    },
                    "safeLocation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Safe location"
                    },
                    "usedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Used amount"
                    },
                    "creditLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Credit limit"
                    },
                    "reservedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Reserved amount"
                    },
                    "openedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Opened date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "closedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Closed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "balanceAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "withdrawalAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal amount"
                    },
                    "withdrawalUsedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal used amount"
                    },
                    "withdrawalAvailableAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal available amount"
                    },
                    "withdrawalPeriod": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "withdrawalPeriodDesc": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "withdrawalCancellation": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Withdrawal cancellation",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccountWithdrawalCancellation"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accountCurrency",
                    "accountType",
                    "customer",
                    "number",
                    "reportingCurrency",
                    "withdrawalCancellation"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockAccountCurrency": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "balance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Balance"
                    },
                    "disponibleBalance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Disponible balance"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "balance",
                    "currency",
                    "currencyIso"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockAccountCustomerConsultationBasicServicesStockAccountConnectedAccountsRef": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/[^\\/]+\\/.*)[^\\/]$",
                        "x-collection": [
                            "*"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockAccountCustomerConsultationBasicServicesStockAccountSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockAccountWithdrawalCancellation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "from": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "to": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "To",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockCard": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCardCustomerConsultationBasicServicesStockCardAccount"
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCardCustomerConsultationBasicServicesStockCardSuspension"
                        }
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCustomer"
                    },
                    "customerName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer name"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Expiry",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "state": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "cardCategory": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "cardType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "cardNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Card number"
                    },
                    "customerCardLanguageCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer card language code"
                    },
                    "isCreditCard": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Is credit card"
                    },
                    "issueDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Issue date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "initialFee": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "renewalFee": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "dailyLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Daily limit"
                    },
                    "monthlyLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Monthly limit"
                    },
                    "directDebitLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Direct debit limit"
                    },
                    "offlineLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Offline limit"
                    },
                    "ownDailyLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Own daily limit"
                    },
                    "ownMonthlyLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Own monthly limit"
                    },
                    "totalCardLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Total card limit"
                    },
                    "totalCashLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Total cash limit"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "account",
                    "cardType",
                    "customer"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockCardCustomerConsultationBasicServicesStockCardAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockCardCustomerConsultationBasicServicesStockCardSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockContract": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "number": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number"
                    },
                    "validFromDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid from date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntilDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "contractType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "contractStatus": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "account": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccount"
                        }
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCustomer"
                    },
                    "assignedAccountsRef": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Assigned accounts ref",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockContractCustomerConsultationBasicServicesStockContractAssignedAccountsRef"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "account",
                    "contractStatus",
                    "contractType",
                    "customer"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockContractCustomerConsultationBasicServicesStockContractAssignedAccountsRef": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockCustomer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer number"
                    },
                    "customerNumberAlternate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer number alternate"
                    },
                    "designation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Designation"
                    },
                    "fullDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Full designation"
                    },
                    "legalAddress": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCustomerAddress"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name"
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "sex": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "salutation": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "nationality": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatus": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatusDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Marital status date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "firstNamePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name partner"
                    },
                    "lastNamePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name partner"
                    },
                    "birthDatePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date partner",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "titlePartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "sexPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "salutationPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "nationalityPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatusPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatusPartnerDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Marital status partner date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockCustomerAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street"
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Accounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccount"
                        }
                    },
                    "cards": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Cards",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCard"
                        }
                    },
                    "eservices": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Eservices",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockEService"
                        }
                    },
                    "lsvs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Lsvs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockLsv"
                        }
                    },
                    "standingOrders": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Standing orders",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockStandingOrder"
                        }
                    },
                    "contracts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Contracts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockContract"
                        }
                    },
                    "powersOfAttorney": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Powers of attorney",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockPowerOfAttorney"
                        }
                    },
                    "productRating": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockProductRating"
                    },
                    "settlementCosts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Settlement costs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockSettlementCosts"
                        }
                    },
                    "coreSettings": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core settings",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockSetting"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accounts",
                    "cards",
                    "contracts",
                    "coreSettings",
                    "eservices",
                    "lsvs",
                    "powersOfAttorney",
                    "settlementCosts",
                    "standingOrders"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockEService": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Active"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockEServiceCustomerConsultationBasicServicesStockEServiceCustomer"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Accounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccount"
                        }
                    },
                    "eServiceType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accounts",
                    "active",
                    "customer",
                    "eServiceType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockEServiceCustomerConsultationBasicServicesStockEServiceCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockLsv": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockLsvCustomerConsultationBasicServicesStockLsvAccount"
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockLsvCustomerConsultationBasicServicesStockLsvSuspension"
                        }
                    },
                    "lsvSubscriber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Lsv subscriber"
                    },
                    "orderType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "account",
                    "orderType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockLsvCustomerConsultationBasicServicesStockLsvAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockLsvCustomerConsultationBasicServicesStockLsvSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockPowerOfAttorney": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "number": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number"
                    },
                    "collective": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Collective"
                    },
                    "authorizedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Authorized date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validFromDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid from date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntilDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "contractType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "signatureRight": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "account": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockAccount"
                        }
                    },
                    "attorneyDonor": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCustomer"
                    },
                    "attorneyReceiver": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockCustomer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "account",
                    "attorneyReceiver",
                    "contractType",
                    "signatureRight"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockProductRating": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingCustomer"
                    },
                    "favoriteProduct": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Favorite product",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingFavoriteProduct"
                        }
                    },
                    "dislikedProduct": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Disliked product",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingDislikedProduct"
                        }
                    },
                    "possibleProduct": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Possible product",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingPossibleProduct"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingDislikedProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingFavoriteProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockProductRatingCustomerConsultationBasicServicesStockProductRatingPossibleProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/basic\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "BasicProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockSetting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "setting": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "value": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "portfolioId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Portfolio id"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id"
                    },
                    "contractId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Contract id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockSettlementCosts": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockSettlementCostsCustomerConsultationBasicServicesStockSettlementCostsCustomer"
                    },
                    "year": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Year"
                    },
                    "accountManagement": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Account management"
                    },
                    "shippingProcessing": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Shipping processing"
                    },
                    "postPayment": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Post payment"
                    },
                    "payments": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Payments"
                    },
                    "bookingFees": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Booking fees"
                    },
                    "switchTransactions": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Switch transactions"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer",
                    "year"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockSettlementCostsCustomerConsultationBasicServicesStockSettlementCostsCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockStandingOrder": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockStandingOrderCustomerConsultationBasicServicesStockStandingOrderAccount"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockStandingOrderCustomerConsultationBasicServicesStockStandingOrderCustomer"
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationBasicServicesStockStandingOrderCustomerConsultationBasicServicesStockStandingOrderSuspension"
                        }
                    },
                    "orderType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "recipient": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Recipient"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "period": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "executionDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Execution date"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "account",
                    "customer",
                    "orderType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockStandingOrderCustomerConsultationBasicServicesStockStandingOrderAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockStandingOrderCustomerConsultationBasicServicesStockStandingOrderCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationBasicServicesStockStandingOrderCustomerConsultationBasicServicesStockStandingOrderSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistChecklist": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "common": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "financing": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "financeCockpit": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "retirement": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "provision": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "investment": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "requisition": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "balance": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "basicServices": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "pos": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModule"
                    },
                    "trash": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistTrash"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "trash"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "isChecked": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is checked"
                    },
                    "isOwnItem": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is own item"
                    },
                    "isHidden": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is hidden"
                    },
                    "displayCondition": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Display condition"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "isChecked",
                    "isOwnItem",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistModule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "module": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistModuleCustomerConsultationChecklistModuleModule"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "collapsed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Collapsed"
                    },
                    "discussed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Discussed"
                    },
                    "showsResultColumnItem": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Shows result column item"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "useCases": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Use cases",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationChecklistUseCase"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "collapsed",
                    "discussed",
                    "module",
                    "name",
                    "order",
                    "useCases"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistModuleCustomerConsultationChecklistModuleModule": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/module\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Module"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistSection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "collapsed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Collapsed"
                    },
                    "imageKey": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Image key",
                        "nullable": false,
                        "minLength": 1
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationChecklistItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "collapsed",
                    "items",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistTrash": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "module": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistTrashCustomerConsultationChecklistTrashModule"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "collapsed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Collapsed"
                    },
                    "discussed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Discussed"
                    },
                    "showsResultColumnItem": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Shows result column item"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationChecklistItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "collapsed",
                    "discussed",
                    "items",
                    "module",
                    "name",
                    "order"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistTrashCustomerConsultationChecklistTrashModule": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/module\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Module"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationChecklistUseCase": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "sections": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Sections",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationChecklistSection"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name",
                    "sections"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCheckpointItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "status": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Status",
                        "enum": [
                            "gray",
                            "green",
                            "yellow",
                            "red"
                        ]
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name",
                    "status"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCheckpointSection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "sectionName": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "module": {
                        "$ref": "#/components/schemas/CustomerConsultationCheckpointSectionCustomerConsultationCheckpointSectionModule"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCheckpointItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "items",
                    "module",
                    "sectionName"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCheckpointSectionCustomerConsultationCheckpointSectionModule": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/module\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Module"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCommonCommon": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonParameterData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCommonConsultationAnnotation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "pageId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Page id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "file": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotationCustomerConsultationCommonConsultationAnnotationFile"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "file"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCommonConsultationAnnotationCustomerConsultationCommonConsultationAnnotationFile": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCommonConsultationAnnotations": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "common": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Common",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "balance": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "basicServices": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic services",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "financing": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "retirement": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Retirement",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "retirementPlay": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Retirement play",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "provision": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Provision",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "provisionPlay": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Provision play",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "requisition": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Requisition",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "investment": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "investmentProfile": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment profile",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "financeCockpit": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Finance cockpit",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "investSave": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Invest save",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "investBudget": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Invest budget",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "pensionPillar3": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension pillar3",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "pensionCapitalpay": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension capitalpay",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "pensionCapitalpay2": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension capitalpay2",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotation"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCommonConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "dossierStatus": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "nextContact": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonConsultationNextContact"
                    },
                    "annotations": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonConsultationAnnotations"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "dossierStatus"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCommonConsultationNextContact": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "date": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "fullTime": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Full time"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "date",
                    "fullTime"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCommonParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "coreConfigs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core configs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCoreConfig"
                        }
                    },
                    "customerSexes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer sexes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "customerMaritalStatuses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer marital statuses",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "customerTitles": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer titles",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "customerConnectionTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer connection types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "nogaCodes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Noga codes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "contactVariations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Contact variations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "professions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Professions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "salutations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Salutations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "nationalities": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Nationalities",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "dossierStatuses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Dossier statuses",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "contactVariations",
                    "coreConfigs",
                    "customerConnectionTypes",
                    "customerMaritalStatuses",
                    "customerSexes",
                    "customerTitles",
                    "dossierStatuses",
                    "nationalities",
                    "nogaCodes",
                    "professions",
                    "salutations"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCommonTranslatable": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "de": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "German translation"
                    },
                    "en": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "English translation"
                    },
                    "fr": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "French translation"
                    },
                    "it": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Italian translation"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCoreConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "key": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Key",
                        "nullable": false,
                        "minLength": 1
                    },
                    "default": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Default",
                        "nullable": false,
                        "minLength": 1
                    },
                    "value": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Value",
                        "nullable": false,
                        "minLength": 1
                    },
                    "app": {
                        "$ref": "#/components/schemas/CustomerConsultationCoreConfigCustomerConsultationCoreConfigApp"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCoreConfigCustomerConsultationCoreConfigApp": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/app\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "App"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCoreTextBlock": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "text": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "maxCharacters": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Max characters"
                    },
                    "output": {
                        "$ref": "#/components/schemas/CustomerConsultationCoreTextBlockCustomerConsultationCoreTextBlockOutput"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "text"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCoreTextBlockCustomerConsultationCoreTextBlockOutput": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/screen\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Screen"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCustomer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "openedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Opened date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customerType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "isResidential": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is residential"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Record origin",
                        "nullable": false,
                        "minLength": 1
                    },
                    "fidlegSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customerConnectionType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customerNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer number"
                    },
                    "customerNumberAlternate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer number alternate"
                    },
                    "designation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Designation"
                    },
                    "fullDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Full designation"
                    },
                    "legalAddress": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomerAddress"
                    },
                    "contact": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Contact",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCustomerContact"
                        }
                    },
                    "family": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Family",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCustomerFamily"
                        }
                    },
                    "relation": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Relation",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCustomerRelation"
                        }
                    },
                    "consultant": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomerCustomerConsultationCustomerConsultant"
                    },
                    "customerGroup": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCustomerGroup"
                        }
                    },
                    "mainType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "language": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "languageIso": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Language iso"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name"
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "birthPlace": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth place"
                    },
                    "nativePlace": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Native place"
                    },
                    "salutation": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "sex": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatus": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatusDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Marital status date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "nationality": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "nationality2nd": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "countryOfBirth": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "provisionExtraInfo": {
                        "$ref": "#/components/schemas/CustomerConsultationProvisionPersonExtraInfo"
                    },
                    "retirementExtraInfo": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementPersonExtraInfo"
                    },
                    "firstNamePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name partner"
                    },
                    "lastNamePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name partner"
                    },
                    "birthDatePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date partner",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "birthPlacePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth place partner"
                    },
                    "nativePlacePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Native place partner"
                    },
                    "salutationPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "titlePartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "sexPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatusPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "maritalStatusPartnerDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Marital status partner date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "nationalityPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "nationalityPartner2nd": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "countryOfBirthPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "provisionExtraInfoPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationProvisionPersonExtraInfo"
                    },
                    "retirementExtraInfoPartner": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementPersonExtraInfo"
                    },
                    "noga": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultant",
                    "contact",
                    "customerGroup",
                    "family",
                    "isResidential",
                    "relation"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCustomerAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City",
                        "nullable": false,
                        "minLength": 1
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street",
                        "nullable": false,
                        "minLength": 1
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCustomerConsultationOwnerConsultant": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Owner consultant",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/consultant\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Consultant"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCustomerConsultationOwnerCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Owner customer",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/|\\/person\\/customer\\-group\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer",
                            "CustomerGroup"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCustomerContact": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "uri": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Uri",
                        "nullable": false,
                        "minLength": 1
                    },
                    "preferred": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Preferred"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Protocol",
                        "nullable": false,
                        "minLength": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "value": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Value",
                        "nullable": false,
                        "minLength": 1
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment",
                        "nullable": false,
                        "minLength": 1
                    },
                    "variation": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "preferred"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCustomerCustomerConsultationCustomerConsultant": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Replaced with extref since this is not used anywhere",
                        "title": "Consultant reference",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/consultant\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Consultant"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationCustomerFamily": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "parentRelation": {
                        "type": "string",
                        "description": "Use legacy format (\"0\", \"1\", \"2\") for compatibility reason",
                        "title": "Parent relation type",
                        "enum": [
                            "0",
                            "1",
                            "2"
                        ]
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name"
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "liableFor": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Liable for"
                    },
                    "Comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCustomerGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationCustomerRelation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "origin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Origin"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "relationType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "relationPart": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationDocumentBasketDocument": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Identifier",
                        "nullable": false,
                        "minLength": 1
                    },
                    "isSelected": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is selected"
                    },
                    "selectedPages": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Selected pages",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "isSelected"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationDocumentBasketDocumentBasket": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "combinedDocuments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Combined documents",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationDocumentBasketDocument"
                        }
                    },
                    "separateDocuments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Separate documents",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationDocumentBasketDocument"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "combinedDocuments",
                    "separateDocuments"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationDossierData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "common": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonCommon"
                    },
                    "agenda": {
                        "$ref": "#/components/schemas/CustomerConsultationAgendaAgenda"
                    },
                    "notes": {
                        "$ref": "#/components/schemas/CustomerConsultationNotesNotes"
                    },
                    "checklist": {
                        "$ref": "#/components/schemas/CustomerConsultationChecklistChecklist"
                    },
                    "documentBasket": {
                        "$ref": "#/components/schemas/CustomerConsultationDocumentBasketDocumentBasket"
                    },
                    "checkpoint": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Checkpoint",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCheckpointSection"
                        }
                    },
                    "validations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Validations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationValidationsValidation"
                        }
                    },
                    "requisition": {
                        "$ref": "#/components/schemas/CustomerConsultationRequisitionRequisition"
                    },
                    "retirement": {
                        "$ref": "#/components/schemas/CustomerConsultationDossierDataRetirement"
                    },
                    "financing": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingFinancing"
                    },
                    "financeCockpit": {
                        "type": "object",
                        "description": "@todo replace me",
                        "title": "Finance cockpit",
                        "additionalProperties": true
                    },
                    "financingInterestMargins": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingInterestMarginsFinancingInterestMargins"
                    },
                    "investment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentInvestment"
                    },
                    "basicServices": {
                        "$ref": "#/components/schemas/CustomerConsultationBasicServicesBasicServices"
                    },
                    "balance": {
                        "$ref": "#/components/schemas/CustomerConsultationBalanceBalance"
                    },
                    "etools": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsETools"
                    },
                    "promotion": {
                        "$ref": "#/components/schemas/CustomerConsultationPromotionPromotion"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "agenda",
                    "checklist",
                    "common",
                    "documentBasket",
                    "notes"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationDossierDataRetirement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "retirement": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementRetirement"
                    },
                    "provision": {
                        "type": "object",
                        "description": "@todo replace me",
                        "title": "Provision",
                        "additionalProperties": true
                    },
                    "selectedSubmoduleIndex": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Selected submodule index"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "provision",
                    "retirement"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investmentBudget": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationInvestmentBudget"
                    },
                    "investmentSave": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationInvestmentSave"
                    },
                    "pensionGeneral": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionGeneral"
                    },
                    "pensionPillar3": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionPillar3"
                    },
                    "pensionCapitalPay": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionCapitalPay"
                    },
                    "pensionCapitalPay2": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionCapitalPay2"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationInvestmentBudget": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "income": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationInvestmentBudgetIncome"
                    },
                    "expenses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Expenses",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationInvestmentBudgetExpensesGroup"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "expenses",
                    "income"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationInvestmentBudgetExpensesGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "details": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationInvestmentBudgetExpensesItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "items",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationInvestmentBudgetExpensesItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "icon": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Icon",
                        "nullable": false,
                        "minLength": 1
                    },
                    "color": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "position": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationInvestmentBudgetExpensesItemPosition"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationInvestmentBudgetExpensesItemPosition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "range": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Range",
                        "enum": [
                            "top",
                            "bottom"
                        ]
                    },
                    "x": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "X"
                    },
                    "y": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Y"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "range",
                    "x",
                    "y"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationInvestmentBudgetIncome": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "family": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetIncomeFamily"
                    },
                    "children": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Children"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "children",
                    "family"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationInvestmentSave": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "targets": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Targets",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationInvestmentSaveTarget"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "targets"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationInvestmentSaveTarget": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "color": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "initialAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Initial amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "annualAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Annual amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Duration"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentSaveStrategy"
                    },
                    "interestRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interest rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "annualAmount",
                    "duration",
                    "initialAmount",
                    "interestRate",
                    "strategy",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionCapitalPay": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "pensionAge": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Pension age"
                    },
                    "payouts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Payouts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionCapitalPayPayout"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "payouts",
                    "pensionAge"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionCapitalPay2": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionCapitalPay2Customer"
                    },
                    "partner": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionCapitalPay2Partner"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer",
                    "partner"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionCapitalPay2Customer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "pensionAge": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Pension age"
                    },
                    "payout": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Payout",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "payout",
                    "pensionAge"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionCapitalPay2Partner": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "confession": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                    },
                    "payout": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Payout",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "payout"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionCapitalPayPayout": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                    },
                    "value": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Value",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "value"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionGeneral": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "location": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionLocation"
                    },
                    "maritalStatus": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                    },
                    "confession": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                    },
                    "birthYear": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Birth year"
                    },
                    "children": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Children"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "birthYear",
                    "children"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionLocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "zip": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Zip"
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City",
                        "nullable": false,
                        "minLength": 1
                    },
                    "state": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "State",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "zip"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionPillar3": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "interestRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interest rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Duration"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionPillar3Customer"
                    },
                    "partner": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationPensionPillar3Partner"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer",
                    "interestRate",
                    "partner"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionPillar3Customer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "incomeType": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                    },
                    "income": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Income",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "pillar3": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pillar3",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "income",
                    "incomeType",
                    "pillar3"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsConsultationPensionPillar3Partner": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "confession": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                    },
                    "pillar3": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pillar3",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "pillar3"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsETools": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investmentBudgetConfig": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetConfig"
                    },
                    "investmentBudgetGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment budget groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetGroup"
                        }
                    },
                    "investmentBudgetStatistics": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment budget statistics",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetStatistics"
                        }
                    },
                    "investmentBudgetFamilyOptions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment budget family options",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetIncomeFamily"
                        }
                    },
                    "investmentSaveStrategies": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment save strategies",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentSaveStrategy"
                        }
                    },
                    "investmentSaveTargets": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment save targets",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentSaveTargetOption"
                        }
                    },
                    "investmentSaveConfig": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentSaveConfig"
                    },
                    "pensionMaritalStatuses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension marital statuses",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                        }
                    },
                    "pensionGenders": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension genders",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                        }
                    },
                    "pensionConfessions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension confessions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                        }
                    },
                    "pensionPayoutTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension payout types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                        }
                    },
                    "pensionPillar3Config": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionPillar3Config"
                    },
                    "pensionPillar3Types": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pension pillar3 types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionDropdownOption"
                        }
                    },
                    "pensionCapitalPay2Config": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionCapitalPay2Config"
                    },
                    "pensionCapitalPayConfig": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionCapitalPayConfig"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investmentBudgetConfig",
                    "investmentBudgetFamilyOptions",
                    "investmentBudgetGroups",
                    "investmentBudgetStatistics",
                    "investmentSaveConfig",
                    "investmentSaveStrategies",
                    "investmentSaveTargets",
                    "pensionCapitalPay2Config",
                    "pensionCapitalPayConfig",
                    "pensionConfessions",
                    "pensionGenders",
                    "pensionMaritalStatuses",
                    "pensionPayoutTypes",
                    "pensionPillar3Config",
                    "pensionPillar3Types"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "incomeSlider": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetSliderConfig"
                    },
                    "incomeSliderPercent": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetSliderConfig"
                    },
                    "chartColor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Chart color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "incomeSlider",
                    "incomeSliderPercent"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "details": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetGroupItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "items",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetGroupItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "icon": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Icon",
                        "nullable": false,
                        "minLength": 1
                    },
                    "color": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetIncomeFamily": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "children": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Children"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "children",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetSliderConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "default": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Default"
                    },
                    "min": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Min"
                    },
                    "max": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Max"
                    },
                    "step": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Step"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "default",
                    "max",
                    "min",
                    "step"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetStatistics": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "family": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Family",
                        "nullable": false,
                        "minLength": 1
                    },
                    "children": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Children"
                    },
                    "range": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Range",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetStatisticsRange"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "children",
                    "range"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetStatisticsItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "itemId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Item id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentBudgetStatisticsRange": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "income": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Income"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEToolsParameterInvestmentBudgetStatisticsItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "income",
                    "items"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentSaveConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "targetsLimit": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Targets limit"
                    },
                    "durationLimit": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Duration limit"
                    },
                    "colors": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Colors",
                        "nullable": false,
                        "minLength": 1,
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "durationLimit",
                    "targetsLimit"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentSaveStrategy": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "interestRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interest rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "interestRate",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterInvestmentSaveTargetOption": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionCapitalPay2Config": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "colors": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionCapitalPay2ConfigColors"
                    },
                    "payout": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionConfigNumber"
                    },
                    "pensionAge": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionConfigInteger"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "colors",
                    "payout",
                    "pensionAge"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionCapitalPay2ConfigColors": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "federal": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Federal",
                        "nullable": false,
                        "minLength": 1
                    },
                    "other": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Other",
                        "nullable": false,
                        "minLength": 1
                    },
                    "free": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Free",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionCapitalPayConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "colors": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionCapitalPayConfigColors"
                    },
                    "pensionAge": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionConfigInteger"
                    },
                    "payout": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionConfigNumber"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "colors",
                    "payout",
                    "pensionAge"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionCapitalPayConfigColors": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "federal": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Federal",
                        "nullable": false,
                        "minLength": 1
                    },
                    "other": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Other",
                        "nullable": false,
                        "minLength": 1
                    },
                    "free": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Free",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionConfigInteger": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "default": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Default"
                    },
                    "min": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Min"
                    },
                    "max": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Max"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "default",
                    "max",
                    "min"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionConfigNumber": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "default": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Default"
                    },
                    "min": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Min"
                    },
                    "max": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Max"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "default",
                    "max",
                    "min"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionDropdownOption": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "value": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Value"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "title",
                    "value"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionPillar3Config": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "employerMax": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Employer max",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "employeeMax": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Employee max",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "interest": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionPillar3ConfigInterest"
                    },
                    "period": {
                        "$ref": "#/components/schemas/CustomerConsultationEToolsParameterPensionPillar3ConfigPeriod"
                    },
                    "interestsColor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interests color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "capitalColor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Capital color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "pensionAgeMale": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Pension age male"
                    },
                    "pensionAgeFemale": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Pension age female"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "employeeMax",
                    "employerMax",
                    "interest",
                    "pensionAgeFemale",
                    "pensionAgeMale",
                    "period"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionPillar3ConfigInterest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "default": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Default"
                    },
                    "min": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Min"
                    },
                    "max": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Max"
                    },
                    "step": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Step"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "default",
                    "max",
                    "min",
                    "step"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEToolsParameterPensionPillar3ConfigPeriod": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "default": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Default"
                    },
                    "min": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Min"
                    },
                    "max": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Max"
                    },
                    "step": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Step"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "default",
                    "max",
                    "min",
                    "step"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationEntityCode": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "text": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "textShort": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "group": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Group",
                        "nullable": false,
                        "minLength": 1
                    },
                    "number": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number",
                        "nullable": false,
                        "minLength": 1
                    },
                    "order": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "addition": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Addition"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Record origin"
                    },
                    "parentCodeId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Parent code id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "text"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingAffordability": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "realEstateType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingAffordabilityCustomerConsultationFinancingAffordabilityRealEstateType"
                    },
                    "criteria": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Criteria",
                        "enum": [
                            "netBorrowingRate",
                            "grossBorrowingRate",
                            "income"
                        ]
                    },
                    "operator": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Operator",
                        "enum": [
                            "<",
                            "<=",
                            "=",
                            ">=",
                            ">"
                        ]
                    },
                    "condition": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Condition"
                    },
                    "affordabilityRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Affordability rate"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "affordabilityRate",
                    "condition",
                    "criteria",
                    "operator",
                    "order"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingAffordabilityCustomerConsultationFinancingAffordabilityRealEstateType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/realestatetype\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingRealEstateType"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingCashFlowType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "transferability": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Transferability"
                    },
                    "income": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Income"
                    },
                    "reducing": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Reducing"
                    },
                    "isAdditionalExpenseOrEarning": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is additional expense or earning"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "income",
                    "isAdditionalExpenseOrEarning",
                    "name",
                    "order",
                    "reducing",
                    "transferability"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingCollateralType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "steeringCode": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Steering code"
                    },
                    "steeringCodeBorrowingBase": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Steering code borrowing base"
                    },
                    "acceptanceFactor": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Acceptance factor"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingCollateralTypeCustomerConsultationFinancingCollateralTypeCoreType"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "acceptanceFactor",
                    "name",
                    "order",
                    "steeringCode",
                    "steeringCodeBorrowingBase"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingCollateralTypeCustomerConsultationFinancingCollateralTypeCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationAffordability": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "revenues": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Revenues",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationAffordabilityBox"
                        }
                    },
                    "efforts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Efforts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationAffordabilityBox"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "efforts",
                    "revenues"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationAffordabilityBox": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingCashFlowType"
                    },
                    "value": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Value",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "position": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationAffordabilityBoxPosition"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "position",
                    "type",
                    "value"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationAffordabilityBoxPosition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "x": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "X"
                    },
                    "y": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Y"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "x",
                    "y"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationAmortization": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "beginningYearShift": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Beginning year shift"
                    },
                    "customYearlyAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Custom yearly amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "flexibleAmortisation": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Flexible amortisation"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "flexibleAmortisation",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "object": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationDataCustomerConsultationFinancingConsultationDataObject"
                    },
                    "persistenceObject": {
                        "$ref": "#/components/schemas/ConsultationPersistenceFinancingObject"
                    },
                    "realEstate": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationRealEstate"
                    },
                    "funding": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFunding"
                    },
                    "affordability": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationAffordability"
                    },
                    "fundingProposal": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingProposal"
                    },
                    "forecastInterest": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Forecast interest",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "isFlaTriggered": {
                        "type": "boolean",
                        "description": "This flag should be set to TRUE when FLA is triggered in UI",
                        "title": "Finnova Loan Advisory (FLA) triggered"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "affordability",
                    "funding",
                    "fundingProposal",
                    "isFlaTriggered",
                    "realEstate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationDataCustomerConsultationFinancingConsultationDataObject": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "The /financing/object reference that the consultation was created from",
                        "title": "Existing financing reference",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/object\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingObject"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFinancingProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "prediction": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "prediction",
                    "profile"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFunding": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "equityItems": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Equity items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingEquityItem"
                        }
                    },
                    "collateralItems": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Collateral items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingCollateralItem"
                        }
                    },
                    "overvalueEquityItem": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingEquityItem"
                    },
                    "firstMortgagePercentage": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First mortgage percentage",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "secondMortgagePercentage": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Second mortgage percentage",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "collateralItems",
                    "equityItems",
                    "firstMortgagePercentage"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingCollateralItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingCollateralType"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "acceptanceFactor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Acceptance factor",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "acceptanceFactor",
                    "amount",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingEquityItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingEquityType"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingProposal": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amortisationInterval": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amortisation interval",
                        "enum": [
                            "year",
                            "month"
                        ]
                    },
                    "startDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "currentAlternativeIndex": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Current alternative index"
                    },
                    "mutableAlternatives": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Mutable alternatives",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingProposalAlternative"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amortisationInterval",
                    "currentAlternativeIndex",
                    "mutableAlternatives",
                    "startDate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingProposalAlternative": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amortisation": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationAmortization"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingProposalItem"
                        }
                    },
                    "chosenAlternative": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Chosen alternative"
                    },
                    "mandatoryAlternative": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Mandatory alternative"
                    },
                    "customCharges": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Custom charges",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "signees": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Signees",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingProposalSignee"
                        }
                    },
                    "financingProfile": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFinancingProfile"
                    },
                    "financingProfiling": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingProposalAlternativeCustomerConsultationFinancingConsultationFundingProposalAlternativeFinancingProfiling"
                    },
                    "financingProfilingModified": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Financing profiling modified"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amortisation",
                    "chosenAlternative",
                    "financingProfilingModified",
                    "items",
                    "mandatoryAlternative",
                    "signees"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingProposalAlternativeCustomerConsultationFinancingConsultationFundingProposalAlternativeFinancingProfiling": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/[^\\/]+\\/.*)[^\\/]$",
                        "x-collection": [
                            "*"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingProposalItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "isExisting": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is existing"
                    },
                    "product": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingProposalItemCustomerConsultationFinancingConsultationFundingProposalItemProduct"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationFundingProposalItemCustomerConsultationFinancingConsultationFundingProposalItemDuration"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "includesForwardInterest": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Includes forward interest"
                    },
                    "customInterest": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Custom interest",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "customStartDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Custom start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customEndDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Custom end date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "duration",
                    "includesForwardInterest",
                    "isExisting",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingProposalItemCustomerConsultationFinancingConsultationFundingProposalItemDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingProposalItemCustomerConsultationFinancingConsultationFundingProposalItemProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/loanproduct\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingLoanProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationFundingProposalSignee": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "title": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Title",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationRealEstate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingRealEstateType"
                    },
                    "price": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Price",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "investment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Investment",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "garage": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Garage",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "customBorrowingBase": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Custom borrowing base",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationRealEstateAddress"
                    },
                    "retailer": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationRealEstateRetailer"
                    },
                    "customObjectImage": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationRealEstateCustomerConsultationFinancingConsultationRealEstateCustomObjectImage"
                    },
                    "description": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Description"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "garage",
                    "investment",
                    "price",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationRealEstateAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street",
                        "nullable": false,
                        "minLength": 1
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code"
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Latitude"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Longitude"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationRealEstateCustomerConsultationFinancingConsultationRealEstateCustomObjectImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingConsultationRealEstateRetailer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Object id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "url": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Url",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingDuration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "productType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product type",
                        "enum": [
                            "fix",
                            "var",
                            "rollover"
                        ]
                    },
                    "durationInYears": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Duration in years"
                    },
                    "mortgageType": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Mortgage type",
                        "enum": [
                            1,
                            2
                        ]
                    },
                    "refiRate": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingDurationCustomerConsultationFinancingDurationRefiRate"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "durationInYears",
                    "mortgageType",
                    "productType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingDurationCustomerConsultationFinancingDurationRefiRate": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/refi\\-interest\\-rate\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "RefundingInterestRates"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingEquityType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "isLiquidity": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is liquidity"
                    },
                    "isEffective": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is effective"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "isEffective",
                    "isLiquidity",
                    "name",
                    "order"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingFinancing": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingParameterData"
                    },
                    "stockData": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockData"
                    },
                    "generatedData": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingGeneratedData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData",
                    "stockData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingForward": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingForwardCustomerConsultationFinancingForwardDuration"
                    },
                    "forwardRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Forward rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "forwardFrom": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Forward from"
                    },
                    "forwardUntil": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Forward until"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "duration",
                    "forwardFrom",
                    "forwardRate",
                    "forwardUntil"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingForwardCustomerConsultationFinancingForwardDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingGeneratedData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "isNewFinancing": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is new financing"
                    },
                    "effectiveEquity": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Effective equity",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "resultColumn": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingGeneratedResultColumn"
                    },
                    "violatedCheckpoints": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Violated checkpoints"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "effectiveEquity",
                    "isNewFinancing",
                    "resultColumn",
                    "violatedCheckpoints"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingGeneratedResultColumn": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "objectCost": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Object cost",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "financingTotal": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Financing total",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "affordabilityPercent": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Affordability percent",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "monthlyCharge": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Monthly charge",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "checklistCompleted": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Checklist completed"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "affordabilityPercent",
                    "checklistCompleted",
                    "financingTotal",
                    "monthlyCharge",
                    "objectCost"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingHoliday": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "dateRanges": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Date ranges",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingHolidayDateRange"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "dateRanges"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingHolidayDateRange": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "endDate",
                    "name",
                    "startDate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingInterestMarginsConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "products": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingInterestMarginsConsultationProduct"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "products"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingInterestMarginsConsultationProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingInterestMarginsConsultationProductCustomerConsultationFinancingInterestMarginsConsultationProductProduct"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingInterestMarginsConsultationProductCustomerConsultationFinancingInterestMarginsConsultationProductDuration"
                    },
                    "interest": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interest",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "duration",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingInterestMarginsConsultationProductCustomerConsultationFinancingInterestMarginsConsultationProductDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingInterestMarginsConsultationProductCustomerConsultationFinancingInterestMarginsConsultationProductProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/loanproduct\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingLoanProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingInterestMarginsFinancingInterestMargins": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingInterestMarginsConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingInterestMarginsParameterData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingInterestMarginsParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "financingDurations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing durations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingDuration"
                        }
                    },
                    "financingLoanProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing loan products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProduct"
                        }
                    },
                    "financingLoanProductGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing loan product groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProductGroup"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "financingDurations",
                    "financingLoanProductGroups",
                    "financingLoanProducts"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLibor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "liborRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Libor rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "term": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Term"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "liborRate",
                    "term"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLoanProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "sortProposal": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort proposal"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "shortName": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "additionalInfo": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "defaultDuration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductDefaultDuration"
                    },
                    "availableDurations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Available durations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductAvailableDurations"
                        }
                    },
                    "liborRate": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductLiborRate"
                    },
                    "startDateEditable": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date editable",
                        "enum": [
                            "new",
                            "existing",
                            "both",
                            "none"
                        ]
                    },
                    "endDateEditable": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date editable",
                        "enum": [
                            "new",
                            "existing",
                            "both",
                            "none"
                        ]
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductCoreType"
                        }
                    },
                    "defaultTerm": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Default term"
                    },
                    "durationType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Duration type"
                    },
                    "isBuildingLoan": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is building loan"
                    },
                    "productType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "productGroup": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductProductGroup"
                    },
                    "usanceType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Usance type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "enableMargin": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Enable margin"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "defaultDuration",
                    "endDateEditable",
                    "isBuildingLoan",
                    "name",
                    "sort",
                    "sortProposal",
                    "startDateEditable"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductAvailableDurations": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductDefaultDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductLiborRate": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/libor\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingLibor"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLoanProductCustomerConsultationFinancingLoanProductProductGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/loanproductgroup\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingLoanProductGroup"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingLoanProductGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "durationType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Duration type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "productType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name",
                    "sort"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "coreConfigs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core configs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCoreConfig"
                        }
                    },
                    "financingProfilingProfiles": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing profiling profiles",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "financingProfilingPredictions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing profiling predictions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "realEstateTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Real estate types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingRealEstateType"
                        }
                    },
                    "equityTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Equity types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingEquityType"
                        }
                    },
                    "collateralTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Collateral types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingCollateralType"
                        }
                    },
                    "loanProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Loan products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProduct"
                        }
                    },
                    "loanProductGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Loan product groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingLoanProductGroup"
                        }
                    },
                    "cashFlowTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Cash flow types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingCashFlowType"
                        }
                    },
                    "affordabilityRules": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Affordability rules",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingAffordability"
                        }
                    },
                    "profilings": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Profilings",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingProfiling"
                        }
                    },
                    "durations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Durations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingDuration"
                        }
                    },
                    "rates": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Rates",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingRate"
                        }
                    },
                    "libors": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Libors",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingLibor"
                        }
                    },
                    "forwards": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Forwards",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingForward"
                        }
                    },
                    "refiInterestRates": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Refi interest rates",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingRefiInterestRate"
                        }
                    },
                    "surchargeUseTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Surcharge use types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeUseType"
                        }
                    },
                    "surchargeLendingRates": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Surcharge lending rates",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeLendingRate"
                        }
                    },
                    "surchargeRealEstateTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Surcharge real estate types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeRealEstateType"
                        }
                    },
                    "holidays": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Holidays",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingHoliday"
                        }
                    },
                    "amortizationTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Amortization types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingParameterFinancingConfiguration"
                    },
                    "lastInterestUpdate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last interest update",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "affordabilityRules",
                    "amortizationTypes",
                    "cashFlowTypes",
                    "collateralTypes",
                    "configuration",
                    "coreConfigs",
                    "durations",
                    "equityTypes",
                    "financingProfilingPredictions",
                    "financingProfilingProfiles",
                    "forwards",
                    "holidays",
                    "lastInterestUpdate",
                    "libors",
                    "loanProductGroups",
                    "loanProducts",
                    "profilings",
                    "rates",
                    "realEstateTypes",
                    "refiInterestRates",
                    "surchargeLendingRates",
                    "surchargeRealEstateTypes",
                    "surchargeUseTypes"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingParameterFinancingConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amortizationStartYearRequired": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Amortization start year required"
                    },
                    "amortizationPolicy": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amortization policy",
                        "enum": [
                            "age",
                            "rate",
                            "comparison"
                        ]
                    },
                    "affordabilityPolicy": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Affordability policy",
                        "enum": [
                            "age",
                            "rate",
                            "comparison"
                        ]
                    },
                    "portals": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Portals",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingParameterPortal"
                        }
                    },
                    "defaultFundingProposalCharges": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Default funding proposal charges",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "defaultFundingProposalChargesExisting": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Default funding proposal charges existing",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "minimumObjectPrice": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Minimum object price",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "dateRangeMonths": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Date range months",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "fundingMonthsForward": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Funding months forward"
                    },
                    "roundingBase": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Rounding base"
                    },
                    "roundAmountsToThousands": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Round amounts to thousands"
                    },
                    "interestIncludesForwardByDefault": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Interest includes forward by default"
                    },
                    "roundTermToEndOfMonth": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Round term to end of month"
                    },
                    "expirationHorizonDays": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Expiration horizon days"
                    },
                    "amortizationCalculatedForWholeAmount": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Amortization calculated for whole amount"
                    },
                    "alternativeFinancingSummationTableLayout": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Alternative financing summation table layout"
                    },
                    "showTwoDecimalPlacesInOutput": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show two decimal places in output"
                    },
                    "showExistingVariantInOutput": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show existing variant in output"
                    },
                    "showFinancingNeedsInOutput": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show financing needs in output"
                    },
                    "hideFundingProposalInOutput": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Hide funding proposal in output"
                    },
                    "hideRenewalZeroSecondMortgage": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Hide renewal zero second mortgage"
                    },
                    "showAdditionalRevenue": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show additional revenue"
                    },
                    "objectDescriptionEnabled": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Object description enabled"
                    },
                    "fundingPageDisplayPercentage": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Funding page display percentage"
                    },
                    "extensionBlocksEnabled": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Extension blocks enabled"
                    },
                    "enableBindingOffers": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Enable binding offers"
                    },
                    "enableSigners": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Enable signers"
                    },
                    "usanceCalculationMode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Usance calculation mode",
                        "enum": [
                            "exact",
                            "highest"
                        ]
                    },
                    "proposalTimelineConfig": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingParameterProposalTimelineConfig"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "affordabilityPolicy",
                    "alternativeFinancingSummationTableLayout",
                    "amortizationCalculatedForWholeAmount",
                    "amortizationPolicy",
                    "amortizationStartYearRequired",
                    "dateRangeMonths",
                    "defaultFundingProposalCharges",
                    "defaultFundingProposalChargesExisting",
                    "enableBindingOffers",
                    "enableSigners",
                    "expirationHorizonDays",
                    "extensionBlocksEnabled",
                    "fundingMonthsForward",
                    "fundingPageDisplayPercentage",
                    "hideFundingProposalInOutput",
                    "hideRenewalZeroSecondMortgage",
                    "interestIncludesForwardByDefault",
                    "minimumObjectPrice",
                    "objectDescriptionEnabled",
                    "portals",
                    "proposalTimelineConfig",
                    "roundAmountsToThousands",
                    "roundTermToEndOfMonth",
                    "roundingBase",
                    "showAdditionalRevenue",
                    "showExistingVariantInOutput",
                    "showFinancingNeedsInOutput",
                    "showTwoDecimalPlacesInOutput",
                    "usanceCalculationMode"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingParameterPortal": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "alphanumericId": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Alphanumeric id"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "url": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Url",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "alphanumericId"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingParameterProposalTimelineConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "showStartLine": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show start line"
                    },
                    "showEndLine": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show end line"
                    },
                    "showChargeFromLine": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show charge from line"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "showChargeFromLine",
                    "showEndLine",
                    "showStartLine"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingProfiling": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "prediction": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Prediction",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    },
                    "profile": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Profile",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    },
                    "limitStart": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Limit start"
                    },
                    "limitEnd": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Limit end"
                    },
                    "defaultProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Default products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingProfilingProduct"
                        }
                    },
                    "availableProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Available products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingProfilingProduct"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "availableProducts",
                    "defaultProducts",
                    "prediction",
                    "profile"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingProfilingProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/loanproduct\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingLoanProduct"
                        ],
                        "nullable": false
                    },
                    "duration": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Duration",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "duration",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingRate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "designation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Designation"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingRateCustomerConsultationFinancingRateDuration"
                    },
                    "baseRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Base rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "capRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Cap rate"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "baseRate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingRateCustomerConsultationFinancingRateDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingRealEstateType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "imageIdentifier": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Image identifier",
                        "nullable": false,
                        "minLength": 1
                    },
                    "surchargeUseType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingRealEstateTypeCustomerConsultationFinancingRealEstateTypeSurchargeUseType"
                    },
                    "realEstateUseType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingRealEstateTypeCustomerConsultationFinancingRealEstateTypeRealEstateUseType"
                    },
                    "realEstateObjectType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingRealEstateTypeCustomerConsultationFinancingRealEstateTypeRealEstateObjectType"
                    },
                    "firstMortgage": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "First mortgage"
                    },
                    "secondMortgage": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Second mortgage"
                    },
                    "withAddition": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "With addition"
                    },
                    "mortgageBorder": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Mortgage border"
                    },
                    "mortgageBorderRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Mortgage border rate"
                    },
                    "secondMortgageBorder": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Second mortgage border"
                    },
                    "secondMortgageBorderRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Second mortgage border rate"
                    },
                    "safeMaxBorrowingBase": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Safe max borrowing base"
                    },
                    "repaymentRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Repayment rate"
                    },
                    "repaymentRule": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Repayment rule"
                    },
                    "maxRepaymentAge": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Max repayment age"
                    },
                    "calcInterestRateFirstMortgage": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Calc interest rate first mortgage"
                    },
                    "calcInterestRateSecondMortgage": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Calc interest rate second mortgage"
                    },
                    "calcUtilityCostRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Calc utility cost rate"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "calcInterestRateFirstMortgage",
                    "calcUtilityCostRate",
                    "firstMortgage",
                    "mortgageBorder",
                    "name",
                    "order",
                    "withAddition"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingRealEstateTypeCustomerConsultationFinancingRealEstateTypeRealEstateObjectType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingRealEstateTypeCustomerConsultationFinancingRealEstateTypeRealEstateUseType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingRealEstateTypeCustomerConsultationFinancingRealEstateTypeSurchargeUseType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/surcharge\\-usetype\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingSurchargeUseType"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingRefiInterestRate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "interestRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interest rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "interestRate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockAmortization": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "description": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Description"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "positionId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Position id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "nextIntervalDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Next interval date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amortizationYear": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Amortization year"
                    },
                    "amortizationType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amortizationType",
                    "amortizationYear",
                    "amount"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockCollateral": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "collateralType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockCollateralCustomerConsultationFinancingStockCollateralCollateralType"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockCollateralCustomerConsultationFinancingStockCollateralCustomer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "collateralType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockCollateralCustomerConsultationFinancingStockCollateralCollateralType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockCollateralCustomerConsultationFinancingStockCollateralCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "objects": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Objects",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingStockObject"
                        }
                    },
                    "tranches": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Tranches",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingStockTranche"
                        }
                    },
                    "amortizations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Amortizations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingStockAmortization"
                        }
                    },
                    "collaterals": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Collaterals",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingStockCollateral"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amortizations",
                    "collaterals",
                    "objects",
                    "tranches"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "account": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationFinancingStockObjectCustomerConsultationFinancingStockObjectAccount"
                        }
                    },
                    "realEstateType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockObjectCustomerConsultationFinancingStockObjectRealEstateType"
                    },
                    "currentMarketPrice": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Current market price",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockObjectCustomerConsultationFinancingStockObjectCustomer"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockObjectAddress"
                    },
                    "frameNr": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Frame nr"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "orderNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order number"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "address",
                    "currentMarketPrice",
                    "customer",
                    "realEstateType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockObjectAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street",
                        "nullable": false,
                        "minLength": 1
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code",
                        "nullable": false,
                        "minLength": 1
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockObjectCustomerConsultationFinancingStockObjectAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockObjectCustomerConsultationFinancingStockObjectCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockObjectCustomerConsultationFinancingStockObjectRealEstateType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/realestatetype\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingRealEstateType"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockTranche": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "loanProduct": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockTrancheCustomerConsultationFinancingStockTrancheLoanProduct"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingStockTrancheCustomerConsultationFinancingStockTrancheCustomer"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "term": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Term"
                    },
                    "interestRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Interest rate"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "customer",
                    "interestRate",
                    "loanProduct",
                    "sort",
                    "startDate",
                    "term"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockTrancheCustomerConsultationFinancingStockTrancheCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingStockTrancheCustomerConsultationFinancingStockTrancheLoanProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeLendingRate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "rate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeLendingRateCustomerConsultationFinancingSurchargeLendingRateDuration"
                    },
                    "realEstateUseType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeLendingRateCustomerConsultationFinancingSurchargeLendingRateRealEstateUseType"
                    },
                    "lendingRateStart": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Lending rate start"
                    },
                    "lendingRateEnd": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Lending rate end"
                    },
                    "lendingRateType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Lending rate type",
                        "enum": [
                            "brut",
                            "net"
                        ]
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "lendingRateEnd",
                    "lendingRateStart",
                    "lendingRateType",
                    "rate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeLendingRateCustomerConsultationFinancingSurchargeLendingRateDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeLendingRateCustomerConsultationFinancingSurchargeLendingRateRealEstateUseType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeRealEstateType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "realestatetype": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeRealEstateTypeCustomerConsultationFinancingSurchargeRealEstateTypeRealestatetype"
                    },
                    "firstMortgageRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First mortgage rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "secondMortgageRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Second mortgage rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "withAdditionRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "With addition rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "firstMortgageRate",
                    "realestatetype",
                    "secondMortgageRate",
                    "withAdditionRate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeRealEstateTypeCustomerConsultationFinancingSurchargeRealEstateTypeRealestatetype": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/realestatetype\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingRealEstateType"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeUseType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "rate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeUseTypeCustomerConsultationFinancingSurchargeUseTypeDuration"
                    },
                    "realEstateUseType": {
                        "$ref": "#/components/schemas/CustomerConsultationFinancingSurchargeUseTypeCustomerConsultationFinancingSurchargeUseTypeRealEstateUseType"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "duration",
                    "rate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeUseTypeCustomerConsultationFinancingSurchargeUseTypeDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationFinancingSurchargeUseTypeCustomerConsultationFinancingSurchargeUseTypeRealEstateUseType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetAllocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetAllocationCustomerConsultationInvestmentAssetAllocationStrategy"
                    },
                    "range": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetAllocationCustomerConsultationInvestmentAssetAllocationRange"
                    },
                    "allocation": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Allocation",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetAllocationAllocation"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "allocation",
                    "strategy"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetAllocationAllocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "avg": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Avg",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "min": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Min",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "max": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Max",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "assetClass": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetAllocationAllocationCustomerConsultationInvestmentAssetAllocationAllocationAssetClass"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "assetClass",
                    "avg",
                    "max",
                    "min"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetAllocationAllocationCustomerConsultationInvestmentAssetAllocationAllocationAssetClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/assetclass\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentAssetClass"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetAllocationCustomerConsultationInvestmentAssetAllocationRange": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/range\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentRange"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetAllocationCustomerConsultationInvestmentAssetAllocationStrategy": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/strategy\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentStrategy"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetClass": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "calculationPriority": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Calculation priority"
                    },
                    "displayPriority": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Display priority"
                    },
                    "strategyCalculation": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Strategy calculation"
                    },
                    "portal": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Portal"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetClassCustomerConsultationInvestmentAssetClassCoreType"
                        }
                    },
                    "assetSegment": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset segment",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetClassCustomerConsultationInvestmentAssetClassAssetSegment"
                        }
                    },
                    "accountType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetClassCustomerConsultationInvestmentAssetClassAccountType"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetClassCustomerConsultationInvestmentAssetClassAccountType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetClassCustomerConsultationInvestmentAssetClassAssetSegment": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentAssetClassCustomerConsultationInvestmentAssetClassCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationAssetAllocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "assetId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Asset id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "investment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Investment",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "provision": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Provision",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "liquidity": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Liquidity",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investment",
                    "liquidity",
                    "provision"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationCustomerBalance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceSubType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceAtComment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at comment"
                    },
                    "bank": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "isAtThirdParty": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is at third party"
                    },
                    "title": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Title"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "liability": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Liability",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "assetSegment",
                    "isAtThirdParty"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "balanceAccounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance accounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationCustomerBalance"
                        }
                    },
                    "portfolios": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Portfolios",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolio"
                        }
                    },
                    "customerAccountWishReserveAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer account wish reserve amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "assetAllocations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset allocations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationAssetAllocation"
                        }
                    },
                    "savingRate": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationSavingRate"
                    },
                    "savingRateAllocation": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationAssetAllocation"
                    },
                    "isAllocationViewVisited": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is allocation view visited"
                    },
                    "finalizationCompletion": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationFinalizationCompletion"
                    },
                    "depotPositionSales": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Depot position sales",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationDepotPositionSale"
                        }
                    },
                    "customerRiskToleranceProfileValue": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Customer risk tolerance profile value"
                    },
                    "existingRiskTolerance": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationExistingRiskTolerance"
                    },
                    "riskToleranceAnswerStorage": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceAnswerStorage"
                    },
                    "riskToleranceCompletion": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceCompletion"
                    },
                    "riskToleranceDisclaimers": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Risk tolerance disclaimers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceDisclaimer"
                        }
                    },
                    "riskToleranceSkipped": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceSkipped"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "assetAllocations",
                    "balanceAccounts",
                    "depotPositionSales",
                    "isAllocationViewVisited",
                    "portfolios",
                    "riskToleranceDisclaimers"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationDepotPositionSale": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "positionId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Position id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "quantity": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Quantity",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "quantity"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationExistingRiskTolerance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "riskTolerance": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProfile"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Expiration date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "expirationDate",
                    "riskTolerance"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationFinalizationCompletion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "completedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Completed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customerSignature": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationFinalizationCompletionCustomerConsultationInvestmentConsultationFinalizationCompletionCustomerSignature"
                    },
                    "partnerSignature": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationFinalizationCompletionCustomerConsultationInvestmentConsultationFinalizationCompletionPartnerSignature"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "completedDate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationFinalizationCompletionCustomerConsultationInvestmentConsultationFinalizationCompletionCustomerSignature": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationFinalizationCompletionCustomerConsultationInvestmentConsultationFinalizationCompletionPartnerSignature": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationFundSavingPlanFirstPayment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "fromDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "assetId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Asset id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationFundSavingPlanNextPayment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "fromDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "frequency": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Asset id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolio": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accountUnits": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account units",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioAccountUnit"
                        }
                    },
                    "target": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentTarget"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentDuration"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategy"
                    },
                    "strategyExplanation": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioStrategyExplanation"
                    },
                    "targetPortfolioData": {
                        "type": "object",
                        "description": "@todo replace me",
                        "title": "Target portfolio data",
                        "additionalProperties": true
                    },
                    "source": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Source",
                        "enum": [
                            "stock",
                            "local"
                        ]
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric",
                        "nullable": false,
                        "minLength": 1
                    },
                    "accountGroup": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioCustomerConsultationInvestmentConsultationPortfolioAccountGroup"
                    },
                    "portfolioNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Portfolio number"
                    },
                    "portfolioType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accountUnits",
                    "source"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioAccountUnit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioAccountUnitCustomerConsultationInvestmentConsultationPortfolioAccountUnitAccount"
                    },
                    "investmentAmount": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioInvestmentAmount"
                    },
                    "productSelection": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioProductSelection"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investmentAmount"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioAccountUnitCustomerConsultationInvestmentConsultationPortfolioAccountUnitAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioCustomerConsultationInvestmentConsultationPortfolioAccountGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/group\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Accountgroup"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioInvestmentAmount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "onetimeAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Onetime amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "onetimeAmountDepot": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Onetime amount depot",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "periodicAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Periodic amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "periodicAmountDepot": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Periodic amount depot",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "onetimeAmount",
                    "onetimeAmountDepot",
                    "periodicAmount",
                    "periodicAmountDepot"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioInvestmentProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "product": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProduct"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "note": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Note",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "product"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioProductDetails": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "enum": [
                            "debitAndPayoutAccount",
                            "stagger",
                            "fundSavingPlan",
                            "provisionSingleInvestment",
                            "provisionMonthlyInvestment",
                            "provisionPeriodicInvestment",
                            "vestedBenefitSingleInvestment"
                        ]
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "fromDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "account1": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioProductDetailsCustomerConsultationInvestmentConsultationPortfolioProductDetailsAccount1"
                    },
                    "account2": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioProductDetailsCustomerConsultationInvestmentConsultationPortfolioProductDetailsAccount2"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioProductDetailsStaggerItem"
                        }
                    },
                    "firstPayment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationFundSavingPlanFirstPayment"
                    },
                    "nextPayment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationFundSavingPlanNextPayment"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioProductDetailsCustomerConsultationInvestmentConsultationPortfolioProductDetailsAccount"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "monthlyAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Monthly amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "socketAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Socket amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioProductDetailsCustomerConsultationInvestmentConsultationPortfolioProductDetailsAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioProductDetailsCustomerConsultationInvestmentConsultationPortfolioProductDetailsAccount1": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioProductDetailsCustomerConsultationInvestmentConsultationPortfolioProductDetailsAccount2": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioProductDetailsStaggerItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "fromDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioProductSelection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "serviceType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceType"
                    },
                    "serviceSubType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceSubType"
                    },
                    "savingProduct": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProduct"
                    },
                    "investmentProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioInvestmentProduct"
                        }
                    },
                    "productDetails": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationPortfolioProductDetails"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investmentProducts"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationPortfolioStrategyExplanation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "enum": [
                            "choice",
                            "custom"
                        ]
                    },
                    "reason": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceAnswerStorage": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "calculatedProfile": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProfile"
                    },
                    "questionnaireType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceAnswerStorageCustomerConsultationInvestmentConsultationRiskToleranceAnswerStorageQuestionnaireType"
                    },
                    "questionnaireAnswers": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Questionnaire answers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceQuestionnaireAnswer"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "questionnaireAnswers",
                    "questionnaireType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceAnswerStorageCustomerConsultationInvestmentConsultationRiskToleranceAnswerStorageQuestionnaireType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/questionnaire\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentQuestionnaire"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceCompletion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "completedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Completed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntilDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customerSignature": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceCompletionCustomerConsultationInvestmentConsultationRiskToleranceCompletionCustomerSignature"
                    },
                    "partnerSignature": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationRiskToleranceCompletionCustomerConsultationInvestmentConsultationRiskToleranceCompletionPartnerSignature"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "completedDate",
                    "validUntilDate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceCompletionCustomerConsultationInvestmentConsultationRiskToleranceCompletionCustomerSignature": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceCompletionCustomerConsultationInvestmentConsultationRiskToleranceCompletionPartnerSignature": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceDisclaimer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "text": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "acknowledged": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Acknowledged"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "acknowledged",
                    "text"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceQuestionnaireAnswer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "questionUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Question uid",
                        "nullable": false,
                        "minLength": 1
                    },
                    "columnUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Column uid"
                    },
                    "groupRowUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Group row uid"
                    },
                    "answerUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Answer uid"
                    },
                    "extraData": {
                        "type": "object",
                        "description": "@todo replace me",
                        "title": "Extra data",
                        "additionalProperties": true
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "extraData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationRiskToleranceSkipped": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "reason": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "disclaimer": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "disclaimer",
                    "reason"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentConsultationSavingRate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "period": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterSavingPlanPeriod"
                    },
                    "income": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Income",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "expenses": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Expenses",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "expenses",
                    "income",
                    "period"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentCustomerQuestionnaireAllocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "isResidential": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is residential"
                    },
                    "fidlegSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "questionnaire": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Questionnaire",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentCustomerQuestionnaireAllocationCustomerConsultationInvestmentCustomerQuestionnaireAllocationQuestionnaire"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "isResidential"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentCustomerQuestionnaireAllocationCustomerConsultationInvestmentCustomerQuestionnaireAllocationQuestionnaire": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/questionnaire\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentQuestionnaire"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentDocument": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Record origin",
                        "nullable": false,
                        "minLength": 1
                    },
                    "documentType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Document type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentDocumentType"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "documentType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentDocumentType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "documentTypeId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Document type id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "documentTypeName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Document type name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "documentSourceType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Document source type",
                        "enum": [
                            "API",
                            "URL",
                            "internal"
                        ]
                    },
                    "documentSource": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Document source",
                        "nullable": false,
                        "minLength": 1
                    },
                    "documentSourceLocalized": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "documentSourceType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentDuration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "from": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "From"
                    },
                    "to": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "To"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "from",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentFondsBreakdown": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "valorNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valor number",
                        "nullable": false,
                        "minLength": 1
                    },
                    "allocation": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Allocation",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentFondsBreakdownAllocation"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "allocation"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentFondsBreakdownAllocation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "assetClass": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Asset class",
                        "nullable": false,
                        "minLength": 1
                    },
                    "weight": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Weight"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "weight"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentGeneratedData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "portfolios": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Portfolios",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentGeneratedPortfolio"
                        }
                    },
                    "resultColumn": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentGeneratedResultColumn"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "portfolios",
                    "resultColumn"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentGeneratedPortfolio": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recommendedStrategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategy"
                    },
                    "selectedStrategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategy"
                    },
                    "riskElucidationConfirmed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Risk elucidation confirmed"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentGeneratedResultColumn": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investmentAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Investment amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "riskProfile": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Risk profile"
                    },
                    "proposalsCount": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Proposals count"
                    },
                    "finalizationCompleted": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Finalization completed"
                    },
                    "checklistCompleted": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Checklist completed"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "checklistCompleted",
                    "finalizationCompleted",
                    "investmentAmount",
                    "proposalsCount"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentInvestment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterData"
                    },
                    "stockData": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockData"
                    },
                    "generatedData": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentGeneratedData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData",
                    "stockData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterAccountTypeGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Group id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "capability": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Capability"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "capability",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterAllocationPotConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterAllocationPotConfigurationItem"
                    },
                    "liquidity": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterAllocationPotConfigurationItem"
                    },
                    "provision": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterAllocationPotConfigurationItem"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investment",
                    "liquidity",
                    "provision"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterAllocationPotConfigurationItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "color": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "order"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterAssetsGraphicsColor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "categoryId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Category id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "categoryColor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Category color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterCockpitAllocationPotsConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterCockpitAllocationPotsConfigurationItem"
                    },
                    "liquidity": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterCockpitAllocationPotsConfigurationItem"
                    },
                    "provision": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterCockpitAllocationPotsConfigurationItem"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investment",
                    "liquidity",
                    "provision"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterCockpitAllocationPotsConfigurationItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "visible": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Visible"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "order",
                    "visible"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "coreConfigs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core configs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCoreConfig"
                        }
                    },
                    "coreTextBlocks": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core text blocks",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCoreTextBlock"
                        }
                    },
                    "strategies": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Strategies",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "loanProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Loan products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "assetClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "assetSegments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset segments",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "assetTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "serviceClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Service classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "bankList": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Bank list",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "portfolioTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Portfolio types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "fidlegSegments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Fidleg segments",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "investmentProfileSkippingReasons": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment profile skipping reasons",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "investmentProfileSkippingDisclaimers": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment profile skipping disclaimers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "investmentRecommendationDescriptions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment recommendation descriptions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "investmentStrategyRecommendation": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "investmentSavingPlanFrequencies": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment saving plan frequencies",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "strategyConfirmationCustomerConnectionTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Strategy confirmation customer connection types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "investmentRiskEducationKnowledgeAnswer": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "investmentAssetAllocations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment asset allocations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetAllocation"
                        }
                    },
                    "investmentAssetClasses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment asset classes",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentAssetClass"
                        }
                    },
                    "investmentDurations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment durations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentDuration"
                        }
                    },
                    "investmentProducts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment products",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentProduct"
                        }
                    },
                    "investmentDocuments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment documents",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentDocument"
                        }
                    },
                    "investmentRecommendations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment recommendations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentRecommendation"
                        }
                    },
                    "investmentRiskTolerances": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment risk tolerances",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentProfile"
                        }
                    },
                    "investmentServiceTypes": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment service types",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceType"
                        }
                    },
                    "investmentStrategyReturns": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment strategy returns",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyReturn"
                        }
                    },
                    "investmentStrategies": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment strategies",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategy"
                        }
                    },
                    "investmentStrategyAssignments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment strategy assignments",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyAssignment"
                        }
                    },
                    "investmentServiceClassRestrictions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment service class restrictions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceClassRestriction"
                        }
                    },
                    "investmentTargets": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment targets",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentTarget"
                        }
                    },
                    "investmentQuestionnaires": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment questionnaires",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaire"
                        }
                    },
                    "investmentFondsBreakdowns": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment fonds breakdowns",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentFondsBreakdown"
                        }
                    },
                    "investmentCustomerQuestionnaireAllocations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment customer questionnaire allocations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentCustomerQuestionnaireAllocation"
                        }
                    },
                    "accountTypeGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account type groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterAccountTypeGroup"
                        }
                    },
                    "depotAccountAdditionalDetails": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Depot account additional details",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterDepotAccountAdditionalDetails"
                        }
                    },
                    "savingPlanPeriods": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Saving plan periods",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterSavingPlanPeriod"
                        }
                    },
                    "productDetailLinks": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Product detail links",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterProductDetailLink"
                        }
                    },
                    "investmentConfiguration": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterInvestmentConfiguration"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accountTypeGroups",
                    "assetClasses",
                    "assetSegments",
                    "assetTypes",
                    "bankList",
                    "coreConfigs",
                    "coreTextBlocks",
                    "depotAccountAdditionalDetails",
                    "fidlegSegments",
                    "investmentAssetAllocations",
                    "investmentAssetClasses",
                    "investmentConfiguration",
                    "investmentCustomerQuestionnaireAllocations",
                    "investmentDocuments",
                    "investmentDurations",
                    "investmentFondsBreakdowns",
                    "investmentProducts",
                    "investmentProfileSkippingDisclaimers",
                    "investmentProfileSkippingReasons",
                    "investmentQuestionnaires",
                    "investmentRecommendationDescriptions",
                    "investmentRecommendations",
                    "investmentRiskEducationKnowledgeAnswer",
                    "investmentRiskTolerances",
                    "investmentSavingPlanFrequencies",
                    "investmentServiceClassRestrictions",
                    "investmentServiceTypes",
                    "investmentStrategies",
                    "investmentStrategyAssignments",
                    "investmentStrategyRecommendation",
                    "investmentStrategyReturns",
                    "investmentTargets",
                    "loanProducts",
                    "portfolioTypes",
                    "productDetailLinks",
                    "savingPlanPeriods",
                    "serviceClasses",
                    "strategies",
                    "strategyConfirmationCustomerConnectionTypes"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterDepotAccountAdditionalDetails": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "keypath": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Keypath",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterInvestmentConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "assetsGraphicsColors": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Assets graphics colors",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterAssetsGraphicsColor"
                        }
                    },
                    "allocationPotConfiguration": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterAllocationPotConfiguration"
                    },
                    "cockpitAllocationPotsConfiguration": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterCockpitAllocationPotsConfiguration"
                    },
                    "overdraw": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterOverdraw"
                    },
                    "singleVestedPortfolio": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Single vested portfolio"
                    },
                    "portfolioChartHistory": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Portfolio chart history"
                    },
                    "simulationChartColor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Simulation chart color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "simulationChartMaxYears": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Simulation chart max years"
                    },
                    "isSavingRateInputOpenByDefault": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is saving rate input open by default"
                    },
                    "showProposalPortfolioRestAmount": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show proposal portfolio rest amount"
                    },
                    "portfolioTypesLimits": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterPortfolioTypesLimit"
                    },
                    "proposalDefaultPortfolioSelection": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Proposal default portfolio selection"
                    },
                    "investmentProfileDisclaimerEnabled": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Investment profile disclaimer enabled"
                    },
                    "preserveInvestmentProfileAnswersOnRenewal": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Preserve investment profile answers on renewal"
                    },
                    "proposalProductColorConfiguration": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterProposalProductColorConfiguration"
                    },
                    "usePortfolioRestAmount": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Use portfolio rest amount"
                    },
                    "allowZeroInvestmentAmount": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Allow zero investment amount"
                    },
                    "keepWishReserveInPortfolioRestAmount": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Keep wish reserve in portfolio rest amount"
                    },
                    "enableConsultationFinalization": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Enable consultation finalization"
                    },
                    "showDepotAccountValorDetails": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show depot account valor details"
                    },
                    "investmentProposalLoadProductFactsheets": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Investment proposal load product factsheets"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "allocationPotConfiguration",
                    "allowZeroInvestmentAmount",
                    "assetsGraphicsColors",
                    "cockpitAllocationPotsConfiguration",
                    "enableConsultationFinalization",
                    "investmentProfileDisclaimerEnabled",
                    "investmentProposalLoadProductFactsheets",
                    "isSavingRateInputOpenByDefault",
                    "keepWishReserveInPortfolioRestAmount",
                    "overdraw",
                    "portfolioChartHistory",
                    "portfolioTypesLimits",
                    "preserveInvestmentProfileAnswersOnRenewal",
                    "proposalDefaultPortfolioSelection",
                    "proposalProductColorConfiguration",
                    "showDepotAccountValorDetails",
                    "showProposalPortfolioRestAmount",
                    "simulationChartMaxYears",
                    "singleVestedPortfolio",
                    "usePortfolioRestAmount"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterOverdraw": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterOverdrawItem"
                    },
                    "provision": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterOverdrawItem"
                    },
                    "vestedBenefit": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterOverdrawItem"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investment",
                    "provision",
                    "vestedBenefit"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterOverdrawItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "onetime": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Onetime"
                    },
                    "periodic": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Periodic"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "onetime",
                    "periodic"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterPortfolioTypesLimit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investment": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Investment"
                    },
                    "provision": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Provision"
                    },
                    "vestedBenefit": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Vested benefit"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investment",
                    "provision",
                    "vestedBenefit"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterProductDetailLink": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "serviceEntityId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Service entity id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "productDetailsType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product details type",
                        "enum": [
                            "debitAndPayoutAccount",
                            "stagger",
                            "fundSavingPlan",
                            "provisionSingleInvestment",
                            "provisionMonthlyInvestment",
                            "provisionPeriodicInvestment",
                            "vestedBenefitSingleInvestment"
                        ]
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "productDetailsType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterProposalProductColorConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "investment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterProposalProductColors"
                    },
                    "investmentCustom": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterProposalProductColors"
                    },
                    "provisionAccount": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterProposalProductColors"
                    },
                    "rest": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentParameterProposalProductColors"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investment",
                    "investmentCustom",
                    "provisionAccount",
                    "rest"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterProposalProductColors": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "background": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Background",
                        "nullable": false,
                        "minLength": 1
                    },
                    "text": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Text",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentParameterSavingPlanPeriod": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "divisor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Divisor",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "divisor",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "buttonTitle": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "productType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product type",
                        "enum": [
                            "saving",
                            "investment"
                        ]
                    },
                    "variant": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Variant"
                    },
                    "hasNote": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Has note"
                    },
                    "minValue": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Min value"
                    },
                    "maxValue": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Max value"
                    },
                    "investmentDocument": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductInvestmentDocument"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductAssetSegment"
                    },
                    "assetClass": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductAssetClass"
                    },
                    "assetAllocation": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductAssetAllocation"
                    },
                    "productBasicInformation": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductProductBasicInformation"
                    },
                    "knowledgeExperience": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Knowledge experience"
                    },
                    "valorNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valor number"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name",
                    "order",
                    "productType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductAssetAllocation": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/assetallocation\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentAssetAllocation"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductAssetClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/assetclass\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentAssetClass"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductAssetSegment": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductInvestmentDocument": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/document\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentDocument"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductCustomerConsultationInvestmentProductProductBasicInformation": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/[^\\/]+\\/.*)[^\\/]$",
                        "x-collection": [
                            "*"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductPerStrategy": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentProductPerStrategyCustomerConsultationInvestmentProductPerStrategyStrategy"
                    },
                    "product": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Product",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentProductPerStrategyCustomerConsultationInvestmentProductPerStrategyProduct"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductPerStrategyCustomerConsultationInvestmentProductPerStrategyProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/product\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProductPerStrategyCustomerConsultationInvestmentProductPerStrategyStrategy": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/strategy\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentStrategy"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "descriptionTitle": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "descriptionText": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentProfileCustomerConsultationInvestmentProfileCoreType"
                        }
                    },
                    "strategy": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Strategy",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentProfileCustomerConsultationInvestmentProfileStrategy"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "descriptionText",
                    "descriptionTitle",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProfileCustomerConsultationInvestmentProfileCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentProfileCustomerConsultationInvestmentProfileStrategy": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/strategy\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentStrategy"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaire": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "mainGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Main groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireMainGroup"
                        }
                    },
                    "profileRanges": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Profile ranges",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentProfile"
                        }
                    },
                    "coreValue": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Core value"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "mainGroups",
                    "name",
                    "profileRanges"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireImageRef": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "insets": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireImageRefInset"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireImageRefInset": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "left": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Left"
                    },
                    "right": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Right"
                    },
                    "top": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Top"
                    },
                    "bottom": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Bottom"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "bottom",
                    "left",
                    "right",
                    "top"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireMainGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Group id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "showInSlider": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show in slider"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "sections": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Sections",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireSection"
                        }
                    },
                    "maximumPointsOfRanges": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Maximum points of ranges",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnairePointsOfRange"
                        }
                    },
                    "imageRef": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireImageRef"
                    },
                    "output": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireOutput"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "maximumPointsOfRanges",
                    "name",
                    "output",
                    "sections",
                    "showInSlider"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireOutput": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "info": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "imageRef": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireImageRef"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "info",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnairePointsOfRange": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "maximum": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Maximum"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "maximum"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireQuestion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "shortTitle": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "showInfluence": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Show influence"
                    },
                    "columns": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Columns",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestionColumn"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestionGroup"
                        }
                    },
                    "questionType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestionType"
                    },
                    "imageRef": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireImageRef"
                    },
                    "imageOutputRef": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireImageRef"
                    },
                    "coreValue": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Core value"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "columns",
                    "groups",
                    "questionType",
                    "shortTitle",
                    "showInfluence",
                    "sort",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireQuestionAnswer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "text": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "shortText": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "factor": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Factor"
                    },
                    "customerValue": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Customer value"
                    },
                    "groupAnswer": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Group answer"
                    },
                    "coreValue": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Core value"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customerValue",
                    "groupAnswer",
                    "shortText",
                    "sort",
                    "text"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireQuestionColumn": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "answers": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Answers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestionAnswer"
                        }
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestionType"
                    },
                    "coreValue": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Core value"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "answers",
                    "title",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireQuestionGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "rows": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Rows",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestionGroupRow"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "rows",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireQuestionGroupAnswerFactor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "factor": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Factor"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "factor"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireQuestionGroupRow": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "answerFactors": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Answer factors",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestionGroupAnswerFactor"
                        }
                    },
                    "coreValue": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Core value"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "answerFactors",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireQuestionType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentQuestionnaireSection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "shortTitle": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "questions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Questions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentQuestionnaireQuestion"
                        }
                    },
                    "typeFILRoute": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type f i l route",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "questions",
                    "shortTitle",
                    "title"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentRecommendation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "riskTolerance": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentRecommendationCustomerConsultationInvestmentRecommendationRiskTolerance"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentRecommendationCustomerConsultationInvestmentRecommendationStrategy"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentRecommendationCustomerConsultationInvestmentRecommendationDuration"
                    },
                    "recommendation": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentRecommendationText"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "duration",
                    "recommendation",
                    "riskTolerance",
                    "strategy"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentRecommendationCustomerConsultationInvestmentRecommendationDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentRecommendationCustomerConsultationInvestmentRecommendationRiskTolerance": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/profile\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentProfile"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentRecommendationCustomerConsultationInvestmentRecommendationStrategy": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/strategy\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentStrategy"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentRecommendationText": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "color": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Color",
                        "nullable": false,
                        "minLength": 1
                    },
                    "code": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentRecommendationTextCustomerConsultationInvestmentRecommendationTextCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "code"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentRecommendationTextCustomerConsultationInvestmentRecommendationTextCode": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentServiceClassRestriction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "guiElement": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Gui element",
                        "nullable": false,
                        "minLength": 1
                    },
                    "restriction": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Restriction",
                        "nullable": false,
                        "minLength": 1
                    },
                    "serviceClass": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceClassRestrictionCustomerConsultationInvestmentServiceClassRestrictionServiceClass"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "serviceClass"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentServiceClassRestrictionCustomerConsultationInvestmentServiceClassRestrictionServiceClass": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/servicesubtype\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentServiceSubType"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentServiceSubType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "outgoingCoreType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceSubTypeCustomerConsultationInvestmentServiceSubTypeOutgoingCoreType"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceSubTypeCustomerConsultationInvestmentServiceSubTypeCoreType"
                        }
                    },
                    "productsPerStrategy": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Products per strategy",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentProductPerStrategy"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name",
                    "productsPerStrategy",
                    "sort"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentServiceSubTypeCustomerConsultationInvestmentServiceSubTypeCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentServiceSubTypeCustomerConsultationInvestmentServiceSubTypeOutgoingCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentServiceType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "serviceSubType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Service sub type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentServiceSubType"
                        }
                    },
                    "minValue": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Min value"
                    },
                    "singleProducts": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Single products"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name",
                    "serviceSubType",
                    "sort"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "number": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Number"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number formatted",
                        "nullable": false,
                        "minLength": 1
                    },
                    "accountGroup": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountCustomerConsultationInvestmentStockAccountAccountGroup"
                    },
                    "connectedAccountsRef": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Connected accounts ref",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountCustomerConsultationInvestmentStockAccountConnectedAccountsRef"
                        }
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "openedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Opened date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "closedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Closed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "balanceAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "reportingCurrency": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountCurrency"
                    },
                    "accountCurrency": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountCurrency"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "iban": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Iban"
                    },
                    "usedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Used amount"
                    },
                    "creditLimit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Credit limit"
                    },
                    "reservedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Reserved amount"
                    },
                    "safeNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Safe number"
                    },
                    "safeLocation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Safe location"
                    },
                    "withdrawalAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal amount"
                    },
                    "withdrawalUsedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal used amount"
                    },
                    "withdrawalAvailableAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Withdrawal available amount"
                    },
                    "withdrawalPeriod": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "withdrawalPeriodDesc": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "withdrawalCancellation": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Withdrawal cancellation",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountWithdrawalCancellation"
                        }
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountCustomerConsultationInvestmentStockAccountSuspension"
                        }
                    },
                    "pledge": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pledge",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountPledge"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accountCurrency",
                    "accountGroup",
                    "accountType",
                    "number",
                    "pledge",
                    "reportingCurrency",
                    "withdrawalCancellation"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountCurrency": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "balance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Balance"
                    },
                    "disponibleBalance": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Disponible balance"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "balance",
                    "currency",
                    "currencyIso"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountCustomerConsultationInvestmentStockAccountAccountGroup": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/group\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Accountgroup"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountCustomerConsultationInvestmentStockAccountConnectedAccountsRef": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountCustomerConsultationInvestmentStockAccountSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Number formatted",
                        "nullable": false,
                        "minLength": 1
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creation date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "modificationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Modification date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric",
                        "nullable": false,
                        "minLength": 1
                    },
                    "rubricExtension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric extension"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "currencyIsoRef": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "investmentStrategy": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "serviceClass": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "portfolioKind": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "pledge": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pledge",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountGroupPledge"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "creationDate",
                    "currencyIso",
                    "currencyIsoRef",
                    "pledge"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountGroupPledge": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "creditor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creditor"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountPledge": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "clearingNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Clearing number"
                    },
                    "creditor": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creditor"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountPosition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "positionId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Position id"
                    },
                    "instrumentId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Instrument id"
                    },
                    "valuationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valuation date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "rubric": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Rubric"
                    },
                    "status": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Status"
                    },
                    "blocked": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Blocked"
                    },
                    "securityCode": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Security code"
                    },
                    "quantity": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Quantity"
                    },
                    "value": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Value"
                    },
                    "availableAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Available amount"
                    },
                    "blockedAmount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Blocked amount"
                    },
                    "valueInPortfolioCurrency": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Value in portfolio currency"
                    },
                    "valueInReportingCurrency": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Value in reporting currency"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "account": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountPositionCustomerConsultationInvestmentStockAccountPositionAccount"
                    },
                    "portfolio": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountPositionCustomerConsultationInvestmentStockAccountPositionPortfolio"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountPositionCustomerConsultationInvestmentStockAccountPositionCustomer"
                    },
                    "contract": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountPositionContract"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "account",
                    "accountType",
                    "assetSegment",
                    "customer",
                    "portfolio",
                    "quantity",
                    "value",
                    "valueCurrencyIso",
                    "valueInPortfolioCurrency",
                    "valueInReportingCurrency"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountPositionContract": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "productName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product name"
                    },
                    "productNameExtension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Product name extension"
                    },
                    "beginDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Begin date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "accruedInterest": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Accrued interest"
                    },
                    "accIntInReportingCcy": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Acc int in reporting ccy"
                    },
                    "currencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountPositionCustomerConsultationInvestmentStockAccountPositionAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountPositionCustomerConsultationInvestmentStockAccountPositionCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountPositionCustomerConsultationInvestmentStockAccountPositionPortfolio": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/group\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Accountgroup"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockAccountWithdrawalCancellation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "from": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "to": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "To",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockCustomerBalance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "balanceType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance type",
                        "enum": [
                            "asset",
                            "liability"
                        ]
                    },
                    "isAtThirdParty": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is at third party"
                    },
                    "entryDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Entry date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "amountDue": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount due"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "balanceAtComment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Balance at comment"
                    },
                    "balanceAtType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceSubType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "valueCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockCustomerBalanceCustomerConsultationInvestmentStockCustomerBalanceCustomer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "balanceSubType",
                    "balanceType",
                    "customer",
                    "isAtThirdParty",
                    "valueCurrencyIso"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockCustomerBalanceCustomerConsultationInvestmentStockCustomerBalanceCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockCustomerRiskProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Expiration date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "beginDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Begin date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockCustomerRiskProfileCustomerConsultationInvestmentStockCustomerRiskProfileCustomer"
                    },
                    "riskProfile": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockCustomerRiskProfileCustomerConsultationInvestmentStockCustomerRiskProfileRiskProfile"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer",
                    "expirationDate",
                    "riskProfile"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockCustomerRiskProfileCustomerConsultationInvestmentStockCustomerRiskProfileCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockCustomerRiskProfileCustomerConsultationInvestmentStockCustomerRiskProfileRiskProfile": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Accounts",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccount"
                        }
                    },
                    "accountGroups": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account groups",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountGroup"
                        }
                    },
                    "accountPositions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account positions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockAccountPosition"
                        }
                    },
                    "customerBalances": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer balances",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockCustomerBalance"
                        }
                    },
                    "customerRiskProfile": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockCustomerRiskProfile"
                    },
                    "investmentValors": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment valors",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockInvestmentValor"
                        }
                    },
                    "investmentFinancings": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment financings",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockInvestmentFinancing"
                        }
                    },
                    "financingTranches": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing tranches",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockFinancingTranche"
                        }
                    },
                    "persistenceWishReserve": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockWishReserve"
                    },
                    "persistenceRiskTolerance": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockRiskTolerance"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accountGroups",
                    "accountPositions",
                    "accounts",
                    "customerBalances",
                    "financingTranches",
                    "investmentFinancings",
                    "investmentValors"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockFinancingTranche": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "loanProduct": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockFinancingTrancheCustomerConsultationInvestmentStockFinancingTrancheLoanProduct"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockFinancingTrancheCustomerConsultationInvestmentStockFinancingTrancheCustomer"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "term": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Term"
                    },
                    "interestRate": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Interest rate"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "customer",
                    "interestRate",
                    "loanProduct",
                    "sort",
                    "startDate",
                    "term"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockFinancingTrancheCustomerConsultationInvestmentStockFinancingTrancheCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockFinancingTrancheCustomerConsultationInvestmentStockFinancingTrancheLoanProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockInvestmentFinancing": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "orderNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Order number"
                    },
                    "currentMarketPrice": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Current market price",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockInvestmentFinancingAddress"
                    },
                    "realEstateType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSegment": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockInvestmentFinancingCustomerConsultationInvestmentStockInvestmentFinancingCustomer"
                    },
                    "balanceCategory": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "balanceOnly": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Balance only"
                    },
                    "frameNr": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Frame nr"
                    },
                    "isEMortage": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is e mortage"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "address",
                    "assetSegment",
                    "currentMarketPrice",
                    "customer",
                    "realEstateType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockInvestmentFinancingAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street",
                        "nullable": false,
                        "minLength": 1
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code",
                        "nullable": false,
                        "minLength": 1
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockInvestmentFinancingCustomerConsultationInvestmentStockInvestmentFinancingCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockInvestmentValor": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accruedInterest": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Accrued interest",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "accruedInterestDays": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Accrued interest days"
                    },
                    "accruedInterestCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "contractSize": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Contract size"
                    },
                    "denomination": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Denomination"
                    },
                    "dividendYield": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Dividend yield",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "duration": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Duration",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "expiryDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Expiry date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "issuerCode": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Issuer code"
                    },
                    "statusCode": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Status code"
                    },
                    "timeToMaturity": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Time to maturity"
                    },
                    "warrantorCode": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Warrantor code"
                    },
                    "valorShortName": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "valorLongName": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "valorReferenceText": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "valorType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "creditRating": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Credit rating"
                    },
                    "marketCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Market code"
                    },
                    "price": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Price"
                    },
                    "pricePerUnit": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Price per unit"
                    },
                    "priceType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "valorNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valor number",
                        "nullable": false,
                        "minLength": 1
                    },
                    "isinNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Isin number"
                    },
                    "symbol": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Symbol",
                        "nullable": false,
                        "minLength": 1
                    },
                    "riskCurrencyIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "riskValorType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockInvestmentValorRiskValorType"
                    },
                    "countryIso": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "industryType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "telekursInstrumentType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "telekursFondsType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "price",
                    "riskCurrencyIso",
                    "riskValorType",
                    "valorType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockInvestmentValorRiskValorType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "valorType": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetClass": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "assetSubClass": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "valorType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockRiskTolerance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockRiskToleranceCustomerConsultationInvestmentStockRiskToleranceCustomer"
                    },
                    "isQuestionnaireChanged": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is questionnaire changed"
                    },
                    "riskToleranceQuestionnaireType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockRiskToleranceCustomerConsultationInvestmentStockRiskToleranceRiskToleranceQuestionnaireType"
                    },
                    "riskToleranceAnswerStorage": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockRiskToleranceAnswerStorage"
                    },
                    "riskToleranceConsultationCompletion": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockRiskToleranceConsultationCompletion"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer",
                    "isQuestionnaireChanged",
                    "riskToleranceAnswerStorage",
                    "riskToleranceConsultationCompletion",
                    "riskToleranceQuestionnaireType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockRiskToleranceAnswerStorage": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "calculatedProfile": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockRiskToleranceAnswerStorageCustomerConsultationInvestmentStockRiskToleranceAnswerStorageCalculatedProfile"
                    },
                    "questionnaireAnswers": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Questionnaire answers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStockRiskToleranceQuestionnaireAnswer"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "questionnaireAnswers"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockRiskToleranceAnswerStorageCustomerConsultationInvestmentStockRiskToleranceAnswerStorageCalculatedProfile": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/profile\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentProfile"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockRiskToleranceConsultationCompletion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "completedDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Completed date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntilDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "completedDate",
                    "validUntilDate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockRiskToleranceCustomerConsultationInvestmentStockRiskToleranceCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockRiskToleranceCustomerConsultationInvestmentStockRiskToleranceRiskToleranceQuestionnaireType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/questionnaire\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentQuestionnaire"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockRiskToleranceQuestionnaireAnswer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "questionUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Question uid",
                        "nullable": false,
                        "minLength": 1
                    },
                    "columnUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Column uid"
                    },
                    "groupRowUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Group row uid"
                    },
                    "answerUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Answer uid"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockWishReserve": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStockWishReserveCustomerConsultationInvestmentStockWishReserveCustomer"
                    },
                    "customerAccountWishReserveAmount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer account wish reserve amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer",
                    "customerAccountWishReserveAmount"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStockWishReserveCustomerConsultationInvestmentStockWishReserveCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategy": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "sort": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Sort"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type"
                    },
                    "outgoingCoreType": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyCustomerConsultationInvestmentStrategyOutgoingCoreType"
                    },
                    "coreType": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core type",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyCustomerConsultationInvestmentStrategyCoreType"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name",
                    "sort"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "nullable": false,
                        "minLength": 1
                    },
                    "profile": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyAssignmentCustomerConsultationInvestmentStrategyAssignmentProfile"
                    },
                    "investmentTarget": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyAssignmentCustomerConsultationInvestmentStrategyAssignmentInvestmentTarget"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyAssignmentCustomerConsultationInvestmentStrategyAssignmentStrategy"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "investmentTarget",
                    "profile",
                    "strategy"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyAssignmentCustomerConsultationInvestmentStrategyAssignmentInvestmentTarget": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/target\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentTarget"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyAssignmentCustomerConsultationInvestmentStrategyAssignmentProfile": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/profile\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentProfile"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyAssignmentCustomerConsultationInvestmentStrategyAssignmentStrategy": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/strategy\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentStrategy"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyCustomerConsultationInvestmentStrategyCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyCustomerConsultationInvestmentStrategyOutgoingCoreType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyReturn": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "strategy": {
                        "$ref": "#/components/schemas/CustomerConsultationInvestmentStrategyReturnCustomerConsultationInvestmentStrategyReturnStrategy"
                    },
                    "runtimeFrom": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Runtime from"
                    },
                    "runtimeTo": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Runtime to"
                    },
                    "minimum": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Minimum"
                    },
                    "average": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Average"
                    },
                    "maximum": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Maximum"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "average",
                    "maximum",
                    "minimum",
                    "runtimeFrom",
                    "runtimeTo",
                    "strategy"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentStrategyReturnCustomerConsultationInvestmentStrategyReturnStrategy": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/investment\\/strategy\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "InvestmentStrategy"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationInvestmentTarget": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationNotesItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "text": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Text",
                        "nullable": false,
                        "minLength": 1
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type",
                        "enum": [
                            "note",
                            "image"
                        ]
                    },
                    "lastChange": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last change",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "file": {
                        "$ref": "#/components/schemas/CustomerConsultationNotesItemCustomerConsultationNotesItemFile"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "lastChange",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationNotesItemCustomerConsultationNotesItemFile": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationNotesNotes": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "common": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Common",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "toolbox": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Toolbox",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "financing": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Financing",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "retirement": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Retirement",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "provision": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Provision",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "requisition": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Requisition",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "investment": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Investment",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "balance": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Balance",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "basicServices": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Basic services",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "financeCockpit": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Finance cockpit",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationNotesItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceFinancingCollateral": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "collateralType": {
                        "$ref": "#/components/schemas/CustomerConsultationPersistenceFinancingCollateralCustomerConsultationPersistenceFinancingCollateralCollateralType"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "collateralType"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceFinancingCollateralCustomerConsultationPersistenceFinancingCollateralCollateralType": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/collateraltype\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingCollateralType"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceFinancingObjectAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "street": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Street",
                        "nullable": false,
                        "minLength": 1
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Zip code",
                        "nullable": false,
                        "minLength": 1
                    },
                    "city": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "City",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceFinancingTranche": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "loanProduct": {
                        "$ref": "#/components/schemas/CustomerConsultationPersistenceFinancingTrancheCustomerConsultationPersistenceFinancingTrancheLoanProduct"
                    },
                    "duration": {
                        "$ref": "#/components/schemas/CustomerConsultationPersistenceFinancingTrancheCustomerConsultationPersistenceFinancingTrancheDuration"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "interestRate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interest rate",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Start date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "End date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "duration",
                    "interestRate",
                    "loanProduct",
                    "startDate"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceFinancingTrancheCustomerConsultationPersistenceFinancingTrancheDuration": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/duration\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingDuration"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceFinancingTrancheCustomerConsultationPersistenceFinancingTrancheLoanProduct": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/financing\\/loanproduct\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "FinancingLoanProduct"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceRiskToleranceCalculatedProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationPersistenceRiskToleranceQuestionnaireAnswer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "questionUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Question uid",
                        "nullable": false,
                        "minLength": 1
                    },
                    "columnUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Column uid"
                    },
                    "groupRowUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Group row uid"
                    },
                    "answerUid": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Answer uid"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationPromotion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "title": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Active"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Default"
                    },
                    "colorCode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Color code"
                    },
                    "order": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Order"
                    },
                    "checklistItem": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Checklist item",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPromotionCustomerConsultationPromotionChecklistItem"
                        }
                    },
                    "customerSegments": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer segments",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPromotionCustomerConsultationPromotionCustomerSegments"
                        }
                    },
                    "image": {
                        "$ref": "#/components/schemas/CustomerConsultationPromotionCustomerConsultationPromotionImage"
                    },
                    "teaserImage": {
                        "$ref": "#/components/schemas/CustomerConsultationPromotionCustomerConsultationPromotionTeaserImage"
                    },
                    "imageText": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "from": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "to": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "To",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "document": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Document",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPromotionCustomerConsultationPromotionDocument"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "active",
                    "from",
                    "image",
                    "teaserImage",
                    "title",
                    "to"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPromotionConsultationPromotionItem"
                        }
                    },
                    "defaultPromotionId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Default promotion id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "items"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionConsultationPromotionItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "promotionId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Promotion id",
                        "nullable": false,
                        "minLength": 1
                    },
                    "selected": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Selected"
                    },
                    "documents": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Documents",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPromotionConsultationPromotionItemCustomerConsultationPromotionConsultationPromotionItemDocuments"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "selected"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionConsultationPromotionItemCustomerConsultationPromotionConsultationPromotionItemDocuments": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionCustomerConsultationPromotionChecklistItem": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/checklist\\/config\\/standard\\-set\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "ChecklistConfigurationItem"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionCustomerConsultationPromotionCustomerSegments": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionCustomerConsultationPromotionDocument": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionCustomerConsultationPromotionImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionCustomerConsultationPromotionTeaserImage": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/file\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "File"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "promotions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Promotions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationPromotion"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "promotions"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationPromotionPromotion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationPromotionConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationPromotionParameterData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationProvisionAdditionalBenefitType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "key": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Key",
                        "enum": [
                            "disability",
                            "death"
                        ]
                    },
                    "titles": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "key",
                    "titles"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationProvisionAdditionalCapitalType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "key": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Key",
                        "enum": [
                            "third-pillar",
                            "other"
                        ]
                    },
                    "titles": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "key",
                    "titles"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationProvisionPersonAdditionalBenefit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationProvisionAdditionalBenefitType"
                    },
                    "disease": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Disease"
                    },
                    "accident": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Accident"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "accident",
                    "amount",
                    "disease",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationProvisionPersonAdditionalCapital": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomerConsultationProvisionAdditionalCapitalType"
                    },
                    "death": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Death"
                    },
                    "disability": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Disability"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "amount",
                    "death",
                    "disability",
                    "type"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationProvisionPersonExtraInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "ahvCalculationMode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ahv calculation mode",
                        "enum": [
                            "average",
                            "minimum",
                            "maximum",
                            "manual"
                        ]
                    },
                    "bvgCalculationMode": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Bvg calculation mode",
                        "enum": [
                            "obligatory",
                            "maximum",
                            "manual"
                        ]
                    },
                    "amountOfChildren": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount of children"
                    },
                    "amountOfChildrenEligibleForPension": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount of children eligible for pension"
                    },
                    "annualGrossIncome": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Annual gross income",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "maritalStatusSince": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Marital status since",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "selfEmployed": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Self employed"
                    },
                    "uvgAddOn": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Uvg add on",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "uvgInsured": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Uvg insured"
                    },
                    "additionalBenefits": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Additional benefits",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationProvisionPersonAdditionalBenefit"
                        }
                    },
                    "additionalCapitals": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Additional capitals",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationProvisionPersonAdditionalCapital"
                        }
                    },
                    "ahvOrphanPension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ahv orphan pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "ahvSpousePension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ahv spouse pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "bvgDisabilityChildrenPension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Bvg disability children pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "bvgDisabilityPension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Bvg disability pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "bvgOrphanPension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Bvg orphan pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "bvgSpousePension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Bvg spouse pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "disabilityChildrenPension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Disability children pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "disabilityPension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Disability pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "additionalBenefits",
                    "additionalCapitals",
                    "ahvCalculationMode",
                    "amountOfChildren",
                    "amountOfChildrenEligibleForPension",
                    "bvgCalculationMode",
                    "selfEmployed",
                    "uvgInsured"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRequisitionConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "items": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Items",
                        "items": {
                            "$ref": "#/components/schemas/ConsultationRequisitionMutableItem"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "items"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRequisitionConsultationPosition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "x": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "X"
                    },
                    "y": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Y"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "x",
                    "y"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRequisitionParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "groupDescriptions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Group descriptions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationRequisitionParameterGroupDescription"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "groupDescriptions"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRequisitionParameterGroupDescription": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "groupTitle": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "itemDescriptions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Item descriptions",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationRequisitionParameterItemDescription"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "groupTitle",
                    "itemDescriptions"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRequisitionParameterItemDescription": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "icon": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Icon",
                        "nullable": false,
                        "minLength": 1
                    },
                    "default": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Default"
                    },
                    "name": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "default",
                    "name"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRequisitionRequisition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationRequisitionConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationRequisitionParameterData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementConsultationData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "play": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationPlay"
                    },
                    "regularCheck": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationVariant"
                    },
                    "retirementVariants": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationRetirementVariants"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "play",
                    "regularCheck",
                    "retirementVariants"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementConsultationPlay": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "variant": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationVariant"
                    },
                    "scenario": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationPlayScenario"
                    },
                    "wasVisited": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Was visited"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "variant",
                    "wasVisited"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementConsultationPlayPerson": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "gender": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Gender",
                        "enum": [
                            "male",
                            "female"
                        ]
                    },
                    "income": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Income"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "gender",
                    "income"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementConsultationPlayScenario": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationPlayPerson"
                    },
                    "partner": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationPlayPerson"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "customer"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementConsultationRetirementVariants": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "wasVisited": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Was visited"
                    },
                    "variantsMutable": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Variants mutable",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationVariant"
                        }
                    },
                    "currentVariantIndex": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Current variant index"
                    },
                    "chosenVariantIndex": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Chosen variant index"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "chosenVariantIndex",
                    "currentVariantIndex",
                    "variantsMutable",
                    "wasVisited"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementConsultationVariant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerRetirementAge": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Customer retirement age"
                    },
                    "partnerRetirementAge": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Partner retirement age"
                    },
                    "interestRateBeforeRetirement": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Interest rate before retirement",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "livingCostsAfterRetirement": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Living costs after retirement",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "livingCostsBeforeRetirement": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Living costs before retirement",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "storeLivingCostsAsPercentage": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Store living costs as percentage"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "storeLivingCostsAsPercentage"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementParameterCommonData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "additionalCapitalBanks": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Additional capital banks",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                        }
                    },
                    "additionalCapitalCategories": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Additional capital categories",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                        }
                    },
                    "assetTypesSources": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Asset types sources",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                        }
                    },
                    "consultationSources": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Consultation sources",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                        }
                    },
                    "productDueDatesSources": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Product due dates sources",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "additionalCapitalBanks",
                    "additionalCapitalCategories",
                    "assetTypesSources",
                    "consultationSources",
                    "productDueDatesSources"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementParameterData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "coreConfigs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Core configs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationCoreConfig"
                        }
                    },
                    "customerGenders": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customer genders",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "maritalStatuses": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Marital statuses",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                        }
                    },
                    "commonData": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementParameterCommonData"
                    },
                    "playData": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementParameterPlayData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "commonData",
                    "coreConfigs",
                    "customerGenders",
                    "maritalStatuses",
                    "playData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementParameterPlayCustomer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "First name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "lastName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Last name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "legalAddress": {
                        "$ref": "#/components/schemas/CustomerConsultationCustomerAddress"
                    },
                    "sex": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "salutation": {
                        "$ref": "#/components/schemas/CustomerConsultationEntityCode"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "birthDate",
                    "legalAddress",
                    "salutation",
                    "sex"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementParameterPlayData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "baseAnnualIncomeCustomer": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Base annual income customer",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "baseAnnualIncomePartner": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Base annual income partner",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "pillarOneInput": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementParameterPlayPillarOneInput"
                    },
                    "pillarTwoInputs": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Pillar two inputs",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationRetirementParameterPlayPillarTwoInput"
                        }
                    },
                    "maleCustomer": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementParameterPlayCustomer"
                    },
                    "femaleCustomer": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementParameterPlayCustomer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "baseAnnualIncomeCustomer",
                    "baseAnnualIncomePartner",
                    "femaleCustomer",
                    "maleCustomer",
                    "pillarOneInput",
                    "pillarTwoInputs"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementParameterPlayPillarOneInput": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "pensionBase": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pension base",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "pensionMen": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pension men",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "pensionWoman": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pension woman",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "pensionCouple": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pension couple",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "pensionBase",
                    "pensionCouple",
                    "pensionMen",
                    "pensionWoman"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementParameterPlayPillarTwoInput": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "age": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Age"
                    },
                    "pensionMen": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pension men",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "pensionWoman": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Pension woman",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "age",
                    "pensionMen",
                    "pensionWoman"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementPersonAdditionalCapital": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "bankName": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Bank name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "category": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Category",
                        "nullable": false,
                        "minLength": 1
                    },
                    "readonly": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Readonly"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "readonly"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementPersonAdditionalIncome": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "from": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "From",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "to": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "To",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "infinite": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Infinite"
                    },
                    "untilRegularRetirement": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Until regular retirement"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "infinite",
                    "untilRegularRetirement"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementPersonExtraInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "additionalCapitalItems": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Additional capital items",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationRetirementPersonAdditionalCapital"
                        }
                    },
                    "additionalIncome": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementPersonAdditionalIncome"
                    },
                    "netIncome": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Net income",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "annualPillarOneAfterSplittingPension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Annual pillar one after splitting pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "annualPillarOnePension": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Annual pillar one pension",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "annualPillarTwoPension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Annual pillar two pension",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationRetirementPersonPillarTwoAmount"
                        }
                    },
                    "maturities": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Maturities",
                        "items": {
                            "$ref": "#/components/schemas/CustomerConsultationRetirementPersonMaturity"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "additionalCapitalItems",
                    "additionalIncome",
                    "annualPillarTwoPension",
                    "maturities"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementPersonMaturity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "date": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "readonly": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Readonly"
                    },
                    "description": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Description",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "readonly"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementPersonPillarTwoAmount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "age": {
                        "type": "integer",
                        "description": "@todo replace me",
                        "title": "Age"
                    },
                    "amount": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Amount",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "withdrawal": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Withdrawal",
                        "pattern": "^[+\\-]?\\d+(\\.\\d+)?$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "age"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationRetirementRetirement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultation": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementConsultationData"
                    },
                    "parameterData": {
                        "$ref": "#/components/schemas/CustomerConsultationRetirementParameterData"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "consultation",
                    "parameterData"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationValidationsRule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name",
                        "nullable": false,
                        "minLength": 1
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerConsultationValidationsValidation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "result": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Result",
                        "enum": [
                            "gray",
                            "green",
                            "yellow",
                            "red"
                        ]
                    },
                    "module": {
                        "$ref": "#/components/schemas/CustomerConsultationValidationsValidationCustomerConsultationValidationsValidationModule"
                    },
                    "text": {
                        "$ref": "#/components/schemas/CustomerConsultationCommonTranslatable"
                    },
                    "rule": {
                        "$ref": "#/components/schemas/CustomerConsultationValidationsRule"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "required": [
                    "module",
                    "result",
                    "rule",
                    "text"
                ],
                "additionalProperties": false
            },
            "CustomerConsultationValidationsValidationCustomerConsultationValidationsValidationModule": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Ref",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/core\\/module\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Module"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerContact": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "Id of the customer",
                        "title": "Customer id"
                    },
                    "uri": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Uri"
                    },
                    "preferred": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Preferred"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Protocol"
                    },
                    "type": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Type"
                    },
                    "value": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Value"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "reachableFrom": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Reachable from",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "reachableUntil": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Reachable until",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "addressType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "addressValidFrom": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Address valid from",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "variation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Contact information",
                "additionalProperties": false
            },
            "CustomerCreditData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the customer",
                        "title": "Customer ID"
                    },
                    "ownershipStructure": {
                        "type": "string",
                        "description": "How is the asset structured in regard to the ownership",
                        "title": "Ownership Structure"
                    },
                    "companyPurpose": {
                        "type": "string",
                        "description": "What purpose does the company have",
                        "title": "Company Purpose"
                    },
                    "customerAssessment": {
                        "type": "string",
                        "description": "Assessment of the customer",
                        "title": "Customer Assessment"
                    },
                    "customerOffer": {
                        "type": "string",
                        "description": "Offer of the customer",
                        "title": "Customer Offer"
                    },
                    "marketPositionCompetition": {
                        "type": "string",
                        "description": "How the customers competition is positioned within the existing marketplace.",
                        "title": "Market Position Competition"
                    },
                    "swot": {
                        "$ref": "#/components/schemas/CustomerCreditDataCustomerCreditDataSwot"
                    },
                    "sustainability": {
                        "type": "string",
                        "description": "Sustainability of the customer into the future",
                        "title": "Sustainability"
                    },
                    "residenceSituation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "phaseOfLife": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "provisionSolution": {
                        "type": "string",
                        "description": "Information about the current provision solution the customer has/wants",
                        "title": "Provision solution"
                    },
                    "propertyInformation": {
                        "type": "string",
                        "description": "What kind of properties the customer owns",
                        "title": "Property information"
                    },
                    "successorPlanning": {
                        "type": "string",
                        "description": "Information about the customer's successor planning",
                        "title": "Successor planning"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Hold basic customer information related to credit allowance and CRM data.",
                "additionalProperties": false
            },
            "CustomerCreditDataCustomerCreditDataSwot": {
                "type": "object",
                "properties": {
                    "strengths": {
                        "type": "string",
                        "description": "Strengths of the SWOT analysis",
                        "title": "SWOT: Strengths"
                    },
                    "weaknesses": {
                        "type": "string",
                        "description": "Weaknesses of the SWOT analysis",
                        "title": "SWOT: Weaknesses"
                    },
                    "opportunities": {
                        "type": "string",
                        "description": "Opportunities of the SWOT analysis",
                        "title": "SWOT: Opportunities"
                    },
                    "threats": {
                        "type": "string",
                        "description": "Threats of the SWOT analysis",
                        "title": "SWOT: Threats"
                    }
                },
                "additionalProperties": false
            },
            "CustomerCrmData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the customer",
                        "title": "Customer ID"
                    },
                    "residenceSituation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "phaseOfLife": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "provisionSolution": {
                        "type": "string",
                        "description": "Information about the current provision solution the customer has/wants",
                        "title": "Provision solution"
                    },
                    "propertyInformation": {
                        "type": "string",
                        "description": "What kind of properties the customer owns",
                        "title": "Property information"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Holds CRM related customer data",
                "additionalProperties": false
            },
            "CustomerCustomerRatingDate": {
                "type": "object",
                "properties": {
                    "validFromDate": {
                        "type": "string",
                        "description": "Begin of rating validity",
                        "title": "Valid from",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntilDate": {
                        "type": "string",
                        "description": "End of rating validity",
                        "title": "Valid until",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "approvedDate": {
                        "type": "string",
                        "description": "Date rating was approved",
                        "title": "Approved date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "externalDate": {
                        "type": "string",
                        "description": "Date from an external system",
                        "title": "External date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    }
                },
                "additionalProperties": false
            },
            "CustomerCustomerTax": {
                "type": "object",
                "properties": {
                    "country": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "countryIso": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nationalTaxNumberType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "nationalTaxNumber": {
                        "type": "string",
                        "description": "National tax number",
                        "title": "National Tax Number"
                    }
                },
                "additionalProperties": false
            },
            "CustomerDetail": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "targetCustomerGroup": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "targetSupport": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "hasDescendants": {
                        "type": "boolean",
                        "description": "Does the customer have descendants",
                        "title": "Descendants",
                        "x-recordOriginException": true
                    },
                    "customerAtRisk": {
                        "type": "boolean",
                        "description": "Customer @ Risk",
                        "title": "Customer @ Risk",
                        "x-recordOriginException": true
                    },
                    "customerAtRiskDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer at risk date",
                        "x-recordOriginException": true,
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customerAtRiskComment": {
                        "type": "string",
                        "description": "Reason for customer @ risk",
                        "title": "Customer at risk comment",
                        "x-recordOriginException": true
                    },
                    "focusCustomerCare": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "relationIds": {
                        "type": "array",
                        "description": "list of relation ids",
                        "title": "Relation ids",
                        "x-recordOriginException": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "confession": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Holds additional data of customers (migrated from CustomerBook service)",
                "additionalProperties": false
            },
            "CustomerFamily": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "parentRelation": {
                        "type": "string",
                        "description": "Determines to which parent the family member belongs. 0 if only related to customer, 1 if only related to partner and 2 if related to both",
                        "title": "Parent relation"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "firstName of the family member",
                        "title": "First name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "lastName of the family member",
                        "title": "Last name"
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "birth date of the family member",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "liableFor": {
                        "type": "boolean",
                        "description": "true if the customer is liable for this family member",
                        "title": "Liable for"
                    },
                    "Comment": {
                        "type": "string",
                        "description": "Comment",
                        "title": "Comment"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "additionalProperties": false
            },
            "CustomerFamilySummary": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the customer, links to /person/customer/{id}",
                        "title": "Customer id"
                    },
                    "adultCount": {
                        "type": "string",
                        "description": "Count of adults",
                        "title": "Adult count"
                    },
                    "adultLiableForCount": {
                        "type": "string",
                        "description": "Count of adults the customer is liable for",
                        "title": "Adult liable for count"
                    },
                    "childrenCount": {
                        "type": "string",
                        "description": "Count of children",
                        "title": "Children count"
                    },
                    "childrenLiableForCount": {
                        "type": "string",
                        "description": "Count of children the customer is liable for",
                        "title": "Children liable for count"
                    },
                    "childrenBirthYear": {
                        "type": "string",
                        "description": "Birth years of the children",
                        "title": "Children birth year"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment",
                        "title": "Comment"
                    },
                    "enteredDate": {
                        "type": "string",
                        "description": "Date when the data has been recorded",
                        "title": "Entered date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Summary of a customer's family member as represented in Finnova Core",
                "additionalProperties": false
            },
            "CustomerGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "name": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Name"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Load",
                "additionalProperties": false
            },
            "CustomerIdentification": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the customer",
                        "title": "Customer ID"
                    },
                    "customerNumber": {
                        "type": "string",
                        "description": "Natural ID of the customer ",
                        "title": "Customer Number"
                    },
                    "customerSince": {
                        "type": "string",
                        "description": "Date since the customer is opened",
                        "title": "Date since the customer is opened",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "creditCardCount": {
                        "type": "integer",
                        "description": "Count of credit cards",
                        "title": "Customer has credit card"
                    },
                    "maestroCardCount": {
                        "type": "integer",
                        "description": "Count of maestro cards",
                        "title": "Customer has maestro card"
                    },
                    "maestroCard": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Maestro card",
                        "items": {
                            "$ref": "#/components/schemas/CustomerIdentificationCustomerIdentificationMaestroCard"
                        }
                    },
                    "customerCardCount": {
                        "type": "integer",
                        "description": "Count of customer cards",
                        "title": "Customer has customer card"
                    },
                    "ebankingCount": {
                        "type": "integer",
                        "description": "Count of ebanking contracts",
                        "title": "Customer has ebanking"
                    },
                    "eBanking": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "E banking",
                        "items": {
                            "$ref": "#/components/schemas/CustomerIdentificationCustomerIdentificationEBanking"
                        }
                    },
                    "accountCount": {
                        "type": "integer",
                        "description": "Count of accounts",
                        "title": "Customer has accounts"
                    },
                    "account": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Account",
                        "items": {
                            "$ref": "#/components/schemas/CustomerIdentificationCustomerIdentificationAccount"
                        }
                    },
                    "depotCount": {
                        "type": "integer",
                        "description": "Count of depots",
                        "title": "Customer has depots"
                    },
                    "depot": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Depot",
                        "items": {
                            "$ref": "#/components/schemas/CustomerIdentificationCustomerIdentificationDepot"
                        }
                    },
                    "setType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "safeCount": {
                        "type": "integer",
                        "description": "Count of safe",
                        "title": "Customer has safe"
                    },
                    "lsvCount": {
                        "type": "integer",
                        "description": "Count of LSV contracts",
                        "title": "Customer has LSV"
                    },
                    "lsv": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Lsv",
                        "items": {
                            "$ref": "#/components/schemas/CustomerIdentificationCustomerIdentificationLsv"
                        }
                    },
                    "standingOrdersCount": {
                        "type": "integer",
                        "description": "Count of standing orders",
                        "title": "Customer has standing orders"
                    },
                    "standingorder": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Standingorder",
                        "items": {
                            "$ref": "#/components/schemas/CustomerIdentificationCustomerIdentificationStandingorder"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Shows typical information to identify a customer on the phone",
                "additionalProperties": false
            },
            "CustomerIdentificationCustomerIdentificationAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "account ids",
                        "title": "Customer account ids"
                    },
                    "number": {
                        "type": "string",
                        "description": "account numbers",
                        "title": "Customer account numbers"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "account numbers",
                        "title": "Customer account numbers"
                    },
                    "iban": {
                        "type": "string",
                        "description": "account iban numbers",
                        "title": "Customer account iban numbers"
                    },
                    "rubrik": {
                        "type": "string",
                        "description": "account rubrik",
                        "title": "Customer account rubrik"
                    },
                    "type": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "disponibleBalance": {
                        "type": "number",
                        "description": "account balance",
                        "title": "Account balance"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    }
                },
                "additionalProperties": false
            },
            "CustomerIdentificationCustomerIdentificationDepot": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "depot ids",
                        "title": "Customer depot ids"
                    },
                    "number": {
                        "type": "string",
                        "description": "depot numbers",
                        "title": "Customer depot numbers"
                    },
                    "numberFormatted": {
                        "type": "string",
                        "description": "depot numbers formatted",
                        "title": "Customer depot numbers formatted"
                    },
                    "iban": {
                        "type": "string",
                        "description": "depot iban numbers formatted",
                        "title": "Customer depot iban numbers formatted"
                    },
                    "rubrik": {
                        "type": "string",
                        "description": "depot rubrik",
                        "title": "Customer depot rubrik"
                    },
                    "type": {
                        "$ref": "#/components/schemas/Code"
                    }
                },
                "additionalProperties": false
            },
            "CustomerIdentificationCustomerIdentificationEBanking": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "eBanking contract ids",
                        "title": "Customer eBanking contract ids"
                    },
                    "bem": {
                        "type": "string",
                        "description": "eBanking contract text",
                        "title": "Customer eBanking contract text"
                    }
                },
                "additionalProperties": false
            },
            "CustomerIdentificationCustomerIdentificationLsv": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Customer LSV contract ids",
                        "title": "Customer LSV contract ids"
                    },
                    "bem": {
                        "type": "string",
                        "description": "Customer LSV contract text",
                        "title": "Customer LSV contract text"
                    },
                    "lsvAccount": {
                        "type": "string",
                        "description": "Customer LSV account",
                        "title": "Customer LSV Account"
                    },
                    "lsvSubscriber": {
                        "type": "string",
                        "description": "Customer LSV subscriber",
                        "title": "Customer LSV Subscriber"
                    }
                },
                "additionalProperties": false
            },
            "CustomerIdentificationCustomerIdentificationMaestroCard": {
                "type": "object",
                "properties": {
                    "number": {
                        "type": "string",
                        "description": "Mastro Card Number",
                        "title": "Mastro Card Number"
                    },
                    "issued": {
                        "type": "string",
                        "description": "Mastro issue date",
                        "title": "Mastro Card issue date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "expiration": {
                        "type": "string",
                        "description": "Mastro expiration date",
                        "title": "Mastro Card expiration date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "textA": {
                        "type": "string",
                        "description": "Mastro Card text line 2",
                        "title": "Mastro Card text line 1"
                    },
                    "textB": {
                        "type": "string",
                        "description": "Mastro Card text line 2",
                        "title": "Mastro Card text line 2"
                    },
                    "limitMonthTotal": {
                        "type": "number",
                        "description": "Mastro Card limit per month total",
                        "title": "Mastro Card limit per month total"
                    },
                    "limitMonthCash": {
                        "type": "number",
                        "description": "Mastro Card limit per month Cash",
                        "title": "Mastro Card limit per month Cash"
                    },
                    "limitMonthSelf": {
                        "type": "number",
                        "description": "Mastro Card limit per month Self",
                        "title": "Mastro Card limit per month Self"
                    },
                    "limitDayTotal": {
                        "type": "number",
                        "description": "Mastro Card limit per day total",
                        "title": "Mastro Card limit per day total"
                    },
                    "limitDayCash": {
                        "type": "number",
                        "description": "Mastro Card limit per day cash",
                        "title": "Mastro Card limit per day cash"
                    },
                    "limitDaySelf": {
                        "type": "number",
                        "description": "Mastro Card limit per day self",
                        "title": "Mastro Card limit per day self"
                    }
                },
                "additionalProperties": false
            },
            "CustomerIdentificationCustomerIdentificationStandingorder": {
                "type": "object",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "description": "Customer standing order recipient",
                        "title": "Customer Standing Order Recipient"
                    },
                    "account": {
                        "type": "string",
                        "description": "Customer standing order account",
                        "title": "Customer Standing Order Account"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Customer standing order account",
                        "title": "Customer Standing Order Amount"
                    },
                    "executionDate": {
                        "type": "string",
                        "description": "Customer standing order execution date",
                        "title": "Customer Standing Order Execution Date"
                    }
                },
                "additionalProperties": false
            },
            "CustomerIncome": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerIncomeCustomerIncomeCustomer"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of customer",
                        "title": "Customer ID"
                    },
                    "entries": {
                        "type": "array",
                        "description": "Array of income entries from this customer",
                        "title": "Income entries",
                        "items": {
                            "$ref": "#/components/schemas/CustomerIncomeEntries"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Income entries from customers",
                "additionalProperties": false
            },
            "CustomerIncomeCustomerIncomeCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to the customer",
                        "title": "Customer",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerIncomeEntries": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerIncomeType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "amountPerYear": {
                        "type": "number",
                        "description": "Yearly amount coming in",
                        "title": "Amount per year"
                    },
                    "occupation": {
                        "type": "string",
                        "description": "Customer occupation",
                        "title": "Occupation"
                    },
                    "statusDate": {
                        "type": "string",
                        "description": "Datetime this entry is active",
                        "title": "Status date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "education": {
                        "type": "string",
                        "description": "Customer education",
                        "title": "Education"
                    },
                    "employer": {
                        "type": "string",
                        "description": "Customer employer",
                        "title": "Employer"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Descriptive comment to this entry providing more details",
                        "title": "Comment"
                    },
                    "professionalPosition": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "employmentStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "validAfter": {
                        "type": "string",
                        "description": "date after which the customer income entry is valid",
                        "title": "valid after date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "date until which the customer income entry is valid",
                        "title": "valid until date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Income entries (single entries) from customers",
                "additionalProperties": false
            },
            "CustomerInterest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "createDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Create date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "interestCategory": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "comment": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Comment"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer interests (CRM related)",
                "additionalProperties": false
            },
            "CustomerKpi": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "year": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Year"
                    },
                    "month": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Month"
                    },
                    "dbiiLastYearChf": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Dbii last year chf"
                    },
                    "dbiiYtdChf": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Dbii ytd chf"
                    },
                    "dbiiRollingLast12Month": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Dbii rolling last12 month"
                    },
                    "activeTotal": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Active total"
                    },
                    "passiveTotal": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Passive total"
                    },
                    "kubi": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Kubi"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads Kpis from customers from E+",
                "additionalProperties": false
            },
            "CustomerMigration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "customerNumber": {
                        "type": "string",
                        "description": "Customer number",
                        "title": "Customer number"
                    },
                    "salutation": {
                        "type": "string",
                        "description": "Salutation",
                        "title": "Salutation"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name",
                        "title": "First name"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name",
                        "title": "Last name"
                    },
                    "designation": {
                        "type": "string",
                        "description": "Designation",
                        "title": "Designation"
                    },
                    "department": {
                        "type": "string",
                        "description": "Department",
                        "title": "Department"
                    },
                    "street": {
                        "type": "string",
                        "description": "Street",
                        "title": "Street"
                    },
                    "city": {
                        "type": "string",
                        "description": "City",
                        "title": "City"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country",
                        "title": "Country"
                    },
                    "birthDate": {
                        "type": "string",
                        "description": "Birth date",
                        "title": "Birth date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "migrations": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Migrations",
                        "items": {
                            "$ref": "#/components/schemas/CustomerMigrationCustomerMigrationMigrations"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer migration data (between banks and core systems)",
                "additionalProperties": false
            },
            "CustomerMigrationCustomerMigrationMigrations": {
                "type": "object",
                "properties": {
                    "keyOrigin": {
                        "type": "string",
                        "description": "Key origin",
                        "title": "Key origin"
                    },
                    "keyTarget": {
                        "type": "string",
                        "description": "Key target",
                        "title": "Key target"
                    },
                    "migrationType": {
                        "type": "string",
                        "description": "Migration type",
                        "title": "Migration type"
                    },
                    "systemOrigin": {
                        "type": "string",
                        "description": "System origin",
                        "title": "System origin"
                    },
                    "systemTarget": {
                        "type": "string",
                        "description": "System target",
                        "title": "System target"
                    },
                    "migrationDate": {
                        "type": "string",
                        "description": "Migration date",
                        "title": "Migration date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "organizationOrigin": {
                        "type": "string",
                        "description": "Organization origin",
                        "title": "Organization origin"
                    },
                    "organizationTarget": {
                        "type": "string",
                        "description": "Organization target",
                        "title": "Organization target"
                    }
                },
                "additionalProperties": false
            },
            "CustomerMutations": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultantId": {
                        "type": "string",
                        "description": "ID of the consultant, links to /person/consultant/{id}",
                        "title": "Consultant id"
                    },
                    "customers": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Customers",
                        "items": {
                            "$ref": "#/components/schemas/CustomerMutationsCustomerMutationsCustomers"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Last ten opened/closed customers of the last year per consultant",
                "additionalProperties": false
            },
            "CustomerMutationsCustomerMutationsCustomers": {
                "type": "object",
                "properties": {
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "customerDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer designation"
                    },
                    "mutationDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Mutation date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "isNew": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Is new"
                    }
                },
                "additionalProperties": false
            },
            "CustomerNote": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "creator": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Creator"
                    },
                    "account": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Created at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "contactDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Contact date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "consultantId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Consultant id"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    },
                    "orderOrigin": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "noteTopic": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "noteType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "initiative": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "noteQuality": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "note": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Note"
                    },
                    "sourceSystem": {
                        "type": "string",
                        "description": "string which describes the source system of the record",
                        "title": "Source system"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Notes from the core system that relate to Customer",
                "additionalProperties": false
            },
            "CustomerProductSuggestion": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "fromDate": {
                        "type": "string",
                        "description": "record is valid from this date on",
                        "title": "From date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "id of the related customer",
                        "title": "Customer id"
                    },
                    "productBasket": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "cardType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "contractType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "crmProductType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "countCan": {
                        "type": "integer",
                        "description": "how many of this type can be",
                        "title": "Count can"
                    },
                    "countShould": {
                        "type": "integer",
                        "description": "how many of this type should be",
                        "title": "Count should"
                    },
                    "order": {
                        "type": "integer",
                        "description": "order of the suggestion",
                        "title": "Order"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads product CRM informations from CRM module",
                "additionalProperties": false
            },
            "CustomerProspectMigration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "from": {
                        "$ref": "#/components/schemas/CustomerProspectMigrationCustomerProspectMigrationFrom"
                    },
                    "to": {
                        "$ref": "#/components/schemas/CustomerProspectMigrationCustomerProspectMigrationTo"
                    },
                    "eventStatus": {
                        "$ref": "#/components/schemas/CustomerProspectMigrationCustomerProspectMigrationEventStatus"
                    },
                    "migrationLog": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Migration log",
                        "items": {
                            "$ref": "#/components/schemas/CustomerProspectMigrationCustomerProspectMigrationMigrationLog"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Migrate all necessary items from a 'prospect' customer to 'core' customer",
                "required": [
                    "from",
                    "to"
                ],
                "additionalProperties": false
            },
            "CustomerProspectMigrationCustomerProspectMigrationEventStatus": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "The EventStatus object the worker processed. If this is set, it shows that the worker has run on this migration",
                        "title": "Event Status",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/event\\/status\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "EventStatus"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CustomerProspectMigrationCustomerProspectMigrationFrom": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "A prospect customer, which will be migrated",
                        "title": "Migrate from",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerProspectMigrationCustomerProspectMigrationMigrationLog": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "A string identifying the type of resource that has been migrated",
                        "title": "Type"
                    },
                    "count": {
                        "type": "integer",
                        "description": "How many records of this type has been updated",
                        "title": "Count"
                    }
                },
                "additionalProperties": false
            },
            "CustomerProspectMigrationCustomerProspectMigrationTo": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Migrate to this new core customer",
                        "title": "Migrate to",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerProvisionPlan": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "provisionPlanNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Provision plan number"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "Customer id",
                        "title": "Customer Id"
                    },
                    "provisionAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "depositAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "paymentAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Provision Plan from Finnova",
                "additionalProperties": false
            },
            "CustomerRating": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "selected": {
                        "type": "boolean",
                        "description": "Selected",
                        "title": "Selected"
                    },
                    "agencyScheme": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "certified": {
                        "type": "boolean",
                        "description": "Certified",
                        "title": "Certified"
                    },
                    "finmaClassification": {
                        "type": "string",
                        "description": "Finma classification",
                        "title": "Finma Classification"
                    },
                    "ratingImported": {
                        "type": "string",
                        "description": "Calculated rating",
                        "title": "Calculated Rating"
                    },
                    "ratingImportedDescription": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "rating": {
                        "type": "string",
                        "description": "Rating",
                        "title": "Rating"
                    },
                    "ratingDescription": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "ratingInternal": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "approvalDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Approval date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validAfter": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid after",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid until",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "ratingAgencyClassification": {
                        "type": "string",
                        "description": "Rating-Agency and Code",
                        "title": "Rating-Agency and Code"
                    },
                    "ratingScheme": {
                        "type": "string",
                        "description": "Rating scheme",
                        "title": "Rating Scheme"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/CustomerRatingCustomerRatingCustomer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Rating",
                "required": [
                    "customer"
                ],
                "additionalProperties": false
            },
            "CustomerRatingCustomerRatingCustomer": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Customer",
                        "title": "Customer",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/person\\/customer\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Customer"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "CustomerRelation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "origin": {
                        "type": "string",
                        "description": "record origin",
                        "title": "Origin"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "Customer B of the relation",
                        "title": "Customer id"
                    },
                    "customerIdRelatedTo": {
                        "type": "string",
                        "description": "Customer A of the relation",
                        "title": "Customer id related to"
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "Datetime when this record is valid from",
                        "title": "Valid From",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "validUntil": {
                        "type": "string",
                        "description": "Datetime when this record is valid to",
                        "title": "Valid Until",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "note": {
                        "type": "string",
                        "description": "Note to this entry",
                        "title": "Note"
                    },
                    "relationType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "relationPart": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "relationClassification": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "relationClass": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "relationPartOrigin": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer relation information",
                "additionalProperties": false
            },
            "CustomerRequisitionItemElement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "requisitionItem": {
                        "$ref": "#/components/schemas/ConsultationRequisitionMutableItem"
                    },
                    "portfolioAssignment": {
                        "$ref": "#/components/schemas/CustomerRequisitionItemElementCustomerRequisitionItemElementPortfolioAssignment"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Service for requisition items per customer",
                "additionalProperties": false
            },
            "CustomerRequisitionItemElementCustomerRequisitionItemElementPortfolioAssignment": {
                "type": "object",
                "properties": {
                    "isImplementedInternal": {
                        "type": "boolean",
                        "description": "Is implemented internal",
                        "title": "Is implemented internal"
                    },
                    "portfolioId": {
                        "type": "string",
                        "description": "The portfolio id",
                        "title": "Portfolio id"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status",
                        "title": "Status"
                    }
                },
                "description": "Portfolio assignment object",
                "required": [
                    "isImplementedInternal",
                    "portfolioId",
                    "status"
                ],
                "additionalProperties": false
            },
            "CustomerRestricted": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer Restricted records",
                "additionalProperties": false
            },
            "CustomerSalary": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the customer, links to /person/customer/{id}",
                        "title": "Customer id"
                    },
                    "salary": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Salary",
                        "items": {
                            "$ref": "#/components/schemas/CustomerSalaryCustomerSalarySalary"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Yearly salary by customer",
                "additionalProperties": false
            },
            "CustomerSalaryCustomerSalarySalary": {
                "type": "object",
                "properties": {
                    "employer": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Employer"
                    },
                    "amount": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Amount"
                    }
                },
                "additionalProperties": false
            },
            "CustomerSearch": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "symbols": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Symbols",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "customer search aliases",
                "additionalProperties": false
            },
            "CustomerTask": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "recordOrigin": {
                        "type": "string",
                        "title": "Record Origin",
                        "description": "Where this record originated from"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the customer, links to /person/customer/{id}",
                        "title": "Customer id"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "When the task was created",
                        "title": "Created at",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "dueDate": {
                        "type": "string",
                        "description": "When the task is due",
                        "title": "Due date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "resolvedDate": {
                        "type": "string",
                        "description": "When the task was resolved",
                        "title": "Resolved date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "consultantInitiatorId": {
                        "type": "string",
                        "description": "Optional ID to a consultant, links to /person/consultant/{id}",
                        "title": "Consultant initiator id"
                    },
                    "note": {
                        "type": "string",
                        "description": "Optional note",
                        "title": "Note"
                    },
                    "amount": {
                        "type": "number",
                        "description": "Optional amount",
                        "title": "Amount"
                    },
                    "orderOrigin": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "orderId": {
                        "type": "string",
                        "description": "ID of the order that applies to this entry.",
                        "title": "Order id"
                    },
                    "customerTaskType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "customerTaskStatus": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "loanAdvisoryDocument": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "successProduct": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "externalReference": {
                        "type": "string",
                        "description": "An arbitrary external reference",
                        "title": "External reference"
                    },
                    "staffMemberId": {
                        "type": "string",
                        "description": "ID of the staff member who last modified the task, links to /person/consultant/{id}",
                        "title": "Staff member id"
                    },
                    "additionalEditor": {
                        "type": "string",
                        "description": "Editor of the lead, links to /person/consultant/{id}",
                        "title": "Additional editor"
                    },
                    "versionInfo": {
                        "type": "string",
                        "description": "Version info",
                        "title": "Version info"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID",
                        "title": "External id"
                    },
                    "publishDate": {
                        "type": "string",
                        "description": "When the task is published",
                        "title": "Publish date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "expireDate": {
                        "type": "string",
                        "description": "When the task will expire",
                        "title": "Expire date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "sourceSystem": {
                        "type": "string",
                        "description": "string which describes the source system of the record",
                        "title": "Source system"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Tasks from the core system that belong mainly to Customer.",
                "required": [
                    "customerId",
                    "customerTaskType",
                    "orderOrigin",
                    "staffMemberId"
                ],
                "additionalProperties": false
            },
            "CustomerToBusinessRelations": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "ID of the account owner, links to /person/customer/{id}",
                        "title": "Customer id"
                    },
                    "isCssCustomer": {
                        "type": "boolean",
                        "description": "indicates if the customer is a customer of CSS",
                        "title": "Is css customer"
                    },
                    "isMobiliarCustomer": {
                        "type": "boolean",
                        "description": "indicates if the customer is a customer of Mobiliar",
                        "title": "Is mobiliar customer"
                    },
                    "isVaudoiseCustomer": {
                        "type": "boolean",
                        "description": "indicates if the customer is a customer of Vaudoise",
                        "title": "Is vaudoise customer"
                    },
                    "isViacCustomer": {
                        "type": "boolean",
                        "description": "indicates if the customer is a customer of VIAC",
                        "title": "Is viac customer"
                    },
                    "isRevolutCustomer": {
                        "type": "boolean",
                        "description": "indicates if the customer is a customer of Revolut",
                        "title": "Is revolut customer"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Business relations by customer",
                "additionalProperties": false
            },
            "CustomerVerification": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "documentIdType": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Document id type"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Customer verification information for fidentity service",
                "additionalProperties": false
            },
            "CustomerVsb": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "isOk": {
                        "type": "boolean",
                        "description": "If true, the customer's VSB status is ok, false otherwise.",
                        "title": "Is OK"
                    },
                    "statusDate": {
                        "type": "string",
                        "description": "Datetime this entry got changed in status.",
                        "title": "Status Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "checkDate": {
                        "type": "string",
                        "description": "Datetime this entry got checked.",
                        "title": "Check Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "VSB information relating to customer",
                "additionalProperties": false
            },
            "DepositPerformance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "account": {
                        "$ref": "#/components/schemas/DepositPerformanceDepositPerformanceAccount"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "account id as string",
                        "title": "account id"
                    },
                    "depositValue": {
                        "type": "number",
                        "description": "Deposit value",
                        "title": "Deposit Value"
                    },
                    "twr": {
                        "type": "number",
                        "description": "TWR",
                        "title": "TWR"
                    },
                    "cashflow": {
                        "type": "number",
                        "description": "External cashflow",
                        "title": "External Cashflow"
                    },
                    "tradingDate": {
                        "type": "string",
                        "description": "Trading date.",
                        "title": "Trading Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Trading year",
                        "title": "Trading year"
                    },
                    "evaluationDate": {
                        "type": "string",
                        "description": "The evaluation date describes the date where for all instruments in the deposit a price exists.",
                        "title": "Evaluation Date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of closure, e.g. EOD, EOY,...",
                        "title": "Type of closure"
                    },
                    "deposit": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Deposit",
                        "items": {
                            "$ref": "#/components/schemas/DepositPerformanceDepositPerformanceDeposit"
                        }
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Deposit Performance",
                "required": [
                    "account",
                    "depositValue",
                    "evaluationDate",
                    "tradingDate",
                    "twr",
                    "year"
                ],
                "additionalProperties": false
            },
            "DepositPerformanceDepositPerformanceAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Account",
                        "title": "Account",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "DepositPerformanceDepositPerformanceDeposit": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Instrument name",
                        "title": "Instrument Name"
                    },
                    "valor": {
                        "type": "string",
                        "description": "Valor number",
                        "title": "Valor Number"
                    },
                    "aquisitionPrice": {
                        "type": "number",
                        "description": "Aquisition price of instrument",
                        "title": "Aquisition Price of Instrument"
                    },
                    "price": {
                        "type": "number",
                        "description": "Latest instrument price in deposit",
                        "title": "Latest Instrument price in Deposit"
                    },
                    "position": {
                        "type": "number",
                        "description": "Instrument position",
                        "title": "Instrument Position"
                    }
                },
                "required": [
                    "aquisitionPrice",
                    "name",
                    "position",
                    "price",
                    "valor"
                ],
                "additionalProperties": false
            },
            "DepositTransactions": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "consultantId": {
                        "type": "string",
                        "description": "ID of the consultant, links to /person/consultant/{id}",
                        "title": "Consultant id"
                    },
                    "transactions": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Transactions",
                        "items": {
                            "$ref": "#/components/schemas/DepositTransactionsDepositTransactionsTransactions"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Deposit transactions of the last 7d",
                "additionalProperties": false
            },
            "DepositTransactionsDepositTransactionsTransactions": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account id"
                    },
                    "accountNumber": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Account number"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "customerDesignation": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer designation"
                    },
                    "text": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Text"
                    },
                    "quantity": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Quantity"
                    },
                    "currencyIso": {
                        "type": "object",
                        "description": "@todo replace me",
                        "title": "Currency iso",
                        "additionalProperties": true
                    },
                    "value": {
                        "type": "number",
                        "description": "@todo replace me",
                        "title": "Value"
                    },
                    "tradingDate": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Trading date",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    }
                },
                "additionalProperties": false
            },
            "DirectDebitingProcedure": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Customer id"
                    },
                    "orderType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "lsvSubscriber": {
                        "type": "string",
                        "description": "Direct debiting procedure subscriber",
                        "title": "Direct Debiting Procedure Subscriber"
                    },
                    "account": {
                        "$ref": "#/components/schemas/DirectDebitingProcedureDirectDebitingProcedureAccount"
                    },
                    "contract": {
                        "$ref": "#/components/schemas/DirectDebitingProcedureDirectDebitingProcedureContract"
                    },
                    "suspension": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Suspension",
                        "items": {
                            "$ref": "#/components/schemas/DirectDebitingProcedureDirectDebitingProcedureSuspension"
                        }
                    },
                    "rightOfObjection": {
                        "type": "boolean",
                        "description": "Right of objection",
                        "title": "Right of Objection"
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "@todo replace me",
                        "title": "Valid from",
                        "format": "date-time",
                        "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[\\.]?\\d{0,6}[+-]\\d{2}[:]?\\d{2}$"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads direct debiting procedures",
                "required": [
                    "account"
                ],
                "additionalProperties": false
            },
            "DirectDebitingProcedureDirectDebitingProcedureAccount": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Account",
                        "title": "Account",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/account\\/account\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Account"
                        ],
                        "nullable": false
                    }
                },
                "required": [
                    "$ref"
                ],
                "additionalProperties": false
            },
            "DirectDebitingProcedureDirectDebitingProcedureContract": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Reference to Contract",
                        "title": "Contract",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/contract\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Contract"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "DirectDebitingProcedureDirectDebitingProcedureSuspension": {
                "type": "object",
                "properties": {
                    "$ref": {
                        "type": "string",
                        "description": "Account suspensions",
                        "title": "Account Suspensions",
                        "format": "extref",
                        "pattern": "^((http|https):\\/\\/)?(.+)?(:\\d+)?(\\/entity\\/code\\/)+(.*)+[^\\/]$",
                        "x-collection": [
                            "Code"
                        ],
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "DispatchRule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "customerId": {
                        "type": "string",
                        "description": "customer id as string",
                        "title": "customer id"
                    },
                    "portfolio": {
                        "$ref": "#/components/schemas/Accountgroup"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "electronicBankingContract": {
                        "$ref": "#/components/schemas/Contract"
                    },
                    "number": {
                        "type": "integer",
                        "description": "Integer value for number",
                        "title": "Number"
                    },
                    "contactVariation": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "routing": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "recipientAddress": {
                        "$ref": "#/components/schemas/CustomerAddress"
                    },
                    "recipientCustomer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "tier": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "copyType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "dispatchType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Dispatching rules",
                "required": [
                    "contactVariation",
                    "number",
                    "routing"
                ],
                "additionalProperties": false
            },
            "EBankingPermission": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Accounts",
                        "items": {
                            "$ref": "#/components/schemas/EBankingPermissionEBankingPermissionAccounts"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "E-Banking permissions per contract id",
                "additionalProperties": false
            },
            "EBankingPermissionEBankingPermissionAccounts": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "List of account ids",
                        "title": "Account Id list"
                    },
                    "permissions": {
                        "type": "array",
                        "description": "List of permissions",
                        "title": "Permissions list",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            },
            "EService": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "ID",
                        "description": "Unique identifier"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/EServiceEServiceCustomer"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "@todo replace me",
                        "title": "Active"
                    },
                    "eServiceType": {
                        "$ref": "#/components/schemas/Code"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "@todo replace me",
                        "title": "Accounts",
                        "items": {
                            "$ref": "#/components/schemas/Account"
                        }
                    },
                    "tenant": {
                        "type": "integer",
                        "title": "tenant"
                    }
                },
                "description": "Loads e-services",
                "additionalProperties": false
            }
        }
    }
}