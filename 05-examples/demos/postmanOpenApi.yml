openapi: 3.1.0
info:
  title: Demos Example Process API
  version: '1.0'
  summary: "\n**This is for Postman - to have example requests. Be aware the Output\
    \ is not provided!**\n\n\n\nCreated at 09/12/2023, 12:29\n\n**See the [Camundala\
    \ Documentation](https://pme123.github.io/camundala/)\n\n\n\n\n<details>\n<summary><b><i>CHANGELOG.md</i></b></summary>\n\
    <p>\n\n\nAll notable changes to this project will be documented in this file.\n\
    \n* Types of Changes (L3):\n  * Added: new features\n  * Changed: changes in existing\
    \ functionality\n  * Deprecated: soon-to-be-removed features\n  * Removed: now\
    \ removed features\n  * Fixed: any bug fixes\n  * Security: in case of vulnerabilities\n\
    \n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\n\
    and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\
    \n### Unreleased\nInitial Version\n\n</p>\n</details>\n\n\n<p/>\n<details>\n<summary>\n\
    <b><i>Supported General Variables</i></b>\n</summary>\n\n<p>\n\n### Processes\n\
    \n**mockedSubprocesses**:\n\nMock the SubProcesses with their default Mocks.\n\
    This is a list of the _SubProcesses processNames_ you want to mock.\nDepending\
    \ on your implementation it is also possible to use a _comma separated_ String,\n\
    like `\"mySubProcess,myOtherSubProcess\"`\n\n\n- DSL:\n```scala\nprocess(..)\n\
    \  .mockSubProcesses(\"mySubProcess1\", \"mySubProcess2\") // creates a list with\
    \ SubProcessess\n  .mockSubProcess(\"myOtherSubProcess\") // adds a SubProcess\n\
    ```\n\n- Json\n```json\n...\n\"mockedSubprocesses\": [\"mySubProcess\", \"myOtherSubProcess\"\
    ],\n...\n```\n\n### Processes and ExternalTasks\n**outputVariables**:\n\nYou can\
    \ filter the Output with a list of variable names you are interested in.\nThis\
    \ list may include all variables from the output (`Out`). We included an example\
    \ for each Process or ExternalTask.\nDepending on your implementation it is also\
    \ possible to use a _comma separated_ String,\nlike `\"name,firstName\"`\n\n\n\
    - DSL:\n```scala\nprocess(..) // or serviceProcess(..)\n  .withOutputVariables(\"\
    name\", \"firstName\") // creates a list with outputVariables\n  .withOutputVariable(\"\
    nickname\") // adds a outputVariable\n```\n\n- Json\n```json\n...\n\"outputVariables\"\
    : [\"name\", \"firstName\"],\n...\n```\n\n\n**outputMock**:\n\nMock the Process\
    \ or ExternalTask (`Out`)\n - You find an example in every _Process_ and _ExternalTask_.\n\
    \n\n- DSL:\n```scala\nprocess(..) // or serviceProcess(..)\n  .mockWith(outputMock)\n\
    ```\n\n- Json\n```json\n...\n\"outputMock\": {..},\n...\n```\n\n\n**defaultMocked**:\n\
    \nMock the ExternalTasks (Workers only) with their default Mock:\n\n- DSL:\n```scala\n\
    process(..) // or serviceProcess(..)\n  .mockServices\n```\n\n- Json\n```json\n\
    ...\n\"defaultMocked\": true,\n...\n```\n\n\n**impersonateUserId**:\n\nUser-ID\
    \ of a User that should be taken to authenticate to the services.\nThis must be\
    \ supported by your implementation. *Be caution: this may be a security issue!*.\n\
    It is helpful if you have Tokens that expire, but long running Processes.\n\n\
    - DSL:\n```scala\nprocess(..) // or serviceProcess(..)\n  .withImpersonateUserId(impersonateUserId)\n\
    ```\n\n- Json\n```json\n...\n\"impersonateUserId\": \"myUserName\",\n...\n```\n\
    \n### ExternalTasks\n**outputServiceMock**:\n\nMock the Inner-Service (`MockedServiceResponse[ServiceOut]`)\n\
    \ - You find an example in every _ExternalTask_.\n\n\n- DSL:\n```scala\nserviceProcess(..)\n\
    \  .mockServiceWith(MockedServiceResponse\n     .success200(inOut.defaultServiceOutMock))\n\
    ```\n\n- Json\n```json\n...\n\"outputServiceMock\": {\n  \"respStatus\" : 200,\n\
    \  \"respBody\" : \"Example String Body\",\n  \"respHeaders\" : [\n  ]\n},\n...\n\
    ```\n\n\n**handledErrors**:\n\nA list of error codes that are handled (`BpmnError`)\n\
    Depending on your implementation it is also possible to use a _comma separated_\
    \ String,\nlike `\"validation-failed,404\"`\n\n\n- DSL:\n```scala\nserviceProcess(..)\n\
    \  .handleErrors(ErrorCodes.`validation-failed`, \"404\") // create a list of\
    \ handledErrors\n  .handleError(\"404\") // add a handledError\n```\n\n- Json\n\
    ```json\n...\n\"handledErrors\": [\"validation-failed\", \"404\"],\n...\n```\n\
    \n\n**regexHandledErrors**:\n\nYou can further filter Handled Errors with a list\
    \ of Regex expressions that the body error message must match.\nDepending on your\
    \ implementation it is also possible to use a _comma separated_ String,\nlike\
    \ `\"SQL exception,\"errorNr\":\"20000\"\"`\n\n\n- DSL:\n```scala\nserviceProcess(..)\n\
    \  .handleErrorWithRegex(\"SQL exception\")\n  .handleErrorWithRegex(\"\\\"errorNr\\\
    \":\\\"20000\\\"\")\n```\n\n- Json\n```json\n...\n\"regexHandledErrors\": [\"\
    SQL exception\", \"\"errorNr\":\"20000\"\"],\n...\n```\n\n</p>\n</details>\n<p/>\n\
    \        \n\n"
servers:
- url: http://localhost:8034/engine-rest
  description: Local Developer Server
paths:
  /decision-definition/key/{key}/--REMOVE:singleEntry--/evaluate:
    post:
      tags:
      - singleEntry
      summary: 'DecisionDmn: singleEntry'
      description: |2



        Decision DMN:
        - _decisionDefinitionKey_: `singleEntry`,


        See API Doc: [DecisionDmn: singleEntry](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/singleEntry/operation/DecisionDmn:%20singleEntry)
      operationId: postDecision-definitionKeyKey--remove:singleentry--Evaluate
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: singleEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateDecisionIn'
            examples:
              singleEntry:
                value:
                  variables:
                    letter:
                      value: A
                      type: String
        required: true
      responses:
        '200':
          description: ''
  /decision-definition/key/{key}/--REMOVE:collectEntries--/evaluate:
    post:
      tags:
      - collectEntries
      summary: 'DecisionDmn: collectEntries'
      description: |2



        Decision DMN:
        - _decisionDefinitionKey_: `collectEntries`,


        See API Doc: [DecisionDmn: collectEntries](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/collectEntries/operation/DecisionDmn:%20collectEntries)
      operationId: postDecision-definitionKeyKey--remove:collectentries--Evaluate
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: collectEntries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateDecisionIn'
            examples:
              collectEntries:
                value:
                  variables:
                    letter:
                      value: A
                      type: String
        required: true
      responses:
        '200':
          description: ''
  /decision-definition/key/{key}/--REMOVE:singleResult--/evaluate:
    post:
      tags:
      - singleResult
      summary: 'DecisionDmn: singleResult'
      description: |2



        Decision DMN:
        - _decisionDefinitionKey_: `singleResult`,


        See API Doc: [DecisionDmn: singleResult](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/singleResult/operation/DecisionDmn:%20singleResult)
      operationId: postDecision-definitionKeyKey--remove:singleresult--Evaluate
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: singleResult
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateDecisionIn'
            examples:
              singleResult:
                value:
                  variables:
                    letter:
                      value: A
                      type: String
        required: true
      responses:
        '200':
          description: ''
  /decision-definition/key/{key}/--REMOVE:resultList--/evaluate:
    post:
      tags:
      - resultList
      summary: 'DecisionDmn: resultList'
      description: |2



        Decision DMN:
        - _decisionDefinitionKey_: `resultList`,


        See API Doc: [DecisionDmn: resultList](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/resultList/operation/DecisionDmn:%20resultList)
      operationId: postDecision-definitionKeyKey--remove:resultlist--Evaluate
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: resultList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateDecisionIn'
            examples:
              resultList:
                value:
                  variables:
                    letter:
                      value: A
                      type: String
        required: true
      responses:
        '200':
          description: ''
  /process-definition/key/camundala-mapping-example/start:
    post:
      tags:
      - camundala-mapping-example
      summary: 'Process: camundala-mapping-example'
      description: |2


        See API Doc: [Process: camundala-mapping-example](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/camundala-mapping-example/operation/Process:%20camundala-mapping-example)
      operationId: postProcess-definitionKeyCamundala-mapping-exampleStart
      responses:
        '200':
          description: ''
  /process-definition/key/enum-example/start:
    post:
      tags:
      - enum-example
      summary: 'Process: enum-example'
      description: |2


        See API Doc: [Process: enum-example](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/enum-example/operation/Process:%20enum-example)
      operationId: postProcess-definitionKeyEnum-exampleStart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessIn'
            examples:
              enum-example:
                value:
                  variables:
                    someValue:
                      value: hello
                      type: String
                    simpleEnum:
                      value: One
                      type: String
                    customMock:
                      value: |-
                        {
                          "someOut" : "hello",
                          "intValue" : 12,
                          "simpleEnum" : "One",
                          "type" : "A"
                        }
                      type: Json
                  businessKey: enum-example
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
  /decision-definition/key/{key}/--REMOVE:DateExample--/evaluate:
    post:
      tags:
      - DateExample
      summary: 'DecisionDmn: DateExample'
      description: |2



        Decision DMN:
        - _decisionDefinitionKey_: `DateExample`,


        See API Doc: [DecisionDmn: DateExample](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/DateExample/operation/DecisionDmn:%20DateExample)
      operationId: postDecision-definitionKeyKey--remove:dateexample--Evaluate
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: DateExample
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateDecisionIn'
            examples:
              DateExample:
                value:
                  variables:
                    inDate:
                      value: '2013-12-12T12:12:12'
                      type: String
        required: true
      responses:
        '200':
          description: ''
  /decision-definition/key/{key}/--REMOVE:VariablesExample--/evaluate:
    post:
      tags:
      - VariablesExample
      summary: 'DecisionDmn: VariablesExample'
      description: |2



        Decision DMN:
        - _decisionDefinitionKey_: `VariablesExample`,


        See API Doc: [DecisionDmn: VariablesExample](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/VariablesExample/operation/DecisionDmn:%20VariablesExample)
      operationId: postDecision-definitionKeyKey--remove:variablesexample--Evaluate
      parameters:
      - name: key
        in: path
        description: The Process- or Decision-DefinitionKey of the Process or Decision
        required: true
        schema:
          type: string
          default: VariablesExample
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateDecisionIn'
            examples:
              VariablesExample:
                value:
                  variables:
                    letters:
                      value: A_dynamic_2
                      type: String
                    inputVariable:
                      value: dynamic
                      type: String
                    outputVariable:
                      value: dynamicOut
                      type: String
        required: true
      responses:
        '200':
          description: ''
  /process-definition/key/simulation-TestOverrides/start:
    post:
      tags:
      - simulation-TestOverrides
      summary: 'Process: simulation-TestOverrides'
      description: |2


        See API Doc: [Process: simulation-TestOverrides](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/simulation-TestOverrides/operation/Process:%20simulation-TestOverrides)
      operationId: postProcess-definitionKeySimulation-testoverridesStart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessIn'
            examples:
              simulation-TestOverrides:
                value:
                  variables:
                    simpleValue:
                      value: hello
                      type: String
                    collectionValue:
                      value: |-
                        [
                          "hello",
                          "bye"
                        ]
                      type: Json
                    objectValue:
                      value: |-
                        {
                          "name" : "salu",
                          "other" : false
                        }
                      type: Json
                    objectCollectionValue:
                      value: |-
                        [
                          {
                            "name" : "salu",
                            "other" : false
                          },
                          {
                            "name" : "tschau",
                            "other" : true
                          }
                        ]
                      type: Json
                  businessKey: simulation-TestOverrides
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
  /process-definition/key/signal-example/--REMOVEsignal-example--/start:
    post:
      tags:
      - SignalMessageExample
      summary: 'Process: signal-example'
      description: |2


        See API Doc: [Process: signal-example](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/signal-example/operation/Process:%20signal-example)
      operationId: postProcess-definitionKeySignal-example--removesignal-example--Start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessIn'
            examples:
              signal-example:
                value:
                  variables:
                    someValue:
                      value: hello
                      type: String
                  businessKey: signal-example
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
  /process-definition/key/message-for-example/--REMOVEmessage-for-example--/start:
    post:
      tags:
      - SignalMessageExample
      summary: 'Process: message-for-example'
      description: |2


        See API Doc: [Process: message-for-example](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/message-for-example/operation/Process:%20message-for-example)
      operationId: postProcess-definitionKeyMessage-for-example--removemessage-for-example--Start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartProcessIn'
            examples:
              message-for-example:
                value:
                  variables:
                    someValue:
                      value: hello
                      type: String
                  businessKey: message-for-example
                  withVariablesInReturn: true
        required: true
      responses:
        '200':
          description: ''
  /signal/--REMOVE:intermediate-signal-for-example--:
    post:
      tags:
      - SignalMessageExample
      summary: 'SignalEvent: intermediate-signal-for-example'
      description: |2

        - _messageName_: `intermediate-signal-for-example`

        Signal:
        - _messageName_: `intermediate-signal-for-example`,


        See API Doc: [SignalEvent: intermediate-signal-for-example](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/intermediate-signal-for-example/operation/SignalEvent:%20intermediate-signal-for-example)
      operationId: postSignal--remove:intermediate-signal-for-example--
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendSignalIn'
            examples:
              intermediate-signal-for-example:
                value:
                  name: intermediate-signal-for-example
                  variables:
                    someValue:
                      value: hello
                      type: String
        required: true
      responses:
        '200':
          description: ''
  /message/--REMOVE:intermediate-message-for-example--:
    post:
      tags:
      - SignalMessageExample
      summary: 'MessageEvent: intermediate-message-for-example'
      description: |2

        - _messageName_: `intermediate-message-for-example`

        Message:
        - _messageName_: `intermediate-message-for-example`,


        See API Doc: [MessageEvent: intermediate-message-for-example](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/intermediate-message-for-example/operation/MessageEvent:%20intermediate-message-for-example)
      operationId: postMessage--remove:intermediate-message-for-example--
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorrelateMessageIn'
            examples:
              intermediate-message-for-example:
                value:
                  messageName: intermediate-message-for-example
                  businessKey: intermediate-message-for-example
                  processVariables:
                    someValue:
                      value: hello
                      type: String
                  all: false
                  resultEnabled: true
                  variablesInResultEnabled: true
        required: true
      responses:
        '200':
          description: ''
  /process-definition/key/timer-example/start:
    post:
      tags:
      - timer-example
      summary: 'Process: timer-example'
      description: |2


        See API Doc: [Process: timer-example](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/timer-example/operation/Process:%20timer-example)
      operationId: postProcess-definitionKeyTimer-exampleStart
      responses:
        '200':
          description: ''
  /job/--REMOVE:wait%20for%20one%20day--:
    post:
      tags:
      - timer-example
      summary: 'TimerEvent: wait for one day'
      description: |2


        See API Doc: [TimerEvent: wait for one day](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/wait-for-one-day/operation/TimerEvent:%20wait%20for%20one%20day)
      operationId: postJob--remove:wait for one day--
      responses:
        '200':
          description: ''
  /job/{jobId}/execute/--REMOVE:wait%20for%20one%20day--:
    post:
      tags:
      - timer-example
      summary: 'TimerEvent: wait for one day'
      description: |2


        See API Doc: [TimerEvent: wait for one day](https://webstor.ch/camundala/myCompany/demos-example/OpenApi.html#tag/wait-for-one-day/operation/TimerEvent:%20wait%20for%20one%20day)
      operationId: postJobJobidExecute--remove:wait for one day--
      parameters:
      - name: jobId
        in: path
        description: |
          The jobId of the Timer.
          > This is the result id of the `GetJob`

          Add in the _Tests_ panel of _Postman_ in GetActiveJob:
          ```
          let result = pm.response.json()[0];
          pm.collectionVariables.set("jobId", result.id)
          ```
        required: true
        schema:
          type: string
          default: '{{taskId}}'
      responses:
        '200':
          description: ''
components:
  schemas:
    CBoolean:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: boolean
        type:
          type: string
    CDouble:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: number
          format: double
        type:
          type: string
    CFile:
      required:
      - value
      - valueInfo
      - type
      type: object
      properties:
        value:
          type: string
          description: The File's content as Base64 encoded String.
        valueInfo:
          $ref: '#/components/schemas/CFileValueInfo'
        type:
          type: string
    CFileValueInfo:
      required:
      - filename
      type: object
      properties:
        filename:
          type: string
        mimetype:
          type: string
    CInteger:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: integer
          format: int32
        type:
          type: string
    CJson:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CLong:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: integer
          format: int64
        type:
          type: string
    CNull:
      type: object
    CString:
      required:
      - value
      - type
      type: object
      properties:
        value:
          type: string
        type:
          type: string
    CamundaVariable:
      oneOf:
      - $ref: '#/components/schemas/CBoolean'
      - $ref: '#/components/schemas/CDouble'
      - $ref: '#/components/schemas/CFile'
      - $ref: '#/components/schemas/CInteger'
      - $ref: '#/components/schemas/CJson'
      - $ref: '#/components/schemas/CLong'
      - $ref: '#/components/schemas/CNull'
      - $ref: '#/components/schemas/CString'
    CorrelateMessageIn:
      required:
      - messageName
      - all
      - resultEnabled
      - variablesInResultEnabled
      type: object
      properties:
        messageName:
          type: string
        businessKey:
          type: string
        tenantId:
          type: string
        withoutTenantId:
          type: boolean
        processInstanceId:
          type: string
        correlationKeys:
          $ref: '#/components/schemas/Map_CamundaVariable'
        localCorrelationKeys:
          $ref: '#/components/schemas/Map_CamundaVariable'
        processVariables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        processVariablesLocal:
          $ref: '#/components/schemas/Map_CamundaVariable'
        all:
          type: boolean
        resultEnabled:
          type: boolean
        variablesInResultEnabled:
          type: boolean
    EvaluateDecisionIn:
      required:
      - variables
      type: object
      properties:
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
      description: 'A JSON object with the following properties:'
    Map_CamundaVariable:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CamundaVariable'
    SendSignalIn:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the signal to deliver.
        tenantId:
          type: string
          description: |2

            Specifies a tenant to deliver the signal. The signal can only be received on executions or process definitions which belongs to the given tenant.

            Note: Cannot be used in combination with executionId.
        withoutTenantId:
          type: boolean
        executionId:
          type: string
          description: |2

            Optionally specifies a single execution which is notified by the signal.

            Note: If no execution id is defined the signal is broadcasted to all subscribed handlers.
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
    StartProcessIn:
      required:
      - variables
      - withVariablesInReturn
      type: object
      properties:
        variables:
          $ref: '#/components/schemas/Map_CamundaVariable'
        businessKey:
          type: string
          description: The business key of the process instance.
        withVariablesInReturn:
          type: boolean
          description: Set to false will not return the Process Variables.
      description: 'A JSON object with the following properties: (at least an empty
        JSON object {} or an empty request body)'
